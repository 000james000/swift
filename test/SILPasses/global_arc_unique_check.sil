// RUN: %target-sil-opt -global-arc-opts -verify %s | FileCheck %s

import Builtin
import Swift
import SwiftShims

class MD5 {
  init()
  final var w: [UInt32]
}

// CHECK-LABEL:sil @test_unique_check_arc : $@convention(method) (@owned MD5) -> ()
sil @test_unique_check_arc : $@convention(method) (@owned MD5) -> () {
// CHECK: bb0
bb0(%0 : $MD5):
  %1 = integer_literal $Builtin.Int32, 0
  %2 = integer_literal $Builtin.Int32, 16
  %3 = struct $Int32 (%1 : $Builtin.Int32)
  br bb1(%1 : $Builtin.Int32)

// CHECK: bb1
bb1(%5 : $Builtin.Int32):
  %7 = builtin "cmp_eq_Int32"(%5 : $Builtin.Int32, %2 : $Builtin.Int32) : $Builtin.Int1
  cond_br %7, bb3, bb2

// CHECK: bb2
bb2:
  %9 = integer_literal $Builtin.Int32, 1
  %11 = integer_literal $Builtin.Int1, -1
  %12 = builtin "sadd_with_overflow_Int32"(%5 : $Builtin.Int32, %9 : $Builtin.Int32, %11 : $Builtin.Int1) : $(Builtin.Int32, Builtin.Int1)
  %13 = tuple_extract %12 : $(Builtin.Int32, Builtin.Int1), 0
  // CHECK-NOT: strong_retain
  // CHECK-NOT: strong_release
  strong_retain %0 : $MD5
  // function_ref _swift_isUniquelyReferenced_native
  %172 = function_ref @_swift_isUniquelyReferenced_native : $@convention(thin) (Int32) -> Bool
  %314 = ref_element_addr %0 : $MD5, #MD5.w
  %318 = load %314 : $*Array<UInt32>
  %319 = alloc_stack $Array<UInt32>
  store %318 to %319#1 : $*Array<UInt32>
  %321 = unchecked_addr_cast %319#1 : $*Array<UInt32> to $*Int32
  %322 = load %321 : $*Int32
  dealloc_stack %319#0 : $*@local_storage Array<UInt32>
  %179 = apply %172(%322) : $@convention(thin) (Int32) -> Bool
  %180 = struct_extract %179 : $Bool, #Bool.value
  cond_br %180, bb4, bb5 

// CHECK: bb3
// CHECK-NEXT: strong_release
// CHECK-NEXT: tuple
// CHECK-NEXT: return
bb3:
  strong_release %0 : $MD5
  %273 = tuple ()
  return %273 : $()

bb4:
  br bb5

// CHECK-NOT: strong_release
bb5:
  strong_release %0 : $MD5
  br bb1(%13 : $Builtin.Int32)

}
sil @_swift_isUniquelyReferenced_native : $@convention(thin) (Int32) -> Bool
