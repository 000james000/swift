// RUN: %target-sil-opt -specialize %s | FileCheck %s

sil_stage canonical

import Builtin
import Swift

// CHECK-LABEL: sil @_TF10specialize4exp1FT_T_ : $@thin () -> () {
// CHECK-NOT: apply
// CHECK: [[CTOR:%[0-9]+]] = function_ref @_TTSg5Si___TFV10specialize3XXXCU__fMGS0_Q__FT1tQ__GS0_Q__
// CHECK: apply [[CTOR]]
// CHECK: [[ACCEPTS_INT:%[0-9]+]] = function_ref @_TF10specialize10acceptsIntFSiT_
// CHECK: [[FOO:%[0-9]+]] = function_ref @_TTSg5Si___TFV10specialize3XXX3fooU__fRGS0_Q__FT1tQ__Si
// CHECK: apply [[FOO]]
// CHECK: apply [[ACCEPTS_INT]]
// CHECK: return
// CHEcK: sil @_TF10specialize4exp2FT_T_ : $@thin () -> () {

struct XXX<T> {
  init(t: T)
  mutating func foo(#t: T) -> Int
  var m_t: T
}

// top_level_code
sil private @top_level_code : $@thin () -> () {
bb0:
  %0 = tuple ()                                   // user: %1
  return %0 : $()                                 // id: %1
}

// specialize.XXX.init <A>(specialize.XXX<A>.Type)(t : A) -> specialize.XXX<A>
sil @_TFV10specialize3XXXCU__fMGS0_Q__FT1tQ__GS0_Q__ : $@thin <T> (@out XXX<T>, @in T, @thin XXX<T>.Type) -> () {
bb0(%0 : $*XXX<T>, %1 : $*T, %2 : $@thin XXX<T>.Type):
  %3 = alloc_stack $XXX<T>  // var self           // users: %7, %11, %13
  debug_value_addr %1 : $*T  // let t             // id: %4
  %5 = alloc_stack $T                             // users: %6, %8, %9
  copy_addr %1 to [initialization] %5#1 : $*T     // id: %6
  %7 = struct_element_addr %3#1 : $*XXX<T>, #XXX.m_t // user: %8
  copy_addr [take] %5#1 to [initialization] %7 : $*T // id: %8
  dealloc_stack %5#0 : $*@local_storage T         // id: %9
  destroy_addr %1 : $*T                           // id: %10
  copy_addr [take] %3#1 to [initialization] %0 : $*XXX<T> // id: %11
  %12 = tuple ()                                  // user: %14
  dealloc_stack %3#0 : $*@local_storage XXX<T>    // id: %13
  return %12 : $()                                // id: %14
}

// specialize.XXX.foo <A>(@inout specialize.XXX<A>)(t : A) -> Swift.Int
sil @_TFV10specialize3XXX3fooU__fRGS0_Q__FT1tQ__Si : $@cc(method) @thin <T> (@in T, @inout XXX<T>) -> Int {
bb0(%0 : $*T, %1 : $*XXX<T>):
  debug_value_addr %0 : $*T  // let t             // id: %2
  %3 = alloc_stack $T                             // users: %4, %6, %7
  copy_addr %0 to [initialization] %3#1 : $*T     // id: %4
  %5 = struct_element_addr %1 : $*XXX<T>, #XXX.m_t // user: %6
  copy_addr [take] %3#1 to %5 : $*T               // id: %6
  dealloc_stack %3#0 : $*@local_storage T         // id: %7
  %8 = integer_literal $Builtin.Word, 4           // user: %9
  %9 = struct $Int (%8 : $Builtin.Word)           // user: %11
  destroy_addr %0 : $*T                           // id: %10
  return %9 : $Int                                // id: %11
}

// Swift.Int._convertFromBuiltinIntegerLiteral (Swift.Int.Type)(Builtin.Int2048) -> Swift.Int
sil public_external [transparent] @_TFSi33_convertFromBuiltinIntegerLiteralfMSiFBi2048_Si : $@thin (Builtin.Int2048, @thin Int.Type) -> Int {
bb0(%0 : $Builtin.Int2048, %1 : $@thin Int.Type):
  %3 = builtin "s_to_s_checked_trunc_Int2048_Word"(%0 : $Builtin.Int2048) : $(Builtin.Word, Builtin.Int1)
  %4 = tuple_extract %3 : $(Builtin.Word, Builtin.Int1), 0 // user: %5
  %5 = struct $Int (%4 : $Builtin.Word)           // user: %6
  return %5 : $Int                                // id: %6
}

// specialize.acceptsInt (Swift.Int) -> ()
sil @_TF10specialize10acceptsIntFSiT_ : $@thin (Int) -> () {
bb0(%0 : $Int):
  debug_value %0 : $Int  // let x                 // id: %1
  %2 = tuple ()                                   // user: %3
  return %2 : $()                                 // id: %3
}

// specialize.exp1 () -> ()
sil @_TF10specialize4exp1FT_T_ : $@thin () -> () {
bb0:
  %0 = alloc_stack $XXX<Int>  // var II           // users: %7, %15, %19
  // function_ref specialize.XXX.init <A>(specialize.XXX<A>.Type)(t : A) -> specialize.XXX<A>
  %1 = function_ref @_TFV10specialize3XXXCU__fMGS0_Q__FT1tQ__GS0_Q__ : $@thin <τ_0_0> (@out XXX<τ_0_0>, @in τ_0_0, @thin XXX<τ_0_0>.Type) -> () // user: %7
  %2 = metatype $@thin XXX<Int>.Type              // user: %7
  %3 = alloc_stack $Int                           // users: %6, %7, %8
  %4 = integer_literal $Builtin.Word, 5           // user: %5
  %5 = struct $Int (%4 : $Builtin.Word)           // user: %6
  store %5 to %3#1 : $*Int                        // id: %6
  %7 = apply %1<Int>(%0#1, %3#1, %2) : $@thin <τ_0_0> (@out XXX<τ_0_0>, @in τ_0_0, @thin XXX<τ_0_0>.Type) -> ()
  dealloc_stack %3#0 : $*@local_storage Int       // id: %8
  // function_ref specialize.acceptsInt (Swift.Int) -> ()
  %9 = function_ref @_TF10specialize10acceptsIntFSiT_ : $@thin (Int) -> () // user: %16
  // function_ref specialize.XXX.foo <A>(@inout specialize.XXX<A>)(t : A) -> Swift.Int
  %10 = function_ref @_TFV10specialize3XXX3fooU__fRGS0_Q__FT1tQ__Si : $@cc(method) @thin <τ_0_0> (@in τ_0_0, @inout XXX<τ_0_0>) -> Int // user: %15
  %11 = alloc_stack $Int                          // users: %14, %15, %17
  %12 = integer_literal $Builtin.Word, 4          // user: %13
  %13 = struct $Int (%12 : $Builtin.Word)         // user: %14
  store %13 to %11#1 : $*Int                      // id: %14
  %15 = apply %10<Int>(%11#1, %0#1) : $@cc(method) @thin <τ_0_0> (@in τ_0_0, @inout XXX<τ_0_0>) -> Int // user: %16
  %16 = apply %9(%15) : $@thin (Int) -> ()
  dealloc_stack %11#0 : $*@local_storage Int      // id: %17
  %18 = tuple ()                                  // user: %20
  dealloc_stack %0#0 : $*@local_storage XXX<Int>  // id: %19
  return %18 : $()                                // id: %20
}

// specialize.exp2 () -> ()
sil @_TF10specialize4exp2FT_T_ : $@thin () -> () {
bb0:
  %0 = alloc_stack $XXX<UInt8>  // var II8        // users: %7, %15, %19
  // function_ref specialize.XXX.init <A>(specialize.XXX<A>.Type)(t : A) -> specialize.XXX<A>
  %1 = function_ref @_TFV10specialize3XXXCU__fMGS0_Q__FT1tQ__GS0_Q__ : $@thin <τ_0_0> (@out XXX<τ_0_0>, @in τ_0_0, @thin XXX<τ_0_0>.Type) -> () // user: %7
  %2 = metatype $@thin XXX<UInt8>.Type            // user: %7
  %3 = alloc_stack $UInt8                         // users: %6, %7, %8
  %4 = integer_literal $Builtin.Int8, 5           // user: %5
  %5 = struct $UInt8 (%4 : $Builtin.Int8)         // user: %6
  store %5 to %3#1 : $*UInt8                      // id: %6
  %7 = apply %1<UInt8>(%0#1, %3#1, %2) : $@thin <τ_0_0> (@out XXX<τ_0_0>, @in τ_0_0, @thin XXX<τ_0_0>.Type) -> ()
  dealloc_stack %3#0 : $*@local_storage UInt8     // id: %8
  // function_ref specialize.acceptsInt (Swift.Int) -> ()
  %9 = function_ref @_TF10specialize10acceptsIntFSiT_ : $@thin (Int) -> () // user: %16
  // function_ref specialize.XXX.foo <A>(@inout specialize.XXX<A>)(t : A) -> Swift.Int
  %10 = function_ref @_TFV10specialize3XXX3fooU__fRGS0_Q__FT1tQ__Si : $@cc(method) @thin <τ_0_0> (@in τ_0_0, @inout XXX<τ_0_0>) -> Int // user: %15
  %11 = alloc_stack $UInt8                        // users: %14, %15, %17
  %12 = integer_literal $Builtin.Int8, 4          // user: %13
  %13 = struct $UInt8 (%12 : $Builtin.Int8)       // user: %14
  store %13 to %11#1 : $*UInt8                    // id: %14
  %15 = apply %10<UInt8>(%11#1, %0#1) : $@cc(method) @thin <τ_0_0> (@in τ_0_0, @inout XXX<τ_0_0>) -> Int // user: %16
  %16 = apply %9(%15) : $@thin (Int) -> ()
  dealloc_stack %11#0 : $*@local_storage UInt8    // id: %17
  %18 = tuple ()                                  // user: %20
  dealloc_stack %0#0 : $*@local_storage XXX<UInt8> // id: %19
  return %18 : $()                                // id: %20
}

// Swift.UInt8.init (Swift.UInt8.Type)(Swift.Int) -> Swift.UInt8
sil public_external [transparent] @_TFVSs5UInt8CfMS_FSiS_ : $@thin (Int, @thin UInt8.Type) -> UInt8 {
bb0(%0 : $Int, %1 : $@thin UInt8.Type):
  %3 = struct_extract %0 : $Int, #Int.value       // user: %4
  %4 = builtin "zextOrBitCast_Word_Int64"(%3 : $Builtin.Word) : $Builtin.Int64 // user: %6
  %6 = builtin "s_to_u_checked_trunc_Int64_Int8"(%4 : $Builtin.Int64) : $(Builtin.Int8, Builtin.Int1) // users: %7, %8
  %7 = tuple_extract %6 : $(Builtin.Int8, Builtin.Int1), 0 // user: %10
  %8 = tuple_extract %6 : $(Builtin.Int8, Builtin.Int1), 1 // user: %9
  cond_fail %8 : $Builtin.Int1                    // id: %9
  %10 = struct $UInt8 (%7 : $Builtin.Int8)        // user: %11
  return %10 : $UInt8                             // id: %11
}

// specialize.useClosure <A>(fun : () -> A) -> A
sil @_TF10specialize10useClosureU__FT3funFT_Q__Q_ : $@thin <T> (@out T, @owned @callee_owned (@out T) -> ()) -> () {
bb0(%0 : $*T, %1 : $@callee_owned (@out T) -> ()):
  debug_value %1 : $@callee_owned (@out T) -> ()  // let fun // id: %2
  strong_retain %1 : $@callee_owned (@out T) -> () // id: %3
  %4 = apply %1(%0) : $@callee_owned (@out T) -> ()
  strong_release %1 : $@callee_owned (@out T) -> () // id: %5
  %6 = tuple ()                                   // user: %7
  return %6 : $()                                 // id: %7
}

// specialize.getGenericClosure <A>(t : A) -> () -> A
sil @_TF10specialize17getGenericClosureU__FT1tQ__FT_Q_ : $@thin <T> (@in T) -> @owned @callee_owned (@out T) -> () {
bb0(%0 : $*T):
  debug_value_addr %0 : $*T  // let t             // id: %1
  // function_ref specialize.(getGenericClosure <A>(t : A) -> () -> A).(tmp #1) (())A
  %2 = function_ref @_TFF10specialize17getGenericClosureU__FT1tQ__FT_Q_L_3tmpfT_Q_ : $@thin <τ_0_0> (@out τ_0_0, @owned Builtin.NativeObject, @inout τ_0_0) -> () // user: %5
  %3 = alloc_box $T                               // users: %4, %5, %5
  copy_addr %0 to [initialization] %3#1 : $*T     // id: %4
  %5 = partial_apply %2<T>(%3#0, %3#1) : $@thin <τ_0_0> (@out τ_0_0, @owned Builtin.NativeObject, @inout τ_0_0) -> () // user: %7
  destroy_addr %0 : $*T                           // id: %6
  return %5 : $@callee_owned (@out T) -> ()       // id: %7
}

// specialize.(getGenericClosure <A>(t : A) -> () -> A).(tmp #1) (())A
sil shared @_TFF10specialize17getGenericClosureU__FT1tQ__FT_Q_L_3tmpfT_Q_ : $@thin <T> (@out T, @owned Builtin.NativeObject, @inout T) -> () {
bb0(%0 : $*T, %1 : $Builtin.NativeObject, %2 : $*T):
  copy_addr %2 to [initialization] %0 : $*T       // id: %3
  strong_release %1 : $Builtin.NativeObject       // id: %4
  %5 = tuple ()                                   // user: %6
  return %5 : $()                                 // id: %6
}

// specialize.specializePartialApplies () -> Swift.UInt8
sil @_TF10specialize24specializePartialAppliesFT_VSs5UInt8 : $@thin () -> UInt8 {
bb0:
  %0 = alloc_stack $UInt8  // var i               // users: %3, %18
  %1 = integer_literal $Builtin.Int8, 5           // user: %2
  %2 = struct $UInt8 (%1 : $Builtin.Int8)         // users: %3, %7
  store %2 to %0#1 : $*UInt8                      // id: %3
  // function_ref specialize.useClosure <A>(fun : () -> A) -> A
  %4 = function_ref @_TF10specialize10useClosureU__FT3funFT_Q__Q_ : $@thin <τ_0_0> (@out τ_0_0, @owned @callee_owned (@out τ_0_0) -> ()) -> () // user: %14
  // function_ref specialize.getGenericClosure <A>(t : A) -> () -> A
  %5 = function_ref @_TF10specialize17getGenericClosureU__FT1tQ__FT_Q_ : $@thin <τ_0_0> (@in τ_0_0) -> @owned @callee_owned (@out τ_0_0) -> () // user: %8
  %6 = alloc_stack $UInt8                         // users: %7, %8, %17
  store %2 to %6#1 : $*UInt8                      // id: %7
  %8 = apply %5<UInt8>(%6#1) : $@thin <τ_0_0> (@in τ_0_0) -> @owned @callee_owned (@out τ_0_0) -> () // user: %10
  // function_ref reabstraction thunk helper from @callee_owned () -> (@out Swift.UInt8) to @callee_owned () -> (@unowned Swift.UInt8)
  %9 = function_ref @_TTRXFo__iVSs5UInt8_XFo__dS__ : $@thin (@owned @callee_owned (@out UInt8) -> ()) -> UInt8 // user: %10
  %10 = partial_apply %9(%8) : $@thin (@owned @callee_owned (@out UInt8) -> ()) -> UInt8 // user: %12
  // function_ref reabstraction thunk helper from @callee_owned () -> (@unowned Swift.UInt8) to @callee_owned () -> (@out Swift.UInt8)
  %11 = function_ref @_TTRXFo__dVSs5UInt8_XFo__iS__ : $@thin (@out UInt8, @owned @callee_owned () -> UInt8) -> () // user: %12
  %12 = partial_apply %11(%10) : $@thin (@out UInt8, @owned @callee_owned () -> UInt8) -> () // user: %14
  %13 = alloc_stack $UInt8                        // users: %14, %15, %16
  %14 = apply %4<UInt8>(%13#1, %12) : $@thin <τ_0_0> (@out τ_0_0, @owned @callee_owned (@out τ_0_0) -> ()) -> ()
  %15 = load %13#1 : $*UInt8                      // user: %19
  dealloc_stack %13#0 : $*@local_storage UInt8    // id: %16
  dealloc_stack %6#0 : $*@local_storage UInt8     // id: %17
  dealloc_stack %0#0 : $*@local_storage UInt8     // id: %18
  return %15 : $UInt8                             // id: %19
}

// reabstraction thunk helper from @callee_owned () -> (@out Swift.UInt8) to @callee_owned () -> (@unowned Swift.UInt8)
sil shared [transparent] @_TTRXFo__iVSs5UInt8_XFo__dS__ : $@thin (@owned @callee_owned (@out UInt8) -> ()) -> UInt8 {
bb0(%0 : $@callee_owned (@out UInt8) -> ()):
  %1 = alloc_stack $UInt8                         // users: %2, %3, %4
  %2 = apply %0(%1#1) : $@callee_owned (@out UInt8) -> ()
  %3 = load %1#1 : $*UInt8                        // user: %5
  dealloc_stack %1#0 : $*@local_storage UInt8     // id: %4
  return %3 : $UInt8                              // id: %5
}

// reabstraction thunk helper from @callee_owned () -> (@unowned Swift.UInt8) to @callee_owned () -> (@out Swift.UInt8)
sil shared [transparent] @_TTRXFo__dVSs5UInt8_XFo__iS__ : $@thin (@out UInt8, @owned @callee_owned () -> UInt8) -> () {
bb0(%0 : $*UInt8, %1 : $@callee_owned () -> UInt8):
  %2 = apply %1() : $@callee_owned () -> UInt8    // user: %3
  store %2 to %0 : $*UInt8                        // id: %3
  %4 = tuple ()                                   // user: %5
  return %4 : $()                                 // id: %5
}



