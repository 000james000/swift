// RUN: %sil-opt -arc-opts %s | FileCheck %s

sil_stage canonical

import Builtin

/////////////////
// Basic Tests //
/////////////////

// CHECK-LABEL: sil @simple_retain_release_pair : $@thin (Builtin.ObjectPointer) -> ()
// CHECK: bb0
// CHECK-NEXT: tuple ()
// CHECK-NEXT: return
sil @simple_retain_release_pair : $@thin (Builtin.ObjectPointer) -> () {
bb0(%0 : $Builtin.ObjectPointer):
  strong_retain %0 : $Builtin.ObjectPointer
  strong_release %0 : $Builtin.ObjectPointer
  %1 = tuple ()
  return %1 : $()
}

struct S {
  var x : Builtin.ObjectPointer
}

// CHECK-LABEL: sil @simple_copyvalue_destroyvalue_pair : $@thin (S) -> S
// CHECK: bb0({{%[0-9]+}} : $S)
// CHECK-NEXT: return
sil @simple_copyvalue_destroyvalue_pair : $@thin (S) -> S {
bb0(%0 : $S):
  %1 = copy_value %0 : $S
  destroy_value %1 : $S
  %2 = copy_value %0 : $S
  destroy_value %0 : $S
  %3 = copy_value %1 : $S
  destroy_value %0 : $S
  return %2 : $S
}

// CHECK-LABEL: sil @delete_retain_over_non_side_effect_instructions : $@thin (Builtin.ObjectPointer, Builtin.Int64) -> Builtin.Int1
// CHECK: bb0
// CHECK-NEXT: builtin_function_ref
// CHECK-NEXT: apply
// CHECK-NEXT: return
sil @delete_retain_over_non_side_effect_instructions : $@thin (Builtin.ObjectPointer, Builtin.Int64) -> (Builtin.Int1) {
bb0(%0 : $Builtin.ObjectPointer, %1 : $Builtin.Int64):
  strong_retain %0 : $Builtin.ObjectPointer
  %2 = builtin_function_ref "cmp_eq_Int64" : $@thin (Builtin.Int64, Builtin.Int64) -> Builtin.Int1
  %3 = apply %2(%1, %1) : $@thin (Builtin.Int64, Builtin.Int64) -> Builtin.Int1
  strong_release %0 : $Builtin.ObjectPointer
  return %3 : $Builtin.Int1
}

// CHECK-LABEL: sil @delete_copyvalue_over_non_side_effect_instructions : $@thin (S, Builtin.Int64) -> Builtin.Int1
// CHECK: bb0
// CHECK-NEXT: builtin_function_ref
// CHECK-NEXT: apply
// CHECK-NEXT: return
sil @delete_copyvalue_over_non_side_effect_instructions : $@thin (S, Builtin.Int64) -> (Builtin.Int1) {
bb0(%0 : $S, %1 : $Builtin.Int64):
  copy_value %0 : $S
  %2 = builtin_function_ref "cmp_eq_Int64" : $@thin (Builtin.Int64, Builtin.Int64) -> Builtin.Int1
  %3 = apply %2(%1, %1) : $@thin (Builtin.Int64, Builtin.Int64) -> Builtin.Int1
  destroy_value %0 : $S
  return %3 : $Builtin.Int1
}

// CHECK-LABEL: sil @delete_retain_over_single_potential_decrement : $@thin (Builtin.ObjectPointer, Builtin.ObjectPointer) -> ()
// CHECK: bb0
// CHECK-NEXT: strong_release
// CHECK-NEXT: tuple ()
// CHECK-NEXT: return
sil @delete_retain_over_single_potential_decrement : $@thin (Builtin.ObjectPointer, Builtin.ObjectPointer) -> () {
bb0(%0 : $Builtin.ObjectPointer, %1 : $Builtin.ObjectPointer):
  strong_retain %0 : $Builtin.ObjectPointer
  strong_release %1 : $Builtin.ObjectPointer
  strong_release %0 : $Builtin.ObjectPointer
  %2 = tuple()
  return %2 : $()
}

// CHECK-LABEL: sil @delete_copyvalue_over_single_potential_decrement : $@thin (S, Builtin.ObjectPointer) -> ()
// CHECK: bb0
// CHECK-NEXT: strong_release
// CHECK-NEXT: tuple ()
// CHECK-NEXT: return
sil @delete_copyvalue_over_single_potential_decrement : $@thin (S, Builtin.ObjectPointer) -> () {
bb0(%0 : $S, %1 : $Builtin.ObjectPointer):
  copy_value %0 : $S
  strong_release %1 : $Builtin.ObjectPointer
  destroy_value %0 : $S
  %2 = tuple()
  return %2 : $()
}

sil @user : $@thin (Builtin.ObjectPointer) -> ()

// CHECK-LABEL: sil @dont_delete_retain_over_decrement_use : $@thin (Builtin.ObjectPointer) -> ()
// CHECK: bb0
// CHECK: strong_retain
// CHECK-NEXT: apply
// CHECK-NEXT: apply
// CHECK-NEXT: strong_release
// CHECK-NEXT: tuple ()
// CHECK-NEXT: return
sil @dont_delete_retain_over_decrement_use : $@thin (Builtin.ObjectPointer) -> () {
bb0(%0 : $Builtin.ObjectPointer):
  %1 = function_ref @user : $@thin (Builtin.ObjectPointer) -> ()
  strong_retain %0 : $Builtin.ObjectPointer
  apply %1 (%0) : $@thin (Builtin.ObjectPointer) -> ()
  apply %1 (%0) : $@thin (Builtin.ObjectPointer) -> ()
  strong_release %0 : $Builtin.ObjectPointer
  %2 = tuple()
  return %2 : $()
}

sil @S_user : $@thin (S) -> ()

// CHECK-LABEL: sil @dont_delete_copyvalue_over_decrement_use : $@thin (S) -> ()
// CHECK: bb0
// CHECK: copy_value
// CHECK-NEXT: apply
// CHECK-NEXT: apply
// CHECK-NEXT: destroy_value
// CHECK-NEXT: tuple ()
// CHECK-NEXT: return
sil @dont_delete_copyvalue_over_decrement_use : $@thin (S) -> () {
bb0(%0 : $S):
  %1 = function_ref @S_user : $@thin (S) -> ()
  copy_value %0 : $S
  apply %1 (%0) : $@thin (S) -> ()
  apply %1 (%0) : $@thin (S) -> ()
  destroy_value %0 : $S
  %2 = tuple()
  return %2 : $()
}

// CHECK-LABEL: sil @move_delete_retain_over_decrement_use_when_knownsafe : $@thin (Builtin.ObjectPointer) -> ()
// CHECK: bb0
// CHECK: strong_retain
// CHECK-NEXT: integer_literal
// CHECK-NEXT: integer_literal
// CHECK-NEXT: apply
// CHECK-NEXT: apply
// CHECK-NEXT: strong_release
// CHECK-NEXT: tuple ()
// CHECK-NEXT: return
sil @move_delete_retain_over_decrement_use_when_knownsafe : $@thin (Builtin.ObjectPointer) -> () {
bb0(%0 : $Builtin.ObjectPointer):
  %1 = function_ref @user : $@thin (Builtin.ObjectPointer) -> ()
  strong_retain %0 : $Builtin.ObjectPointer
  %2 = integer_literal $Builtin.Int32, 1
  %3 = integer_literal $Builtin.Int32, 2
  strong_retain %0 : $Builtin.ObjectPointer
  apply %1 (%0) : $@thin (Builtin.ObjectPointer) -> ()
  apply %1 (%0) : $@thin (Builtin.ObjectPointer) -> ()
  strong_release %0 : $Builtin.ObjectPointer
  strong_release %0 : $Builtin.ObjectPointer
  %4 = tuple()
  return %4 : $()
}

// CHECK-LABEL: sil @delete_copyvalue_over_decrement_use_when_knownsafe : $@thin (S) -> ()
// CHECK: bb0
// CHECK: copy_value
// CHECK-NEXT: integer_literal
// CHECK-NEXT: integer_literal
// CHECK-NEXT: apply
// CHECK-NEXT: apply
// CHECK-NEXT: destroy_value
// CHECK-NEXT: tuple ()
// CHECK-NEXT: return
sil @delete_copyvalue_over_decrement_use_when_knownsafe : $@thin (S) -> () {
bb0(%0 : $S):
  %1 = function_ref @S_user : $@thin (S) -> ()
  copy_value %0 : $S
  %2 = integer_literal $Builtin.Int32, 1
  %3 = integer_literal $Builtin.Int32, 2
  copy_value %0 : $S
  apply %1 (%0) : $@thin (S) -> ()
  apply %1 (%0) : $@thin (S) -> ()
  destroy_value %0 : $S
  destroy_value %0 : $S
  %4 = tuple()
  return %4 : $()
}
