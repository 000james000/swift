// RUN: %sil-opt %s -inlinecaches | FileCheck %s
sil_stage canonical

import Builtin
import Swift

@objc class X {
  @objc func ping()
}

sil @_TFC4main1X4pingfS0_FT_T_ : $@cc(method) @thin (@owned X) -> () {
bb0(%0 : $X):
  debug_value %0 : $X  // let self                // id: %1
  strong_release %0 : $X                          // id: %2
  %3 = tuple ()                                   // user: %4
  return %3 : $()                                 // id: %4
}

sil @_TFC4main1XcfMS0_FT_S0_ : $@cc(method) @thin (@owned X) -> @owned X {
bb0(%0 : $X):
  debug_value %0 : $X  // let self                // id: %1
  return %0 : $X                                  // id: %2
}

// CHECK-LABEL: _TFC4main1X4pingfS0_FT_T_
// CHECK-NOT: checked_cast_br identical
// CHECK: return
sil @_TF4main1fFCS_1XT_ : $@thin (@owned X) -> () {
bb0(%0 : $X):
  debug_value %0 : $X  // let x                   // id: %1
  strong_retain %0 : $X                           // id: %2
  %3 = class_method [volatile] %0 : $X, #X.ping!1.foreign : X -> () -> () , $@cc(objc_method) @thin (X) -> () // user: %4
  %4 = apply %3(%0) : $@cc(objc_method) @thin (X) -> ()
  strong_release %0 : $X                          // id: %5
  strong_release %0 : $X                          // id: %6
  %7 = tuple ()                                   // user: %8
  return %7 : $()                                 // id: %8
}

sil_vtable X {
  #X.ping!1: _TFC4main1X4pingfS0_FT_T_	// main.X.ping (main.X)() -> ()
  #X.init!initializer.1: _TFC4main1XcfMS0_FT_S0_	// main.X.init (main.X.Type)() -> main.X
}



