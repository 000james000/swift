// RUN: %sil-opt -loop-rotate -abcopts -enable-abcopts=1 %s | FileCheck %s
// RUN: %sil-opt -loop-rotate -simplify-cfg -abcopts -dce -enable-abcopts -enable-abc-hoisting %s | FileCheck %s --check-prefix=HOIST

sil_stage canonical

import Builtin
import Swift

struct ArrayIntBuffer {
  var storage : Builtin.NativeObject
}

struct ArrayInt{
  var buffer : ArrayIntBuffer
}

struct UnsafeMutablePointerInt {
  var _rawValue : Builtin.RawPointer
}

// CHECK-LABEL: sil @abcopt_singleblock
sil @abcopt_singleblock : $@thin(@inout ArrayInt, @inout ArrayInt) -> () {
bb0(%0 : $*ArrayInt, %1 : $*ArrayInt):
  // CHECK: [[CHECKBOUNDS:%[0-9]+]] = function_ref @checkbounds
  // CHECK: [[LD1:%[0-9]+]] = load %0

  %2 = function_ref @checkbounds : $@cc(method) @thin (Int, @owned ArrayInt) -> ()
  %3 = load %0 : $*ArrayInt
  %4 = struct_extract %3 : $ArrayInt, #ArrayInt.buffer
  %5 = struct_extract %4 : $ArrayIntBuffer, #ArrayIntBuffer.storage
  retain_value %5 : $Builtin.NativeObject

  // First check.
  %6 = integer_literal $Builtin.Word, 0
  %7 = struct $Int(%6 : $Builtin.Word)
  %8 = apply %2(%7, %3) : $@cc(method) @thin (Int, @owned ArrayInt) -> ()
  // CHECK: [[IDX1:%[0-9]+]] = struct $Int
  // CHECK: apply [[CHECKBOUNDS]]([[IDX1]]

  // Redundant same index and array.
  retain_value %5 : $Builtin.NativeObject
  %9 = apply %2(%7, %3) : $@cc(method) @thin (Int, @owned ArrayInt) -> ()
  // CHECK-NOT: apply [[CHECKBOUNDS]]([[IDX1]]

  // Redundant same index and array and retain the array directly instead of
  // through the array buffer storage.
  retain_value %3 : $ArrayInt
  %r9 = apply %2(%7, %3) : $@cc(method) @thin (Int, @owned ArrayInt) -> ()
  // CHECK-NOT: apply [[CHECKBOUNDS]]([[IDX1]]


  // Not redundant - different index.
  %10 = integer_literal $Builtin.Word, 1
  %11 = struct $Int(%10 : $Builtin.Word)
  retain_value %5 : $Builtin.NativeObject
  %12 = apply %2(%11, %3) : $@cc(method) @thin (Int, @owned ArrayInt) -> ()
  // CHECK: [[IDX2:%[0-9]+]] = struct $Int
  // CHECK: apply [[CHECKBOUNDS]]([[IDX2]]

  // Not redundant - different array.
  %13 = load %1 : $*ArrayInt
  %14 = struct_extract %13 : $ArrayInt, #ArrayInt.buffer
  %15 = struct_extract %14 : $ArrayIntBuffer, #ArrayIntBuffer.storage
  retain_value %15 : $Builtin.NativeObject
  %16 = apply %2(%7, %13) : $@cc(method) @thin (Int, @owned ArrayInt) -> ()
  // CHECK: [[LD2:%[0-9]+]] = load %1
  // CHECK: apply [[CHECKBOUNDS]]([[IDX1]], [[LD2]]

  // Not redundant same index and array but append in between.
  %17 = function_ref @append : $@cc(method) @thin (@in Int, @inout ArrayInt) -> ()
  %18 = alloc_stack $Int
  %19 = apply %17(%18#1, %0) : $@cc(method) @thin (@in Int, @inout ArrayInt) -> ()
  retain_value %5 : $Builtin.NativeObject
  %20 = apply %2(%7, %3) : $@cc(method) @thin (Int, @owned ArrayInt) -> ()
  // CHECK: apply [[CHECKBOUNDS]]([[IDX1]], [[LD1]]

  // Not redundant same index and array but unknown function in between.
  retain_value %5 : $Builtin.NativeObject
  %21 = apply %2(%7, %3) : $@cc(method) @thin (Int, @owned ArrayInt) -> ()
  %22 = function_ref @unknown_func : $@thin() -> ()
  %23 = apply %22() : $@thin() -> ()
  retain_value %5 : $Builtin.NativeObject
  %24 = apply %2(%7, %3) : $@cc(method) @thin (Int, @owned ArrayInt) -> ()
  // CHECK: apply [[CHECKBOUNDS]]([[IDX1]], [[LD1]]
  // CHECK: [[UNKNOWN:%[0-9]+]] = function_ref @unknown_func
  // CHECK: apply [[UNKNOWN]]()
  // CHECK: apply [[CHECKBOUNDS]]([[IDX1]], [[LD1]]

  // Not redundant same index and array but odd store in between.
  retain_value %5 : $Builtin.NativeObject
  %25 = apply %2(%7, %3) : $@cc(method) @thin (Int, @owned ArrayInt) -> ()
  %26 = ref_to_raw_pointer %5 : $Builtin.NativeObject to $Builtin.RawPointer
  %27 = pointer_to_address %26 : $Builtin.RawPointer to $*Builtin.Word
  %29 = store %6 to %27 : $*Builtin.Word
  retain_value %5 : $Builtin.NativeObject
  %30 = apply %2(%7, %3) : $@cc(method) @thin (Int, @owned ArrayInt) -> ()
  // CHECK: store
  // CHECK: apply [[CHECKBOUNDS]]([[IDX1]], [[LD1]]


  %99 = dealloc_stack %18#0 : $*@local_storage Int
  %100 = tuple ()
  return %100 : $()
// CHECK: return
}

// CHECK-LABEL: sil @not_dominating
sil @not_dominating : $@thin (Int, @inout ArrayInt, @inout ArrayInt) -> Int {
bb0(%0 : $Int, %24 : $*ArrayInt, %25 : $*ArrayInt):
  %1 = struct_extract %0 : $Int, #Int.value
  %2 = integer_literal $Builtin.Word, 0
  br bb1(%1 : $Builtin.Word, %2 : $Builtin.Word)

bb1(%4 : $Builtin.Word, %5 : $Builtin.Word):
  %6 = struct $Int (%5 : $Builtin.Word)
  %7 = builtin_function_ref "cmp_eq_Word" : $@thin (Builtin.Word, Builtin.Word) -> Builtin.Int1
  %8 = apply %7(%5, %1) : $@thin (Builtin.Word, Builtin.Word) -> Builtin.Int1
  cond_br %8, bb3, bb4
  // CHECK: struct $Int

bb4:
  %36 = integer_literal $Builtin.Word, 0
  %37 = struct $Int(%36 : $Builtin.Word)
  cond_br %8, bb5, bb6
  // CHECK: [[IDX1:%[0-9]+]] = struct $Int

bb5:
  %32 = function_ref @checkbounds : $@cc(method) @thin (Int, @owned ArrayInt) -> ()
  %33 = load %24 : $*ArrayInt
  %34 = struct_extract %33 : $ArrayInt, #ArrayInt.buffer
  %35 = struct_extract %34 : $ArrayIntBuffer, #ArrayIntBuffer.storage
  retain_value %35 : $Builtin.NativeObject
  %38 = apply %32(%37, %33) : $@cc(method) @thin (Int, @owned ArrayInt) -> ()
 br bb2
  // CHECK: [[CHECKBOUNDS:%[0-9]+]] = function_ref @checkbounds
  // CHECK: [[LD1:%[0-9]+]] = load {{.*}} : $*ArrayInt
  // CHECK: apply [[CHECKBOUNDS]]([[IDX1]]

bb6:
  // CHECK: [[CHECKBOUNDS2:%[0-9]+]] = function_ref @checkbounds
  // CHECK: [[LD2:%[0-9]+]] = load {{.*}} : $*ArrayInt
  %42 = function_ref @checkbounds : $@cc(method) @thin (Int, @owned ArrayInt) -> ()
  %43 = load %24 : $*ArrayInt
  %44 = struct_extract %43 : $ArrayInt, #ArrayInt.buffer
  %45 = struct_extract %44 : $ArrayIntBuffer, #ArrayIntBuffer.storage
  retain_value %45 : $Builtin.NativeObject
  %48 = apply %42(%37, %43) : $@cc(method) @thin (Int, @owned ArrayInt) -> ()
  // CHECK: apply [[CHECKBOUNDS2]]([[IDX1]]
 br bb2

bb2:
  %10 = integer_literal $Builtin.Word, 1
  %11 = builtin_function_ref "sadd_with_overflow_Word" : $@thin (Builtin.Word, Builtin.Word, Builtin.Int1) -> (Builtin.Word, Builtin.Int1)
  %12 = integer_literal $Builtin.Int1, -1
  %13 = apply %11(%5, %10, %12) : $@thin (Builtin.Word, Builtin.Word, Builtin.Int1) -> (Builtin.Word, Builtin.Int1)
  %14 = tuple_extract %13 : $(Builtin.Word, Builtin.Int1), 0
  %15 = enum $Optional<Int>, #Optional.Some!enumelt.1, %6 : $Int
  %16 = unchecked_enum_data %15 : $Optional<Int>, #Optional.Some!enumelt.1
  %17 = struct_extract %16 : $Int, #Int.value
  %18 = builtin_function_ref "sadd_with_overflow_Word" : $@thin (Builtin.Word, Builtin.Word, Builtin.Int1) -> (Builtin.Word, Builtin.Int1)
  %19 = integer_literal $Builtin.Int1, -1
  %20 = apply %18(%4, %17, %19) : $@thin (Builtin.Word, Builtin.Word, Builtin.Int1) -> (Builtin.Word, Builtin.Int1)
  %21 = tuple_extract %20 : $(Builtin.Word, Builtin.Int1), 0
  br bb1(%21 : $Builtin.Word, %14 : $Builtin.Word)

bb3:
  %23 = struct $Int (%4 : $Builtin.Word)
  return %23 : $Int
}
// CHECK: return

// CHECK-LABEL: sil @dominating
sil @dominating : $@thin (Int, @inout ArrayInt, @inout ArrayInt) -> Int {
bb0(%0 : $Int, %24 : $*ArrayInt, %25 : $*ArrayInt):
  %1 = struct_extract %0 : $Int, #Int.value
  %2 = integer_literal $Builtin.Word, 0
  br bb1(%1 : $Builtin.Word, %2 : $Builtin.Word)

bb1(%4 : $Builtin.Word, %5 : $Builtin.Word):
  %6 = struct $Int (%5 : $Builtin.Word)
  %7 = builtin_function_ref "cmp_eq_Word" : $@thin (Builtin.Word, Builtin.Word) -> Builtin.Int1
  %8 = apply %7(%5, %1) : $@thin (Builtin.Word, Builtin.Word) -> Builtin.Int1
  cond_br %8, bb3, bb4
  // CHECK: struct $Int

bb4:
  %36 = integer_literal $Builtin.Word, 0
  %37 = struct $Int(%36 : $Builtin.Word)
  // CHECK: [[IDX1:%[0-9]+]] = struct $Int
  // CHECK: [[CHECKBOUNDS3:%[0-9]+]] = function_ref @checkbounds
  // CHECK: [[LD3:%[0-9]+]] = load {{.*}} : $*ArrayInt
  %52 = function_ref @checkbounds : $@cc(method) @thin (Int, @owned ArrayInt) -> ()
  %53 = load %24 : $*ArrayInt
  %54 = struct_extract %53 : $ArrayInt, #ArrayInt.buffer
  %55 = struct_extract %54 : $ArrayIntBuffer, #ArrayIntBuffer.storage
  retain_value %55 : $Builtin.NativeObject
  %58 = apply %52(%37, %53) : $@cc(method) @thin (Int, @owned ArrayInt) -> ()
  // CHECK: apply [[CHECKBOUNDS3]]([[IDX1]], [[LD3]]
  cond_br %8, bb5, bb6

bb5:
  // CHECK: [[CHECKBOUNDS:%[0-9]+]] = function_ref @checkbounds
  // CHECK: [[LD1:%[0-9]+]] = load {{.*}} : $*ArrayInt
  %32 = function_ref @checkbounds : $@cc(method) @thin (Int, @owned ArrayInt) -> ()
  %33 = load %24 : $*ArrayInt
  %34 = struct_extract %33 : $ArrayInt, #ArrayInt.buffer
  %35 = struct_extract %34 : $ArrayIntBuffer, #ArrayIntBuffer.storage
  retain_value %35 : $Builtin.NativeObject
  %38 = apply %32(%37, %33) : $@cc(method) @thin (Int, @owned ArrayInt) -> ()
  // CHECK-NOT: apply [[CHECKBOUNDS]]([[IDX1]], [[LD1]]

 br bb2

bb6:
  // CHECK: [[CHECKBOUNDS2:%[0-9]+]] = function_ref @checkbounds
  // CHECK: [[LD2:%[0-9]+]] = load {{.*}} : $*ArrayInt
  %42 = function_ref @checkbounds : $@cc(method) @thin (Int, @owned ArrayInt) -> ()
  %43 = load %24 : $*ArrayInt
  %44 = struct_extract %43 : $ArrayInt, #ArrayInt.buffer
  %45 = struct_extract %44 : $ArrayIntBuffer, #ArrayIntBuffer.storage
  retain_value %45 : $Builtin.NativeObject
  %48 = apply %42(%37, %43) : $@cc(method) @thin (Int, @owned ArrayInt) -> ()
  // CHECK-NOT: apply [[CHECKBOUNDS2]]([[IDX1]], [[LD2]]
 br bb2

bb2:
  %10 = integer_literal $Builtin.Word, 1
  %11 = builtin_function_ref "sadd_with_overflow_Word" : $@thin (Builtin.Word, Builtin.Word, Builtin.Int1) -> (Builtin.Word, Builtin.Int1)
  %12 = integer_literal $Builtin.Int1, -1
  %13 = apply %11(%5, %10, %12) : $@thin (Builtin.Word, Builtin.Word, Builtin.Int1) -> (Builtin.Word, Builtin.Int1)
  %14 = tuple_extract %13 : $(Builtin.Word, Builtin.Int1), 0
  %15 = enum $Optional<Int>, #Optional.Some!enumelt.1, %6 : $Int
  %16 = unchecked_enum_data %15 : $Optional<Int>, #Optional.Some!enumelt.1
  %17 = struct_extract %16 : $Int, #Int.value
  %18 = builtin_function_ref "sadd_with_overflow_Word" : $@thin (Builtin.Word, Builtin.Word, Builtin.Int1) -> (Builtin.Word, Builtin.Int1)
  %19 = integer_literal $Builtin.Int1, -1
  %20 = apply %18(%4, %17, %19) : $@thin (Builtin.Word, Builtin.Word, Builtin.Int1) -> (Builtin.Word, Builtin.Int1)
  %21 = tuple_extract %20 : $(Builtin.Word, Builtin.Int1), 0
  br bb1(%21 : $Builtin.Word, %14 : $Builtin.Word)

bb3:
  %23 = struct $Int (%4 : $Builtin.Word)
  return %23 : $Int
}
// CHECK: return

// CHECK-LABEL: sil @dominating_but_append
sil @dominating_but_append : $@thin (Int, @inout ArrayInt, @inout ArrayInt) -> Int {
bb0(%0 : $Int, %24 : $*ArrayInt, %25 : $*ArrayInt):
  %1 = struct_extract %0 : $Int, #Int.value
  %2 = integer_literal $Builtin.Word, 0
  br bb1(%1 : $Builtin.Word, %2 : $Builtin.Word)

bb1(%4 : $Builtin.Word, %5 : $Builtin.Word):
  %6 = struct $Int (%5 : $Builtin.Word)
  %7 = builtin_function_ref "cmp_eq_Word" : $@thin (Builtin.Word, Builtin.Word) -> Builtin.Int1
  %8 = apply %7(%5, %1) : $@thin (Builtin.Word, Builtin.Word) -> Builtin.Int1
  cond_br %8, bb3, bb4
  // CHECK: struct $Int

bb4:
  %36 = integer_literal $Builtin.Word, 0
  %37 = struct $Int(%36 : $Builtin.Word)
  // CHECK: [[IDX1:%[0-9]+]] = struct $Int
  // CHECK: [[CHECKBOUNDS3:%[0-9]+]] = function_ref @checkbounds
  // CHECK: [[LD3:%[0-9]+]] = load {{.*}} : $*ArrayInt
  %52 = function_ref @checkbounds : $@cc(method) @thin (Int, @owned ArrayInt) -> ()
  %53 = load %24 : $*ArrayInt
  %54 = struct_extract %53 : $ArrayInt, #ArrayInt.buffer
  %55 = struct_extract %54 : $ArrayIntBuffer, #ArrayIntBuffer.storage
  retain_value %55 : $Builtin.NativeObject
  %58 = apply %52(%37, %53) : $@cc(method) @thin (Int, @owned ArrayInt) -> ()
  // CHECK: apply [[CHECKBOUNDS3]]([[IDX1]], [[LD3]]
  cond_br %8, bb5, bb6

bb5:
  // CHECK: [[CHECKBOUNDS:%[0-9]+]] = function_ref @checkbounds
  // CHECK: [[LD1:%[0-9]+]] = load {{.*}} : $*ArrayInt
  %32 = function_ref @checkbounds : $@cc(method) @thin (Int, @owned ArrayInt) -> ()
  %33 = load %24 : $*ArrayInt
  %34 = struct_extract %33 : $ArrayInt, #ArrayInt.buffer
  %35 = struct_extract %34 : $ArrayIntBuffer, #ArrayIntBuffer.storage
  retain_value %35 : $Builtin.NativeObject
  %38 = apply %32(%37, %33) : $@cc(method) @thin (Int, @owned ArrayInt) -> ()
  // CHECK: apply [[CHECKBOUNDS]]([[IDX1]], [[LD1]]
 br bb2

bb6:
  // CHECK: [[CHECKBOUNDS2:%[0-9]+]] = function_ref @checkbounds
  // CHECK: [[LD2:%[0-9]+]] = load {{.*}} : $*ArrayInt
  %42 = function_ref @checkbounds : $@cc(method) @thin (Int, @owned ArrayInt) -> ()
  %43 = load %24 : $*ArrayInt
  %44 = struct_extract %43 : $ArrayInt, #ArrayInt.buffer
  %45 = struct_extract %44 : $ArrayIntBuffer, #ArrayIntBuffer.storage
  retain_value %45 : $Builtin.NativeObject
  %48 = apply %42(%37, %43) : $@cc(method) @thin (Int, @owned ArrayInt) -> ()
  // CHECK: apply [[CHECKBOUNDS2]]([[IDX1]], [[LD2]]
 br bb2

bb2:
  %10 = integer_literal $Builtin.Word, 1
  %11 = builtin_function_ref "sadd_with_overflow_Word" : $@thin (Builtin.Word, Builtin.Word, Builtin.Int1) -> (Builtin.Word, Builtin.Int1)
  %12 = integer_literal $Builtin.Int1, -1
  %13 = apply %11(%5, %10, %12) : $@thin (Builtin.Word, Builtin.Word, Builtin.Int1) -> (Builtin.Word, Builtin.Int1)
  %14 = tuple_extract %13 : $(Builtin.Word, Builtin.Int1), 0
  %15 = enum $Optional<Int>, #Optional.Some!enumelt.1, %6 : $Int
  %16 = unchecked_enum_data %15 : $Optional<Int>, #Optional.Some!enumelt.1
  %17 = struct_extract %16 : $Int, #Int.value
  %18 = builtin_function_ref "sadd_with_overflow_Word" : $@thin (Builtin.Word, Builtin.Word, Builtin.Int1) -> (Builtin.Word, Builtin.Int1)
  %19 = integer_literal $Builtin.Int1, -1
  %20 = apply %18(%4, %17, %19) : $@thin (Builtin.Word, Builtin.Word, Builtin.Int1) -> (Builtin.Word, Builtin.Int1)
  %21 = tuple_extract %20 : $(Builtin.Word, Builtin.Int1), 0
  %117 = function_ref @append : $@cc(method) @thin (@in Int, @inout ArrayInt) -> ()
  %118 = alloc_stack $Int
  %119 = apply %117(%118#1, %24) : $@cc(method) @thin (@in Int, @inout ArrayInt) -> ()
  retain_value %55 : $Builtin.NativeObject
  %120 = apply %52(%37, %53) : $@cc(method) @thin (Int, @owned ArrayInt) -> ()
  dealloc_stack %118#0 : $*@local_storage Int
  // CHECK: [[APPEND:%[0-9]+]] = function_ref @append
  // CHECK: apply [[APPEND]]
  // CHECK: apply [[CHECKBOUNDS3]]

  br bb1(%21 : $Builtin.Word, %14 : $Builtin.Word)

bb3:
  %23 = struct $Int (%4 : $Builtin.Word)
  return %23 : $Int
}
// CHECK: return

// HOIST-LABEL: sil @hoist
// HOIST: bb0
// HOIST: [[END:%[0-9]+]] = struct_extract %0 : $Int, #Int.value
// HOIST: [[ZERO:%[0-9]+]] = integer_literal $Builtin.Word, 0
// HOIST: cond_br

// HOIST: bb1
// Check overflow.
// HOIST: [[CB1:%[0-9]+]] = function_ref @checkbounds
// HOIST:  [[SGE:%[0-9]+]] = builtin_function_ref "cmp_sge_Word"
// HOIST:  [[SGE1:%[0-9]+]] = apply [[SGE]]([[ZERO]], [[END]])
// HOIST:  cond_fail [[SGE1]]

// Check start.
// HOIST: [[S1:%[0-9]+]] = struct $Int ([[ZERO]] : $Builtin.Word)
// HOIST: [[L1:%[0-9]+]] = load %1 : $*ArrayInt
// HOIST: retain_value [[L1]]
// HOIST: apply [[CB1]]([[S1]], [[L1]])

// Check end.
// HOIST: [[SUB:%[0-9]+]] = builtin_function_ref "ssub_with_overflow_Word"
// HOIST: [[ONE:%[0-9]+]] = integer_literal $Builtin.Word, 1
// HOIST: [[SUB1:%[0-9]+]] = apply [[SUB]]([[END]], [[ONE]]
// HOIST: [[SUB2:%[0-9]+]] = tuple_extract [[SUB1]]
// HOIST: [[SUB3:%[0-9]+]] = struct $Int ([[SUB2]]
// HOIST: [[L2:%[0-9]+]] = load %1
// HOIST: retain_value [[L2]]
// HOIST: apply [[CB1]]([[SUB3]], [[L2]])
// HOIST: br bb2

// HOIST: bb2
// HOIST-NOT: cond_fail
// HOIST-NOT: @checkbounds
// HOIST: apply
// HOIST: apply
// HOIST-NOT: apply
// HOIST: cond_br {{.*}}, {{.*}}, bb2
// HOIST: return

sil @hoist : $@thin (Int, @inout ArrayInt) -> Int {
bb0(%0 : $Int, %24 : $*ArrayInt):
  %1 = struct_extract %0 : $Int, #Int.value
  %2 = integer_literal $Builtin.Word, 0
  br bb1(%2 : $Builtin.Word)

bb1(%4 : $Builtin.Word):
  %7 = builtin_function_ref "cmp_eq_Word" : $@thin (Builtin.Word, Builtin.Word) -> Builtin.Int1
  %8 = apply %7(%4, %1) : $@thin (Builtin.Word, Builtin.Word) -> Builtin.Int1
  cond_br %8, bb3, bb4

bb4:
  %37 = struct $Int(%4 : $Builtin.Word)
  %52 = function_ref @checkbounds : $@cc(method) @thin (Int, @owned ArrayInt) -> ()
  %53 = load %24 : $*ArrayInt
  %54 = struct_extract %53 : $ArrayInt, #ArrayInt.buffer
  %55 = struct_extract %54 : $ArrayIntBuffer, #ArrayIntBuffer.storage
  retain_value %55 : $Builtin.NativeObject
  %58 = apply %52(%37, %53) : $@cc(method) @thin (Int, @owned ArrayInt) -> ()
  %10 = integer_literal $Builtin.Word, 1
  %18 = builtin_function_ref "sadd_with_overflow_Word" : $@thin (Builtin.Word, Builtin.Word, Builtin.Int1) -> (Builtin.Word, Builtin.Int1)
  %19 = integer_literal $Builtin.Int1, -1
  %20 = apply %18(%4, %10, %19) : $@thin (Builtin.Word, Builtin.Word, Builtin.Int1) -> (Builtin.Word, Builtin.Int1)
  %21 = tuple_extract %20 : $(Builtin.Word, Builtin.Int1), 0
  %22 = tuple_extract %20 : $(Builtin.Word, Builtin.Int1), 1
  cond_fail %22 : $Builtin.Int1
  br bb1(%21 : $Builtin.Word)

bb3:
  %23 = struct $Int (%4 : $Builtin.Word)
  return %23 : $Int
}

// HOIST-LABEL: sil @hoistinvariant

// Preheader.
// HOIST: bb1:
// HOIST: [[SGE:%[0-9]+]] = builtin_function_ref "cmp_sge_Word"
// HOIST: [[SGE1:%[0-9]+]] = apply [[SGE]]
// HOIST: cond_fail [[SGE1]]
// HOIST:  load %1 : $*ArrayInt
// HOIST:  retain_value
// HOIST:  [[CB:%[0-9]+]] = function_ref @checkbounds
// HOIST:  apply [[CB]]
// HOIST:  br bb2

// Loop.
// HOIST:  bb2{{.*}}:
// HOIST-NOT: cond_fail
// HOIST-NOT: @checkbounds
// HOIST: apply
// HOIST: apply
// HOIST-NOT: apply
// HOIST:  cond_br {{.*}}, bb3{{.*}}, bb2{{.*}}
// HOIST: return

sil @hoistinvariant : $@thin (Int, @inout ArrayInt) -> Int {
bb0(%0 : $Int, %24 : $*ArrayInt):
  %1 = struct_extract %0 : $Int, #Int.value
  %2 = integer_literal $Builtin.Word, 0
  %37 = struct $Int(%2 : $Builtin.Word)
  br bb1(%2 : $Builtin.Word)

bb1(%4 : $Builtin.Word):
  %7 = builtin_function_ref "cmp_eq_Word" : $@thin (Builtin.Word, Builtin.Word) -> Builtin.Int1
  %8 = apply %7(%4, %1) : $@thin (Builtin.Word, Builtin.Word) -> Builtin.Int1
  cond_br %8, bb3, bb4

bb4:
  %52 = function_ref @checkbounds : $@cc(method) @thin (Int, @owned ArrayInt) -> ()
  %53 = load %24 : $*ArrayInt
  %54 = struct_extract %53 : $ArrayInt, #ArrayInt.buffer
  %55 = struct_extract %54 : $ArrayIntBuffer, #ArrayIntBuffer.storage
  retain_value %55 : $Builtin.NativeObject
  %58 = apply %52(%37, %53) : $@cc(method) @thin (Int, @owned ArrayInt) -> ()
  %10 = integer_literal $Builtin.Word, 1
  %18 = builtin_function_ref "sadd_with_overflow_Word" : $@thin (Builtin.Word, Builtin.Word, Builtin.Int1) -> (Builtin.Word, Builtin.Int1)
  %19 = integer_literal $Builtin.Int1, -1
  %20 = apply %18(%4, %10, %19) : $@thin (Builtin.Word, Builtin.Word, Builtin.Int1) -> (Builtin.Word, Builtin.Int1)
  %21 = tuple_extract %20 : $(Builtin.Word, Builtin.Int1), 0
  %22 = tuple_extract %20 : $(Builtin.Word, Builtin.Int1), 1
  cond_fail %22 : $Builtin.Int1
  br bb1(%21 : $Builtin.Word)

bb3:
  %23 = struct $Int (%4 : $Builtin.Word)
  return %23 : $Int
}

// HOIST-LABEL: sil @hoist_rangechecked
// HOIST: bb0
// HOIST:  cond_br {{.*}}, bb3{{.*}}, bb1
// HOIST: bb1:
// HOIST:   [[CB:%[0-9]+]] = function_ref @checkbounds
// HOIST:    apply [[CB]]
// HOIST:   br bb2{{.*}}
// HOIST: bb2{{.*}}:
// HOIST-NOT: function_ref @checkbounds
// HOIST-NOT:    apply [[CB]]
// HOIST:   cond_br {{.*}}, bb3{{.*}}, bb2{{.*}}
// HOIST: bb3{{.*}}:
// HOIST:  return

sil @hoist_rangechecked : $@thin (Int, @inout ArrayInt) -> Int {
bb0(%0 : $Int, %24 : $*ArrayInt):
  %1 = struct_extract %0 : $Int, #Int.value
  %2 = integer_literal $Builtin.Word, 0
  %3 = integer_literal $Builtin.Int1, -1
  %60 = builtin_function_ref "cmp_sle_Word" : $@thin (Builtin.Word, Builtin.Word) -> Builtin.Int1
  %61 = apply %60(%2, %1) : $@thin (Builtin.Word, Builtin.Word) -> Builtin.Int1
  %62 = builtin_function_ref "xor_Int1" : $@thin (Builtin.Int1, Builtin.Int1) -> Builtin.Int1
  %14 = apply %62(%61, %3) : $@thin (Builtin.Int1, Builtin.Int1) -> Builtin.Int1
  cond_fail %14 : $Builtin.Int1
  br bb1(%2 : $Builtin.Word)

bb1(%4 : $Builtin.Word):
  %7 = builtin_function_ref "cmp_eq_Word" : $@thin (Builtin.Word, Builtin.Word) -> Builtin.Int1
  %8 = apply %7(%4, %1) : $@thin (Builtin.Word, Builtin.Word) -> Builtin.Int1
  cond_br %8, bb3, bb4

bb4:
  %37 = struct $Int(%4 : $Builtin.Word)
  %52 = function_ref @checkbounds : $@cc(method) @thin (Int, @owned ArrayInt) -> ()
  %53 = load %24 : $*ArrayInt
  %54 = struct_extract %53 : $ArrayInt, #ArrayInt.buffer
  %55 = struct_extract %54 : $ArrayIntBuffer, #ArrayIntBuffer.storage
  retain_value %55 : $Builtin.NativeObject
  %58 = apply %52(%37, %53) : $@cc(method) @thin (Int, @owned ArrayInt) -> ()
  %10 = integer_literal $Builtin.Word, 1
  %18 = builtin_function_ref "sadd_with_overflow_Word" : $@thin (Builtin.Word, Builtin.Word, Builtin.Int1) -> (Builtin.Word, Builtin.Int1)
  %19 = integer_literal $Builtin.Int1, -1
  %20 = apply %18(%4, %10, %19) : $@thin (Builtin.Word, Builtin.Word, Builtin.Int1) -> (Builtin.Word, Builtin.Int1)
  %21 = tuple_extract %20 : $(Builtin.Word, Builtin.Int1), 0

  %40 = function_ref @getElementAddr : $@cc(method) @thin (Int, @owned ArrayInt) -> UnsafeMutablePointerInt
  retain_value %55 : $Builtin.NativeObject
  %42 = apply %40(%37, %53) : $@cc(method) @thin (Int, @owned ArrayInt) -> UnsafeMutablePointerInt
  %43 = struct_extract %42 : $UnsafeMutablePointerInt, #UnsafeMutablePointerInt._rawValue
  %44 = pointer_to_address %43 : $Builtin.RawPointer to $*Int // user: %45
  store %0 to %44 : $*Int
  br bb1(%21 : $Builtin.Word)

bb3:
  %23 = struct $Int (%4 : $Builtin.Word)
  return %23 : $Int
}

// HOIST-LABEL: hoist_inclusive_rangechecked
// HOIST: bb0
// HOIST:  cond_br {{.*}}, bb3{{.*}}, bb1
// HOIST: bb1:
// HOIST:   [[CB:%[0-9]+]] = function_ref @checkbounds
// HOIST:    apply [[CB]]
// HOIST:   br bb2{{.*}}
// HOIST: bb2{{.*}}:
// HOIST-NOT: function_ref @checkbounds
// HOIST-NOT:    apply [[CB]]
// HOIST:   cond_br {{.*}}, bb3{{.*}}, bb2{{.*}}
// HOIST: bb3{{.*}}:
// HOIST: return
sil @hoist_inclusive_rangechecked : $@thin (Int, @inout ArrayInt) -> Int {
bb0(%0 : $Int, %24 : $*ArrayInt):
  %1 = struct_extract %0 : $Int, #Int.value
  %2 = integer_literal $Builtin.Word, 0
  %3 = integer_literal $Builtin.Int1, -1
  %60 = builtin_function_ref "cmp_sle_Word" : $@thin (Builtin.Word, Builtin.Word) -> Builtin.Int1
  %61 = apply %60(%2, %1) : $@thin (Builtin.Word, Builtin.Word) -> Builtin.Int1
  %62 = builtin_function_ref "xor_Int1" : $@thin (Builtin.Int1, Builtin.Int1) -> Builtin.Int1
  %14 = apply %62(%61, %3) : $@thin (Builtin.Int1, Builtin.Int1) -> Builtin.Int1
  cond_fail %14 : $Builtin.Int1
  %63 = integer_literal $Builtin.Word, 1
  %64 = builtin_function_ref "sadd_with_overflow_Word" : $@thin (Builtin.Word, Builtin.Word, Builtin.Int1) -> (Builtin.Word, Builtin.Int1)
  %65 = integer_literal $Builtin.Int1, 0
  %66 = apply %64(%1, %63, %65) : $@thin (Builtin.Word, Builtin.Word, Builtin.Int1) -> (Builtin.Word, Builtin.Int1)
  %67 = tuple_extract %66 : $(Builtin.Word, Builtin.Int1), 0
  %68 = builtin_function_ref "cmp_sgt_Word" : $@thin (Builtin.Word, Builtin.Word) -> Builtin.Int1
  %69 = apply %68(%67, %1) : $@thin (Builtin.Word, Builtin.Word) -> Builtin.Int1
  %70 = apply %62(%69, %3) : $@thin (Builtin.Int1, Builtin.Int1) -> Builtin.Int1
  cond_fail %70 : $Builtin.Int1
  br bb1(%2 : $Builtin.Word)

bb1(%4 : $Builtin.Word):
  %7 = builtin_function_ref "cmp_eq_Word" : $@thin (Builtin.Word, Builtin.Word) -> Builtin.Int1
  %8 = apply %7(%4, %67) : $@thin (Builtin.Word, Builtin.Word) -> Builtin.Int1
  cond_br %8, bb3, bb4

bb4:
  %37 = struct $Int(%4 : $Builtin.Word)
  %52 = function_ref @checkbounds : $@cc(method) @thin (Int, @owned ArrayInt) -> ()
  %53 = load %24 : $*ArrayInt
  %54 = struct_extract %53 : $ArrayInt, #ArrayInt.buffer
  %55 = struct_extract %54 : $ArrayIntBuffer, #ArrayIntBuffer.storage
  retain_value %55 : $Builtin.NativeObject
  %58 = apply %52(%37, %53) : $@cc(method) @thin (Int, @owned ArrayInt) -> ()
  %10 = integer_literal $Builtin.Word, 1
  %18 = builtin_function_ref "sadd_with_overflow_Word" : $@thin (Builtin.Word, Builtin.Word, Builtin.Int1) -> (Builtin.Word, Builtin.Int1)
  %19 = integer_literal $Builtin.Int1, -1
  %20 = apply %18(%4, %10, %19) : $@thin (Builtin.Word, Builtin.Word, Builtin.Int1) -> (Builtin.Word, Builtin.Int1)
  %21 = tuple_extract %20 : $(Builtin.Word, Builtin.Int1), 0
  br bb1(%21 : $Builtin.Word)

bb3:
  %23 = struct $Int (%4 : $Builtin.Word)
  return %23 : $Int
}

/// Don't hoist arrays that are variant.
// HOIST-LABEL: dont_hoist_variant_array
// HOIST: bb0
// HOIST:  cond_br {{.*}}, bb3{{.*}}, bb1
// HOIST: bb1:
// HOIST-NOT:   function_ref @checkbounds
// HOIST:   br bb2{{.*}}
// HOIST: bb2{{.*}}:
// HOIST:   [[CB:%[0-9]+]] = function_ref @checkbounds
// HOIST:  apply [[CB]]
// HOIST:  cond_br {{.*}}, bb3{{.*}}, bb2{{.*}}
// HOIST: bb3{{.*}}:
// HOIST: return

sil @dont_hoist_variant_array: $@thin (Int, @inout ArrayInt) -> Int {
bb0(%0 : $Int, %24 : $*ArrayInt):
  %1 = struct_extract %0 : $Int, #Int.value
  %2 = integer_literal $Builtin.Word, 0
  %3 = integer_literal $Builtin.Int1, -1
  %60 = builtin_function_ref "cmp_sle_Word" : $@thin (Builtin.Word, Builtin.Word) -> Builtin.Int1
  %61 = apply %60(%2, %1) : $@thin (Builtin.Word, Builtin.Word) -> Builtin.Int1
  %62 = builtin_function_ref "xor_Int1" : $@thin (Builtin.Int1, Builtin.Int1) -> Builtin.Int1
  %14 = apply %62(%61, %3) : $@thin (Builtin.Int1, Builtin.Int1) -> Builtin.Int1
  cond_fail %14 : $Builtin.Int1
  br bb1(%2 : $Builtin.Word)

bb1(%4 : $Builtin.Word):
  %7 = builtin_function_ref "cmp_eq_Word" : $@thin (Builtin.Word, Builtin.Word) -> Builtin.Int1
  %8 = apply %7(%4, %1) : $@thin (Builtin.Word, Builtin.Word) -> Builtin.Int1
  cond_br %8, bb3, bb4

bb4:
  %36 = alloc_stack $ArrayInt
  %37 = struct $Int(%4 : $Builtin.Word)
  %52 = function_ref @checkbounds : $@cc(method) @thin (Int, @owned ArrayInt) -> ()
  %53 = load %36#1 : $*ArrayInt
  %54 = struct_extract %53 : $ArrayInt, #ArrayInt.buffer
  %55 = struct_extract %54 : $ArrayIntBuffer, #ArrayIntBuffer.storage
  retain_value %55 : $Builtin.NativeObject
  %58 = apply %52(%37, %53) : $@cc(method) @thin (Int, @owned ArrayInt) -> ()
  %10 = integer_literal $Builtin.Word, 1
  %18 = builtin_function_ref "sadd_with_overflow_Word" : $@thin (Builtin.Word, Builtin.Word, Builtin.Int1) -> (Builtin.Word, Builtin.Int1)
  %19 = integer_literal $Builtin.Int1, -1
  %20 = apply %18(%4, %10, %19) : $@thin (Builtin.Word, Builtin.Word, Builtin.Int1) -> (Builtin.Word, Builtin.Int1)
  %21 = tuple_extract %20 : $(Builtin.Word, Builtin.Int1), 0
  dealloc_stack %36 :  $*@local_storage ArrayInt
  br bb1(%21 : $Builtin.Word)

bb3:
  %23 = struct $Int (%4 : $Builtin.Word)
  return %23 : $Int
}
sil public_external [semantics "array.check_subscript"] @checkbounds : $@cc(method) @thin (Int, @owned ArrayInt) -> () {
  bb0(%0: $Int, %1: $ArrayInt):
    unreachable
}

sil public_external [semantics "array.mutate_unknown"] @append : $@cc(method) @thin (@in Int, @inout ArrayInt) -> () {
  bb0(%0: $*Int, %1: $*ArrayInt):
    unreachable
}

sil public_external [semantics "array.set_element"] @set : $@cc(method) @thin (Int, @in Int, @inout ArrayInt) -> () {
  bb0(%0: $Int, %1: $*Int, %2: $*ArrayInt):
    unreachable
}

sil public_external [semantics "array.get_element_address"] @getElementAddr : $@cc(method) @thin (Int, @owned ArrayInt) -> UnsafeMutablePointerInt {
  bb0(%0: $Int, %1: $ArrayInt):
    unreachable
}

sil @unknown_func : $@thin () -> () {
  bb0:
  unreachable
}
