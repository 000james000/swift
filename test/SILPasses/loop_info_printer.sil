// RUN: %sil-opt %s -loop-info-printer 2>&1 | FileCheck %s
// REQUIRES: asserts

import Builtin
import Swift

sil_stage canonical

// CHECK-LABEL: Loops in  simple_loop_with_enum
// CHECK: Loop at depth 1 containing: bb1<header>,bb3,bb2,bb4<exiting>,bb5<latch>

sil @simple_loop_with_enum : $@thin () -> () {
bb0:
  %0 = integer_literal $Builtin.Word, 0
  %1 = integer_literal $Builtin.Word, 1000
  br bb1(%0 : $Builtin.Word)

bb1(%3 : $Builtin.Word):
  %4 = struct $Int (%3 : $Builtin.Word)
  %5 = builtin_function_ref "cmp_eq_Word" : $@thin (Builtin.Word, Builtin.Word) -> Builtin.Int1
  %6 = apply %5(%3, %1) : $@thin (Builtin.Word, Builtin.Word) -> Builtin.Int1
  cond_br %6, bb2, bb3

bb2:
  %8 = enum $Optional<Int>, #Optional.None!enumelt
  br bb4(%3 : $Builtin.Word, %8 : $Optional<Int>)

bb3:
  %10 = integer_literal $Builtin.Word, 1
  %11 = builtin_function_ref "sadd_with_overflow_Word" : $@thin (Builtin.Word, Builtin.Word, Builtin.Int1) -> (Builtin.Word, Builtin.Int1)
  %12 = integer_literal $Builtin.Int1, -1
  %13 = apply %11(%3, %10, %12) : $@thin (Builtin.Word, Builtin.Word, Builtin.Int1) -> (Builtin.Word, Builtin.Int1)
  %14 = tuple_extract %13 : $(Builtin.Word, Builtin.Int1), 0
  %15 = tuple_extract %13 : $(Builtin.Word, Builtin.Int1), 1
  cond_fail %15 : $Builtin.Int1
  %17 = enum $Optional<Int>, #Optional.Some!enumelt.1, %4 : $Int
  br bb4(%14 : $Builtin.Word, %17 : $Optional<Int>)

bb4(%19 : $Builtin.Word, %20 : $Optional<Int>):
  switch_enum %20 : $Optional<Int>, case #Optional.Some!enumelt.1: bb5, case #Optional.None!enumelt: bb6

bb5:
  br bb1(%19 : $Builtin.Word)

bb6:
  %23 = tuple ()
  return %23 : $()
}

// CHECK-LABEL: Loops in simple_loop
// CHECK:  Loop at depth 1 containing: bb1<header><exiting>,bb2<latch>

sil @simple_loop : $@thin () -> () {
bb0:
  %0 = integer_literal $Builtin.Word, 0
  %1 = integer_literal $Builtin.Word, 1000
  br bb1(%0 : $Builtin.Word)

bb1(%3 : $Builtin.Word):
  %4 = struct $Int (%3 : $Builtin.Word)
  %5 = builtin_function_ref "cmp_eq_Word" : $@thin (Builtin.Word, Builtin.Word) -> Builtin.Int1
  %6 = apply %5(%3, %1) : $@thin (Builtin.Word, Builtin.Word) -> Builtin.Int1
  cond_br %6, bb3, bb2

bb2:
  %8 = integer_literal $Builtin.Word, 1
  %9 = builtin_function_ref "sadd_with_overflow_Word" : $@thin (Builtin.Word, Builtin.Word, Builtin.Int1) -> (Builtin.Word, Builtin.Int1)
  %10 = integer_literal $Builtin.Int1, -1
  %11 = apply %9(%3, %8, %10) : $@thin (Builtin.Word, Builtin.Word, Builtin.Int1) -> (Builtin.Word, Builtin.Int1)
  %12 = tuple_extract %11 : $(Builtin.Word, Builtin.Int1), 0
  %13 = tuple_extract %11 : $(Builtin.Word, Builtin.Int1), 1
  cond_fail %13 : $Builtin.Int1
  %15 = enum $Optional<Int>, #Optional.Some!enumelt.1, %4 : $Int
  br bb1(%12 : $Builtin.Word)

bb3:
  %17 = tuple ()
  return %17 : $()
}

// CHECK-LABEL: nested_loop
// CHECK: Loop at depth 1 containing: bb1<header><exiting>,bb2,bb4,bb5,bb6<latch>
// CHECK:    Loop at depth 2 containing: bb4<header><exiting>,bb5<latch>

sil @nested_loop : $@thin () -> () {
bb0:
  %0 = integer_literal $Builtin.Word, 0
  %1 = integer_literal $Builtin.Word, 1000
  br bb1(%0 : $Builtin.Word)

bb1(%3 : $Builtin.Word):
  %4 = builtin_function_ref "cmp_eq_Word" : $@thin (Builtin.Word, Builtin.Word) -> Builtin.Int1
  %5 = apply %4(%3, %1) : $@thin (Builtin.Word, Builtin.Word) -> Builtin.Int1
  cond_br %5, bb3, bb2

bb2:
  %7 = integer_literal $Builtin.Word, 1
  %8 = builtin_function_ref "sadd_with_overflow_Word" : $@thin (Builtin.Word, Builtin.Word, Builtin.Int1) -> (Builtin.Word, Builtin.Int1)
  %9 = integer_literal $Builtin.Int1, -1
  %10 = apply %8(%3, %7, %9) : $@thin (Builtin.Word, Builtin.Word, Builtin.Int1) -> (Builtin.Word, Builtin.Int1)
  %11 = tuple_extract %10 : $(Builtin.Word, Builtin.Int1), 0
  %12 = tuple_extract %10 : $(Builtin.Word, Builtin.Int1), 1
  cond_fail %12 : $Builtin.Int1
  %14 = integer_literal $Builtin.Word, 2000
  br bb4(%0 : $Builtin.Word)

bb3:
  %16 = tuple ()
  return %16 : $()

bb4(%18 : $Builtin.Word):
  %19 = apply %4(%18, %14) : $@thin (Builtin.Word, Builtin.Word) -> Builtin.Int1
  cond_br %19, bb6, bb5

bb5:
  %21 = integer_literal $Builtin.Word, 1
  %22 = builtin_function_ref "sadd_with_overflow_Word" : $@thin (Builtin.Word, Builtin.Word, Builtin.Int1) -> (Builtin.Word, Builtin.Int1)
  %23 = integer_literal $Builtin.Int1, -1
  %24 = apply %22(%18, %21, %23) : $@thin (Builtin.Word, Builtin.Word, Builtin.Int1) -> (Builtin.Word, Builtin.Int1)
  %25 = tuple_extract %24 : $(Builtin.Word, Builtin.Int1), 0
  %26 = tuple_extract %24 : $(Builtin.Word, Builtin.Int1), 1
  cond_fail %26 : $Builtin.Int1
  br bb4(%25 : $Builtin.Word)

bb6:
  br bb1(%11 : $Builtin.Word)
}
