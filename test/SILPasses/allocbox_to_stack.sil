// RUN: %sil-opt %s -allocbox-to-stack | FileCheck %s

import Builtin
import Swift


// CHECK-LABEL: sil @simple_promotion
sil @simple_promotion : $(Int) -> Int {
bb0(%0 : $Int):
  %1 = alloc_box $Int
  %2 = store %0 to %1#1 : $*Int
  %3 = load %1#1 : $*Int
  %4 = strong_release %1#0 : $Builtin.ObjectPointer
  %5 = return %3 : $Int

// CHECK: alloc_stack
// CHECK-NOT: alloc_box
// CHECK-NOT: strong_release
// CHECK: return
}

// CHECK-LABEL: sil @init_var
sil @init_var : $() -> Int {
bb0:
  %1 = alloc_box $Int
  %3 = load %1#1 : $*Int
  %4 = strong_release %1#0 : $Builtin.ObjectPointer
  %5 = return %3 : $Int

// CHECK: %0 = alloc_stack
// CHECK-NOT: alloc_box
// CHECK-NOT: strong_release
// CHECK-NOT: destroy_addr
// CHECK: dealloc_stack %0#0 : $*@local_storage Int
// CHECK: return
}

// CHECK-LABEL: sil @multi_strong_release
sil @multi_strong_release : $() -> Int {
bb0:
  %1 = alloc_box $Int
  %2 = mark_uninitialized [rootself] %1#1 : $*Int
  %3 = load %2 : $*Int
  %x = strong_retain %1#0 : $Builtin.ObjectPointer
  %y = strong_release %1#0 : $Builtin.ObjectPointer
  %b = br bb1
bb1:

  %4 = strong_release %1#0 : $Builtin.ObjectPointer
  %5 = return %3 : $Int

// CHECK: %0 = alloc_stack
// CHECK: bb1:
// CHECK: dealloc_stack %0#0 : $*@local_storage Int
// CHECK: return
}

struct TestStruct {
  var Elt : Int
}

// CHECK-LABEL: sil @struct_tuple_element_addr
sil @struct_tuple_element_addr : $(Int) -> Int {
bb1(%0 : $Int):
  %1 = alloc_box $TestStruct
  %a = alloc_box $(Int, Int)
  
  %2 = struct_element_addr %1#1 : $*TestStruct, #Elt
  %3 = store %0 to %2 : $*Int

  %b = tuple_element_addr %a#1 : $*(Int, Int), 0
  %c = store %0 to %b : $*Int

  %6 = struct_element_addr %1#1 : $*TestStruct, #Elt
  %7 = load %6 : $*Int
  %x = strong_release %a#0 : $Builtin.ObjectPointer
  %8 = strong_release %1#0 : $Builtin.ObjectPointer


  %9 = return %7 : $Int

// CHECK: %1 = alloc_stack $TestStruct
// CHECK: dealloc_stack %1
// CHECK: return
}




sil @callee : $@thin (@inout Int) -> ()

// CHECK-LABEL: sil @inout_nocapture
sil @inout_nocapture : $@thin () -> Int {
bb0:
  // CHECK: alloc_stack
  %1 = alloc_box $Int
  %6 = function_ref @callee : $@thin (@inout Int) -> ()
  %7 = apply %6(%1#1) : $@thin (@inout Int) -> ()
  %8 = load %1#1 : $*Int
  %9 = strong_release %1#0 : $Builtin.ObjectPointer
  %10 = address_to_pointer %1#1 : $*Int to $Builtin.RawPointer
  %11 = pointer_to_address %10 : $Builtin.RawPointer to $*Int
  %12 = load %11 : $*Int
  %13 = return %8 : $Int
  // CHECK: return
}


protocol P {
}

sil @returns_protocol : $@thin (@out P) -> ()

// CHECK-LABEL: sil @test_indirect_return
sil @test_indirect_return : $@thin () -> () {
bb0:
  // CHECK: alloc_stack
  %1 = function_ref @returns_protocol : $@thin (@out P) -> ()
  %2 = alloc_box $P
  %3 = apply %1(%2#1) : $@thin (@out P) -> ()
  %5 = strong_release %2#0 : $Builtin.ObjectPointer
  %0 = tuple ()
  %6 = return %0 : $()
  // CHECK: return
}

class SomeClass {}

// CHECK-LABEL: sil @class_promotion
sil @class_promotion : $(SomeClass) -> SomeClass {
bb0(%0 : $SomeClass):
  %1 = alloc_box $SomeClass
  %2 = store %0 to %1#1 : $*SomeClass
  %3 = load %1#1 : $*SomeClass
  %4 = strong_release %1#0 : $Builtin.ObjectPointer
  %5 = return %3 : $SomeClass

// CHECK: %1 = alloc_stack
// CHECK-NOT: alloc_box
// CHECK-NOT: strong_release
// CHECK: destroy_addr {{.*}} : $*SomeClass
// CHECK: return
}

protocol LogicValue {
  func getLogicValue() -> Bool
}

// CHECK-LABEL: @protocols
sil @protocols : $@thin (@in LogicValue, @thin Bool.metatype) -> Bool {
bb0(%0 : $*LogicValue, %1 : $@thin Bool.metatype):
  %2 = alloc_box $LogicValue
// CHECK:  %2 = alloc_stack $LogicValue
  copy_addr [take] %0 to [initialization] %2#1 : $*LogicValue
  %6 = project_existential %2#1 : $*LogicValue to $*@sil_self LogicValue
  %7 = protocol_method %2#1 : $*LogicValue, #LogicValue.getLogicValue!1 : $@cc(witness_method) @callee_owned (@inout @sil_self LogicValue) -> Bool
  %8 = apply %7(%6) : $@cc(witness_method) @callee_owned (@inout @sil_self LogicValue) -> Bool
  strong_release %2#0 : $Builtin.ObjectPointer
// CHECK:  destroy_addr %2#1 : $*LogicValue
// CHECK-NEXT:  dealloc_stack %2#0 : $*@local_storage LogicValue
// CHECK-NEXT:  return
  return %8 : $Bool
}


// Generics test, which is address-only.
class Generic<T> {}

// CHECK-LABEL: sil @dealloc_box
sil @dealloc_box : $@thin <T> () -> () {
bb0:  // CHECK-NEXT: bb0:
      // CHECK-NEXT: alloc_stack
  %1 = alloc_box $Generic<T>
  dealloc_box $Generic<T>, %1#0 : $Builtin.ObjectPointer

  %0 = tuple ()    // CHECK: tuple ()
  %6 = return %0 : $()
  // CHECK: return
}


enum SomeUnion {
  case x(Int)
  case y(SomeClass)
}



sil @_TO1t9SomeUnion1yfMS0_FCS_9SomeClassS0_ : $@thin (@owned SomeClass, @thin SomeUnion.metatype) -> @owned SomeUnion 
sil @_TC1t9SomeClassCfMS0_FT_S0_ : $@thin (@thick SomeClass.metatype) -> @owned SomeClass 

// CHECK-LABEL: sil @union_test
sil @union_test : $@thin () -> () {
bb0:
  %1 = alloc_box $SomeUnion
  %2 = function_ref @_TO1t9SomeUnion1yfMS0_FCS_9SomeClassS0_ : $@thin (@owned SomeClass, @thin SomeUnion.metatype) -> @owned SomeUnion // user: %7
  %3 = metatype $@thin SomeUnion.metatype
  %4 = function_ref @_TC1t9SomeClassCfMS0_FT_S0_ : $@thin (@thick SomeClass.metatype) -> @owned SomeClass // user: %6
  %5 = metatype $@thick SomeClass.metatype
  %6 = apply %4(%5) : $@thin (@thick SomeClass.metatype) -> @owned SomeClass
  %7 = apply %2(%6, %3) : $@thin (@owned SomeClass, @thin SomeUnion.metatype) -> @owned SomeUnion
  store %7 to %1#1 : $*SomeUnion
  strong_release %1#0 : $Builtin.ObjectPointer
  %10 = tuple ()
  return %10 : $()
  
// CHECK: alloc_stack
// CHECK:  [[T0:%.*]] = tuple ()
// CHECK-NEXT:  return [[T0]] : $()
}

// CHECK-LABEL: sil @multiple_release_test
sil @multiple_release_test : $@thin (Bool) -> Bool {
bb0(%0 : $Bool):
  %1 = alloc_box $Bool
  store %0 to %1#1 : $*Bool
  strong_retain %1#0 : $Builtin.ObjectPointer
  strong_retain %1#0 : $Builtin.ObjectPointer
  %5 = tuple ()
  %6 = load %1#1 : $*Bool
  strong_release %1#0 : $Builtin.ObjectPointer
  strong_release %1#0 : $Builtin.ObjectPointer
  strong_release %1#0 : $Builtin.ObjectPointer
  return %6 : $Bool

  // CHECK: alloc_stack $Bool
  // CHECK-NEXT: store
  // CHECK-NEXT: tuple ()
  // CHECK-NEXT: load
  // CHECK-NEXT: dealloc_stack
  // CHECK-NEXT: return
}

// Make sure that we do not attempt to optimize this since allocbox is
// not smart enough yet to insert dealloc_stacks in the appropriate
// places.
//
// rdar://15832873
//
// CHECK-LABEL: sil @box_reachable_from_release_test
// CHECK: bb1
// CHECK: alloc_box
// CHECK: bb2:
// CHECK: strong_release
// CHECK: bb3:
// CHECK: strong_release
sil @box_reachable_from_release_test : $@thin () -> () {
bb0:
  br bb1

bb1:
  %1 = alloc_box $Bool
  cond_br undef, bb2, bb3

bb2:
  strong_release %1#0 : $Builtin.ObjectPointer
  br bb1

bb3:
  strong_release %1#0 : $Builtin.ObjectPointer
  %2 = tuple ()
  return %2 : $()
}
