// RUN: %target-sil-opt %s -code-sinking -verify | FileCheck %s

sil_stage canonical

import Builtin
import Swift
import SwiftShims

class X
{
  private func ping() -> Int
  @objc deinit
  init()
}

class Y : X
{
  @objc deinit
  override init()
}


sil @_TFC14devirt_access21X4pingfS0_FT_Si : $@convention(method) (@guaranteed X) -> Int 
sil @_TFC14devirt_access21XcfMS0_FT_S0_ : $@convention(method) (@owned X) -> @owned X 
sil @_TFC14devirt_access21XCfMS0_FT_S0_ : $@convention(thin) (@thick X.Type) -> @owned X 
sil @_TFC14devirt_access21YcfMS0_FT_S0_ : $@convention(method) (@owned Y) -> @owned Y 
sil @_TFC14devirt_access21YCfMS0_FT_S0_ : $@convention(thin) (@thick Y.Type) -> @owned Y 


//CHECK-LABEL: sil @trivial_sink
//CHECK: bb1:
//CHECK-NEXT: upcast
//CHECK-NEXT: class_method
//CHECK-NEXT: apply
//CHECK: return
sil @trivial_sink : $@convention(thin) (@owned Y) -> Int {
bb0(%0 : $Y):
  debug_value %0 : $Y
  strong_retain %0 : $Y
  %3 = upcast %0 : $Y to $X
  %4 = class_method %3 : $X, #X.ping!1 : X -> () -> Int , $@convention(method) (@guaranteed X) -> Int
  br bb1

bb1:
  %5 = apply %4(%3) : $@convention(method) (@guaranteed X) -> Int
  strong_release %0 : $Y
  return %5 : $Int
}

//CHECK-LABEL: sil @no_sink
//CHECK: upcast
//CHECK-NEXT: class_method
//CHECK-NEXT: cond_br
//CHECK: return
sil @no_sink : $@convention(thin) (@owned Y) -> Int {
bb0(%0 : $Y):
  debug_value %0 : $Y
  strong_retain %0 : $Y
  %3 = upcast %0 : $Y to $X
  %4 = class_method %3 : $X, #X.ping!1 : X -> () -> Int , $@convention(method) (@guaranteed X) -> Int
  cond_br undef, bb1, bb2

bb1:
  %5 = apply %4(%3) : $@convention(method) (@guaranteed X) -> Int
  strong_release %0 : $Y
  return %5 : $Int

bb2:
  %9 = apply %4(%3) : $@convention(method) (@guaranteed X) -> Int
  strong_release %0 : $Y
  return %5 : $Int
}

//CHECK-LABEL: sil @cf_sink
//CHECK: bb1:
//CHECK-NEXT: upcast
//CHECK-NEXT: class_method
//CHECK-NEXT: apply
//CHECK-NOT: upcast
//CHECK: return
sil @cf_sink : $@convention(thin) (@owned Y) -> Int {
bb0(%0 : $Y):
  debug_value %0 : $Y
  strong_retain %0 : $Y
  %3 = upcast %0 : $Y to $X
  %4 = class_method %3 : $X, #X.ping!1 : X -> () -> Int , $@convention(method) (@guaranteed X) -> Int
  cond_br undef, bb1, bb2

bb1:
  %5 = apply %4(%3) : $@convention(method) (@guaranteed X) -> Int
  strong_release %0 : $Y
  return %5 : $Int

bb2:
  strong_release %0 : $Y
  return %5 : $Int
}


//CHECK-LABEL: sil @sink_multi_blocks
//CHECK: bb4:
//CHECK-NEXT: upcast
//CHECK-NEXT: class_method
//CHECK-NEXT: apply
//CHECK-NOT: upcast
//CHECK: return
sil @sink_multi_blocks : $@convention(thin) (@owned Y) -> Int {
bb0(%0 : $Y):
  debug_value %0 : $Y
  strong_retain %0 : $Y
  %3 = upcast %0 : $Y to $X
  %4 = class_method %3 : $X, #X.ping!1 : X -> () -> Int , $@convention(method) (@guaranteed X) -> Int
  br bb1

bb1:
  br bb2

bb2:
  br bb3

bb3:
  br bb4

bb4:
  %5 = apply %4(%3) : $@convention(method) (@guaranteed X) -> Int
  strong_release %0 : $Y
  return %5 : $Int
}

sil_vtable X {
  #X.ping!1: _TFC14devirt_access21X4pingfS0_FT_Si	// devirt_access2.X.ping (devirt_access2.X)() -> Swift.Int
  #X.init!initializer.1: _TFC14devirt_access21XcfMS0_FT_S0_	// devirt_access2.X.init (devirt_access2.X.Type)() -> devirt_access2.X
}

sil_vtable Y {
  #X.ping!1: _TFC14devirt_access21X4pingfS0_FT_Si	// devirt_access2.X.ping (devirt_access2.X)() -> Swift.Int
  #X.init!initializer.1: _TFC14devirt_access21YcfMS0_FT_S0_	// devirt_access2.Y.init (devirt_access2.Y.Type)() -> devirt_access2.Y
}

