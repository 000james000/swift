// RUN: %sil-opt -specialize -verify %s | FileCheck %s

sil_stage canonical

import Builtin
import Swift

class C {
}

class D : C {
}

class E {
}

var b: UInt8

var c: C

var d: D

var e: E

var r1: C

var r2: UInt8

var r3: C

var r4: UInt8

var r5: D

var r6: C

var r7: E

sil @_TFC3out1CcfMS0_FT_S0_ : $@cc(method) @thin (@owned C) -> @owned C
sil @_TFC3out1DcfMS0_FT_S0_ : $@cc(method) @thin (@owned D) -> @owned D
sil @_TFC3out1EcfMS0_FT_S0_ : $@cc(method) @thin (@owned E) -> @owned E

sil @_TFC4out31CCfMS0_FT_S0_ : $@thin (@thick C.Type) -> @owned C // user: %7
sil @_TFC4out31DCfMS0_FT_S0_ : $@thin (@thick D.Type) -> @owned D // user: %12
sil @_TFC4out31ECfMS0_FT_S0_ : $@thin (@thick E.Type) -> @owned E // user: %17

// x -> x where x is a class.
// CHECK-LABEL: sil shared @_TTSC4main1C_S0____TF3out11DoSomethingU___FT2t1Q_2t2Q0__Q0_ : $@thin (@out C, @in C, @in C) -> () {
// CHECK: bb0(
// CHECK-NOT: bb1:
// CHECK: [[VAR:%[0-9]+]] = alloc_stack $C
// CHECK-NOT: bb1:
// CHECK: br bb1([[VAR]]#1 : $*C)

// x -> x where x is not a class.
// CHECK-LABEL: sil shared @_TTSVSs5UInt8_S____TF3out11DoSomethingU___FT2t1Q_2t2Q0__Q0_ : $@thin (@out UInt8, @in UInt8, @in UInt8) -> () {
// CHECK: bb0(
// CHECK-NOT: bb1:
// CHECK: [[VAR:%[0-9]+]] = alloc_stack $UInt8
// CHECK-NOT: bb1:
// CHECK: br bb1([[VAR]]#1 : $*UInt8)

// x -> y where x is not a class but y is.
// CHECK-LABEL: sil shared @_TTSVSs5UInt8_C4main1C___TF3out11DoSomethingU___FT2t1Q_2t2Q0__Q0_ : $@thin (@out C, @in UInt8, @in C) -> () {
// CHECK: bb0(
// CHECK-NOT: bb1
// CHECK: br bb2

// y -> x where x is a class but y is not.
// CHECK-LABEL: sil shared @_TTSC4main1C_VSs5UInt8___TF3out11DoSomethingU___FT2t1Q_2t2Q0__Q0_ : $@thin (@out UInt8, @in C, @in UInt8) -> () {
// CHECK: bb0(
// CHECK-NOT: bb1
// CHECK: br bb2

// x -> y where x is a super class of y.
// CHECK-LABEL: sil shared @_TTSC4main1C_CS_1D___TF3out11DoSomethingU___FT2t1Q_2t2Q0__Q0_ : $@thin (@out D, @in C, @in D) -> () {
// CHECK: bb0(
// CHECK-NOT: bb1:
// CHECK: [[VAR1:%[0-9]+]] = alloc_stack $C
// CHECK-NOT: bb1:
// CHECK: [[VAR2:%[0-9]+]] = unconditional_checked_cast downcast [[VAR1]]#1 : $*C to $*D
// CHECK-NOT: bb1:
// CHECK: br bb1([[VAR2]] : $*D)

// y -> x where x is a super class of y.
// CHECK-LABEL: sil shared @_TTSC4main1D_CS_1C___TF3out11DoSomethingU___FT2t1Q_2t2Q0__Q0_ : $@thin (@out C, @in D, @in C) -> () {
// CHECK: bb0(
// CHECK-NOT: bb1:
// CHECK: [[VAR1:%[0-9]+]] = alloc_stack $D
// CHECK-NOT: bb1:
// CHECK: [[VAR2:%[0-9]+]] = upcast [[VAR1]]#1 : $*D to $*C
// CHECK-NOT: bb1:
// CHECK: br bb1([[VAR2]] : $*C)

// x -> y where x and y are unrelated classes.
// CHECK-LABEL: sil shared @_TTSC4main1C_CS_1E___TF3out11DoSomethingU___FT2t1Q_2t2Q0__Q0_ : $@thin (@out E, @in C, @in E) -> () {
// CHECK: bb0(
// CHECK-NOT: bb1
// CHECK: br bb2

// top_level_code
sil private @top_level_code : $@thin () -> () {
bb0:
  %0 = global_addr #b : $*UInt8                   // users: %3, %31, %33, %40, %51
  %1 = integer_literal $Builtin.Int8, 0           // user: %2
  %2 = struct $UInt8 (%1 : $Builtin.Int8)         // user: %3
  store %2 to %0 : $*UInt8                        // id: %3
  %4 = global_addr #c : $*C                       // users: %8, %22, %24, %42, %49, %58, %69, %76
  // function_ref out3.C.__allocating_init (out3.C.Type)() -> out3.C
  %5 = function_ref @_TFC4out31CCfMS0_FT_S0_ : $@thin (@thick C.Type) -> @owned C // user: %7
  %6 = metatype $@thick C.Type                    // user: %7
  %7 = apply %5(%6) : $@thin (@thick C.Type) -> @owned C // user: %8
  store %7 to %4 : $*C                            // id: %8
  %9 = global_addr #d : $*D                       // users: %13, %60, %67
  // function_ref out3.D.__allocating_init (out3.D.Type)() -> out3.D
  %10 = function_ref @_TFC4out31DCfMS0_FT_S0_ : $@thin (@thick D.Type) -> @owned D // user: %12
  %11 = metatype $@thick D.Type                   // user: %12
  %12 = apply %10(%11) : $@thin (@thick D.Type) -> @owned D // user: %13
  store %12 to %9 : $*D                           // id: %13
  %14 = global_addr #e : $*E                      // users: %18, %78
  // function_ref out3.E.__allocating_init (out3.E.Type)() -> out3.E
  %15 = function_ref @_TFC4out31ECfMS0_FT_S0_ : $@thin (@thick E.Type) -> @owned E // user: %17
  %16 = metatype $@thick E.Type                   // user: %17
  %17 = apply %15(%16) : $@thin (@thick E.Type) -> @owned E // user: %18
  store %17 to %14 : $*E                          // id: %18
  %19 = global_addr #r1 : $*C                     // user: %25
  // function_ref out3.DoSomething <A, B>(t1 : A, t2 : B) -> B
  %20 = function_ref @_TF3out11DoSomethingU___FT2t1Q_2t2Q0__Q0_ : $@thin <τ_0_0, τ_0_1> (@out τ_0_1, @in τ_0_0, @in τ_0_1) -> () // user: %25
  %21 = alloc_stack $C                            // users: %22, %25, %27
  copy_addr %4 to [initialization] %21#1 : $*C    // id: %22
  %23 = alloc_stack $C                            // users: %24, %25, %26
  copy_addr %4 to [initialization] %23#1 : $*C    // id: %24
  %25 = apply %20<C, C>(%19, %21#1, %23#1) : $@thin <τ_0_0, τ_0_1> (@out τ_0_1, @in τ_0_0, @in τ_0_1) -> ()
  dealloc_stack %23#0 : $*@local_storage C        // id: %26
  dealloc_stack %21#0 : $*@local_storage C        // id: %27
  %28 = global_addr #r2 : $*UInt8                 // user: %34
  // function_ref out3.DoSomething <A, B>(t1 : A, t2 : B) -> B
  %29 = function_ref @_TF3out11DoSomethingU___FT2t1Q_2t2Q0__Q0_ : $@thin <τ_0_0, τ_0_1> (@out τ_0_1, @in τ_0_0, @in τ_0_1) -> () // user: %34
  %30 = alloc_stack $UInt8                        // users: %31, %34, %36
  copy_addr %0 to [initialization] %30#1 : $*UInt8 // id: %31
  %32 = alloc_stack $UInt8                        // users: %33, %34, %35
  copy_addr %0 to [initialization] %32#1 : $*UInt8 // id: %33
  %34 = apply %29<UInt8, UInt8>(%28, %30#1, %32#1) : $@thin <τ_0_0, τ_0_1> (@out τ_0_1, @in τ_0_0, @in τ_0_1) -> ()
  dealloc_stack %32#0 : $*@local_storage UInt8    // id: %35
  dealloc_stack %30#0 : $*@local_storage UInt8    // id: %36
  %37 = global_addr #r3 : $*C                     // user: %43
  // function_ref out3.DoSomething <A, B>(t1 : A, t2 : B) -> B
  %38 = function_ref @_TF3out11DoSomethingU___FT2t1Q_2t2Q0__Q0_ : $@thin <τ_0_0, τ_0_1> (@out τ_0_1, @in τ_0_0, @in τ_0_1) -> () // user: %43
  %39 = alloc_stack $UInt8                        // users: %40, %43, %45
  copy_addr %0 to [initialization] %39#1 : $*UInt8 // id: %40
  %41 = alloc_stack $C                            // users: %42, %43, %44
  copy_addr %4 to [initialization] %41#1 : $*C    // id: %42
  %43 = apply %38<UInt8, C>(%37, %39#1, %41#1) : $@thin <τ_0_0, τ_0_1> (@out τ_0_1, @in τ_0_0, @in τ_0_1) -> ()
  dealloc_stack %41#0 : $*@local_storage C        // id: %44
  dealloc_stack %39#0 : $*@local_storage UInt8    // id: %45
  %46 = global_addr #r4 : $*UInt8                 // user: %52
  // function_ref out3.DoSomething <A, B>(t1 : A, t2 : B) -> B
  %47 = function_ref @_TF3out11DoSomethingU___FT2t1Q_2t2Q0__Q0_ : $@thin <τ_0_0, τ_0_1> (@out τ_0_1, @in τ_0_0, @in τ_0_1) -> () // user: %52
  %48 = alloc_stack $C                            // users: %49, %52, %54
  copy_addr %4 to [initialization] %48#1 : $*C    // id: %49
  %50 = alloc_stack $UInt8                        // users: %51, %52, %53
  copy_addr %0 to [initialization] %50#1 : $*UInt8 // id: %51
  %52 = apply %47<C, UInt8>(%46, %48#1, %50#1) : $@thin <τ_0_0, τ_0_1> (@out τ_0_1, @in τ_0_0, @in τ_0_1) -> ()
  dealloc_stack %50#0 : $*@local_storage UInt8    // id: %53
  dealloc_stack %48#0 : $*@local_storage C        // id: %54
  %55 = global_addr #r5 : $*D                     // user: %61
  // function_ref out3.DoSomething <A, B>(t1 : A, t2 : B) -> B
  %56 = function_ref @_TF3out11DoSomethingU___FT2t1Q_2t2Q0__Q0_ : $@thin <τ_0_0, τ_0_1> (@out τ_0_1, @in τ_0_0, @in τ_0_1) -> () // user: %61
  %57 = alloc_stack $C                            // users: %58, %61, %63
  copy_addr %4 to [initialization] %57#1 : $*C    // id: %58
  %59 = alloc_stack $D                            // users: %60, %61, %62
  copy_addr %9 to [initialization] %59#1 : $*D    // id: %60
  %61 = apply %56<C, D>(%55, %57#1, %59#1) : $@thin <τ_0_0, τ_0_1> (@out τ_0_1, @in τ_0_0, @in τ_0_1) -> ()
  dealloc_stack %59#0 : $*@local_storage D        // id: %62
  dealloc_stack %57#0 : $*@local_storage C        // id: %63
  %64 = global_addr #r6 : $*C                     // user: %70
  // function_ref out3.DoSomething <A, B>(t1 : A, t2 : B) -> B
  %65 = function_ref @_TF3out11DoSomethingU___FT2t1Q_2t2Q0__Q0_ : $@thin <τ_0_0, τ_0_1> (@out τ_0_1, @in τ_0_0, @in τ_0_1) -> () // user: %70
  %66 = alloc_stack $D                            // users: %67, %70, %72
  copy_addr %9 to [initialization] %66#1 : $*D    // id: %67
  %68 = alloc_stack $C                            // users: %69, %70, %71
  copy_addr %4 to [initialization] %68#1 : $*C    // id: %69
  %70 = apply %65<D, C>(%64, %66#1, %68#1) : $@thin <τ_0_0, τ_0_1> (@out τ_0_1, @in τ_0_0, @in τ_0_1) -> ()
  dealloc_stack %68#0 : $*@local_storage C        // id: %71
  dealloc_stack %66#0 : $*@local_storage D        // id: %72
  %73 = global_addr #r7 : $*E                     // user: %79
  // function_ref out3.DoSomething <A, B>(t1 : A, t2 : B) -> B
  %74 = function_ref @_TF3out11DoSomethingU___FT2t1Q_2t2Q0__Q0_ : $@thin <τ_0_0, τ_0_1> (@out τ_0_1, @in τ_0_0, @in τ_0_1) -> () // user: %79
  %75 = alloc_stack $C                            // users: %76, %79, %81
  copy_addr %4 to [initialization] %75#1 : $*C    // id: %76
  %77 = alloc_stack $E                            // users: %78, %79, %80
  copy_addr %14 to [initialization] %77#1 : $*E   // id: %78
  %79 = apply %74<C, E>(%73, %75#1, %77#1) : $@thin <τ_0_0, τ_0_1> (@out τ_0_1, @in τ_0_0, @in τ_0_1) -> ()
  dealloc_stack %77#0 : $*@local_storage E        // id: %80
  dealloc_stack %75#0 : $*@local_storage C        // id: %81
  %82 = tuple ()                                  // user: %83
  return %82 : $()                                // id: %83
}

// out.DoSomething <A, B>(t1 : A, t2 : B) -> B
sil @_TF3out11DoSomethingU___FT2t1Q_2t2Q0__Q0_ : $@thin <T1, T2> (@out T2, @in T1, @in T2) -> () {
bb0(%0 : $*T2, %1 : $*T1, %2 : $*T2):
  debug_value_addr %1 : $*T1  // let t1           // id: %3
  debug_value_addr %2 : $*T2  // let t2           // id: %4
  %5 = alloc_stack $Optional<T2>                  // users: %11, %15, %19, %23, %26, %31, %32
  %6 = alloc_stack $T1                            // users: %7, %8, %13, %17
  copy_addr %1 to [initialization] %6#1 : $*T1    // id: %7
  checked_cast_br archetype_to_archetype %6#1 : $*T1 to $*T2, bb1, bb2 // id: %8

bb1(%9 : $*T2):                                   // Preds: bb0
  copy_addr [take] %0 to [initialization] %2 : $*T2
  dealloc_stack %6#0 : $ *@local_storage T1
  dealloc_stack %5#0 : $ *@local_storage Optional<T2>
  %7 = tuple()
  return %7 : $()

bb2:                                              // Preds: bb0
  %8 = builtin_function_ref "int_trap" : $@thin @noreturn () -> () // user: %87
  %10 = apply %8() : $@thin @noreturn () -> ()
  unreachable
}
