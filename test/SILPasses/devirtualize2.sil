// RUN: %sil-opt %s -devirtualize  -verify | FileCheck %s
sil_stage canonical

import Builtin
import Swift

class Bar {
  init()
  func ping()
}

class Foo : Bar {
  init()
  @override func ping()
}

var x: Bar

//CHECK: function_with_cm_with_cast
//CHECK: function_ref @_TFC4main3Bar4pingfS0_FT_T_
//CHECK-NEXT: apply
//CHECK-NOT: class_method
//CHECK: return
sil @function_with_cm_with_cast : $@thin () -> () {
bb0:
  %0 = global_addr #x : $*Bar                     // users: %7, %8
  %1 = alloc_ref $Foo                             // users: %5, %3, %2
  strong_retain %1 : $Foo                         // id: %2
  %3 = upcast %1 : $Foo to $Bar                   // user: %4
  %4 = unconditional_checked_cast downcast %3 : $Bar to $Foo // user: %6
  strong_release %1 : $Foo                        // id: %5
  %6 = upcast %4 : $Foo to $Bar                   // user: %7
  store %6 to %0 : $*Bar                          // id: %7
  %8 = load %0 : $*Bar                            // users: %11, %10, %9
  strong_retain %6 : $Bar                         // id: %9
  %10 = class_method %6 : $Bar, #Bar.ping!1 : $@cc(method) @thin (@owned Bar) -> () // user: %11
  %11 = apply %10(%8) : $@cc(method) @thin (@owned Bar) -> ()
  %12 = tuple ()                                  // user: %13
  return %12 : $()                                // id: %13
}

sil @_TFC4main3Bar4pingfS0_FT_T_ : $@cc(method) @thin (@owned Bar) -> ()
sil @_TFC4main3Foo4pingfS0_FT_T_ : $@cc(method) @thin (@owned Foo) -> ()

sil_vtable Bar {
  #Bar.ping!1: _TFC4main3Bar4pingfS0_FT_T_
}

sil_vtable Foo {
  #Foo.ping!1: _TFC4main3Foo4pingfS0_FT_T_
}



