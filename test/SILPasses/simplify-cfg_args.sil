// RUN: %sil-opt %s -simplify-cfg | FileCheck %s
sil_stage canonical

import Builtin
import Swift

sil_global private @globalinit_token11 : $Builtin.Word

sil_global private @globalinit_token120 : $Builtin.Word

sil @globalinit_func11 :  $@thin () -> ()

//CHECK: sil @a_method_to_simplify
sil @a_method_to_simplify : $@thin (Builtin.RawPointer, @owned Builtin.NativeObject, Builtin.Word) -> Builtin.RawPointer {
bb0(%0 : $Builtin.RawPointer, %1 : $Builtin.NativeObject, %2 : $Builtin.Word):
  %4 = struct $UnsafePointer<UInt8> (%0 : $Builtin.RawPointer) // user: %37
  strong_retain %1 : $Builtin.NativeObject       // id: %5
  strong_retain %1 : $Builtin.NativeObject       // id: %6
  strong_release %1 : $Builtin.NativeObject      // id: %7
  %8 = integer_literal $Builtin.Int1, 0           // user: %23
  %9 = builtin_function_ref "once" : $@thin (Builtin.RawPointer, @owned @callee_owned () -> ()) -> () // users: %27, %14
  %10 = sil_global_addr @globalinit_token11 : $*Builtin.Word // user: %11
  %11 = address_to_pointer %10 : $*Builtin.Word to $Builtin.RawPointer // user: %14
  %12 = function_ref @globalinit_func11 : $@thin () -> () // users: %26, %13
  %13 = thin_to_thick_function %12 : $@thin () -> () to $@callee_owned () -> () // user: %14
  %14 = apply %9(%11, %13) : $@thin (Builtin.RawPointer, @owned @callee_owned () -> ()) -> ()
  %15 = alloc_stack $Int                          // users: %38, %40, %41
  %16 = struct_element_addr %15#1 : $*Int, #Int.value // users: %28, %17
  %17 = load %16 : $*Builtin.Word                 // user: %20
  %18 = integer_literal $Builtin.Word, -1         // user: %20
  %19 = builtin_function_ref "xor_Word" : $@thin (Builtin.Word, Builtin.Word) -> Builtin.Word // user: %20
  %20 = apply %19(%17, %18) : $@thin (Builtin.Word, Builtin.Word) -> Builtin.Word // user: %22
  %21 = builtin_function_ref "and_Word" : $@thin (Builtin.Word, Builtin.Word) -> Builtin.Word // user: %22
  %22 = apply %21(%2, %20) : $@thin (Builtin.Word, Builtin.Word) -> Builtin.Word // users: %30, %23
//CHECK-NOT: cond_br
  cond_br %8, bb1, bb2(%22 : $Builtin.Word)       // id: %23

bb1:                                              // Preds: bb0
  %24 = sil_global_addr @globalinit_token11 : $*Builtin.Word // user: %25
  %25 = address_to_pointer %24 : $*Builtin.Word to $Builtin.RawPointer // user: %27
  %26 = thin_to_thick_function %12 : $@thin () -> () to $@callee_owned () -> () // user: %27
  %27 = apply %9(%25, %26) : $@thin (Builtin.RawPointer, @owned @callee_owned () -> ()) -> ()
  %28 = load %16 : $*Builtin.Word                 // user: %30
  %29 = builtin_function_ref "or_Word" : $@thin (Builtin.Word, Builtin.Word) -> Builtin.Word // user: %30
// CHECK: builtin_function_ref "and_Word"
// CHECK-NEXT: [[VAR_21:%[0-9]+]] = apply
  %30 = apply %29(%22, %28) : $@thin (Builtin.Word, Builtin.Word) -> Builtin.Word // user: %31
  br bb2(%30 : $Builtin.Word)                     // id: %31

bb2(%32 : $Builtin.Word):                         // Preds: bb0 bb1
//CHECK-NEXT: tuple ()
  %33 = tuple ()                                  // user: %34
  br bb3(%33 : $())                               // id: %34

bb3(%35 : $()):                                   // Preds: bb2
// CHECK-NEXT: struct $Int ([[VAR_21]] : $Builtin.Word)
  %36 = struct $Int (%32 : $Builtin.Word)         // user: %37
  strong_retain %1 : $Builtin.NativeObject       // id: %38
  strong_release %1 : $Builtin.NativeObject      // id: %39
  strong_release %1 : $Builtin.NativeObject      // id: %40
  dealloc_stack %15#0 : $*@local_storage Int      // id: %41
// CHECK: return
  return %0 : $Builtin.RawPointer
}


//CHECK-LABEL: remove_dead_args
//CHECK-NOT: br bb2([[VAR_21:%[0-9]+]] : $Bool)
//CHECK: bb2:
//CHECK-NEXT: tuple ()
//CHECK-NEXT: return
sil @remove_dead_args: $@thin (Int) -> () {
bb0(%0 : $Int):
  %1 = integer_literal $Builtin.Word, 37
  %2 = builtin_function_ref "cmp_ne_Word" : $@thin (Builtin.Word, Builtin.Word) -> Builtin.Int1
  %3 = struct_extract %0 : $Int, #Int.value
  %4 = apply %2(%3, %1) : $@thin (Builtin.Word, Builtin.Word) -> Builtin.Int1
  %5 = struct $Bool (%4 : $Builtin.Int1)
  cond_br %4, bb1, bb3

bb1:
  %7 = integer_literal $Builtin.Word, 42
  %8 = apply %2(%3, %7) : $@thin (Builtin.Word, Builtin.Word) -> Builtin.Int1
  %9 = struct $Bool (%8 : $Builtin.Int1)
  br bb2(%9 : $Bool)

// Remove this ARG.
bb2(%11 : $Bool):                                 // Preds: bb1 bb3
  %12 = tuple ()                                  // user: %13
  return %12 : $()                                // id: %13

bb3:                                              // Preds: bb0
  br bb2(%5 : $Bool)                              // id: %14
}

class A {}

//CHECK-LABEL: no_remove_mandatory_dead_args
//CHECK: checked_cast_br existential_to_concrete {{%.*}} : $AnyObject to $A, bb1
//CHECK-NOT: bb1
//CHECK: bb1([[VAR:%[0-9]+]] : $A)
//CHECK-NOT: [[VAR]]
//CHECK: return
sil @no_remove_mandatory_dead_args : $@thin (@owned AnyObject) -> Int {
bb0(%0 : $AnyObject):
  checked_cast_br existential_to_concrete %0 : $AnyObject to $A, bb1, bb2 // id: %3

bb1(%1 : $A):
  %2 = integer_literal $Builtin.Word, 1
  br bb3(%2 : $Builtin.Word)

bb2:
  %3 = integer_literal $Builtin.Word, 0
  br bb3(%3 : $Builtin.Word)

bb3(%4 : $Builtin.Word):
  %5 = struct $Int (%4 : $Builtin.Word)
  strong_release %0 : $AnyObject
  return %5 : $Int
}

enum X {
  case A
  case B((Int, Int))
  case C(Int)
}

// CHECK-LABEL: simplify_switch_include_args
sil @simplify_switch_include_args : $@thin (Int, Int) -> Int {
bb0(%0 : $Int, %1 : $Int):
// CHECK: return %0 : $Int
  %2 = tuple (%0 : $Int, %1 : $Int)               // user: %3
  %3 = enum $X, #X.B!enumelt.1, %2 : $(Int, Int)  // user: %4
  switch_enum %3 : $X, case #X.A!enumelt: bb1, case #X.B!enumelt.1: bb3, case #X.C!enumelt.1: bb5 // id: %4

bb1:                                              // Preds: bb0
  br bb2                                          // id: %5

bb2:                                              // Preds: bb1
  %6 = integer_literal $Builtin.Word, 0           // user: %7
  %7 = struct $Int (%6 : $Builtin.Word)           // user: %8
  br bb7(%7 : $Int)                               // id: %8

bb3(%9 : $(Int, Int)):                            // Preds: bb0
  %10 = tuple_extract %9 : $(Int, Int), 0         // user: %12
  br bb4                                          // id: %11

bb4:                                              // Preds: bb3
  br bb7(%10 : $Int)                              // id: %12

bb5(%13 : $Int):                                  // Preds: bb0
  br bb6                                          // id: %14

bb6:                                              // Preds: bb5
  br bb7(%13 : $Int)                              // id: %15

bb7(%16 : $Int):                                  // Preds: bb2 bb4 bb6
  return %16 : $Int                               // id: %17
}

// CHECK-LABEL: simplify_switch_dont_include_args
sil @simplify_switch_dont_include_args : $@thin (Int, Int) -> Int {
bb0(%0 : $Int, %1 : $Int):
  %2 = tuple (%0 : $Int, %1 : $Int)               // user: %3
  %3 = enum $X, #X.B!enumelt.1, %2 : $(Int, Int)  // user: %4
  switch_enum %3 : $X, case #X.A!enumelt: bb1, case #X.B!enumelt.1: bb3, case #X.C!enumelt.1: bb5 // id: %4

bb1:                                              // Preds: bb0
  br bb2                                          // id: %5

bb2:                                              // Preds: bb1
  %6 = integer_literal $Builtin.Word, 0           // user: %7
  %7 = struct $Int (%6 : $Builtin.Word)           // user: %8
  br bb5

bb3(%9 : $(Int, Int)):                            // Preds: bb0
  %10 = tuple_extract %9 : $(Int, Int), 0         // user: %12
  br bb4                                          // id: %11

bb4:                                              // Preds: bb3
  br bb5                                          // id: %12

bb5:                                              // Preds: bb0
  return %0 : $Int                                // id: %17
}

// CHECK-LABEL: simplify_switch_dont_include_args_nested
sil @simplify_switch_dont_include_args_nested : $@thin (Int, Int, X) -> Int {
// CHECK: bb0
// CHECK: switch_enum %2
bb0(%0 : $Int, %1 : $Int, %2 : $X):
  switch_enum %2 : $X, case #X.A!enumelt: bb3, case #X.B!enumelt.1: bb1, case #X.C!enumelt.1: bb5

// CHECK: bb1
// CHECK-NOT: switch_enum
bb1(%12: $(Int, Int)):
  switch_enum %2 : $X, case #X.A!enumelt: bb6, case #X.B!enumelt.1: bb7, case #X.C!enumelt.1: bb8

bb2:
  %6 = integer_literal $Builtin.Word, 0
  %7 = struct $Int (%6 : $Builtin.Word)
  br bb5(%7 : $Int)

bb3:
  %9 = integer_literal $Builtin.Word, 1
  %10 = struct $Int (%9 : $Builtin.Word)
  br bb4(%10 : $Int)

bb4(%16 : $Int):
  br bb5(%16 : $Int)

bb5(%19 : $Int):
  return %19 : $Int

bb6:
  %14 = integer_literal $Builtin.Word, 2
  %15 = struct $Int (%14 : $Builtin.Word)
  br bb5(%15 : $Int)

bb7:
  %17 = integer_literal $Builtin.Word, 3
  %18 = struct $Int (%17 : $Builtin.Word)
  br bb5(%18 : $Int)

bb8(%20 : $Int):
  br bb5(%20 : $Int)
}

// CHECK-LABEL: simplify_switch_wrong_args
sil @simplify_switch_wrong_args : $@thin (Int, Int, X, Builtin.Int1) -> Int {
// CHECK: bb0
// CHECK: switch_enum %2
bb0(%0 : $Int, %1 : $Int, %2 : $X, %24 : $Builtin.Int1):
  switch_enum %2 : $X, case #X.A!enumelt: bb3, case #X.B!enumelt.1: bb9, case #X.C!enumelt.1: bb5

bb9(%21 : $(Int, Int)):
  %22 = tuple_extract %21 : $(Int, Int), 1
  cond_br %24, bb1(%22 : $Int), bb5(%22 : $Int)

// CHECK: bb1
// CHECK-NOT: switch_enum
bb1(%12: $Int):
  switch_enum %2 : $X, case #X.A!enumelt: bb6, case #X.B!enumelt.1: bb7, case #X.C!enumelt.1: bb8

bb2:
  %6 = integer_literal $Builtin.Word, 0
  %7 = struct $Int (%6 : $Builtin.Word)
  br bb5(%7 : $Int)

bb3:
  %9 = integer_literal $Builtin.Word, 1
  %10 = struct $Int (%9 : $Builtin.Word)
  br bb4(%10 : $Int)

bb4(%16 : $Int):
  br bb5(%16 : $Int)

bb5(%19 : $Int):
  return %19 : $Int

bb6:
  %14 = integer_literal $Builtin.Word, 2
  %15 = struct $Int (%14 : $Builtin.Word)
  br bb5(%15 : $Int)

bb7(%23 : $(Int, Int)):
  %17 = tuple_extract %21 : $(Int, Int), 0
  br bb5(%17 : $Int)

bb8(%20 : $Int):
  br bb5(%20 : $Int)
}

enum EA {
  case cA
  case cB(Int)
  case cC(Float)
}


// CHECK-LABEL: fold_unreachable_terminators1
sil @fold_unreachable_terminators1 : $@thin (EA) -> () {
// CHECK: bb0
// CHECK-NEXT: [[VAL:%[a-zA-Z0-9]+]] = tuple ()
// CHECK-NEXT: return [[VAL]]
bb0(%0 : $EA):
  switch_enum %0 : $EA, case #EA.cA!enumelt: bb1, case #EA.cB!enumelt.1: bb3, case #EA.cC!enumelt.1: bb5

bb1:
  br bb2

bb2:
  br bb7

bb3(%6 : $Int):
  br bb4

bb4:
  unreachable

bb5(%10 : $Float):
  br bb6

bb6:
  unreachable

bb7:
  %14 = tuple ()
  return %14 : $()
}

// CHECK-LABEL: fold_unreachable_terminators2
sil @fold_unreachable_terminators2 : $@thin (EA) -> Int {
// CHECK: bb0
bb0(%0 : $EA):
// CHECK-NEXT:  [[VAL:%[a-zA-Z0-9]+]] = unchecked_enum_data %0 : $EA, #EA.cB!enumelt.1 // user: %2
// CHECK-NEXT: return [[VAL]] : $Int
  switch_enum %0 : $EA, case #EA.cA!enumelt: bb1, case #EA.cB!enumelt.1: bb3, case #EA.cC!enumelt.1: bb5

bb1:
  br bb2

bb2:
  unreachable

bb3(%6 : $Int):
  br bb4

bb4:
  return %6 : $Int

bb5(%10 : $Float):
  br bb6

bb6:
  unreachable
}
