// RUN: %sil-opt -closure-specialize %s | FileCheck %s
// rdar://18156518

import Builtin
import Swift

protocol P {
  func foo(f: Int->Int, _ j: Int) -> Int
}

sil @_TF4test3bazfSiFT1mSi_Si : $@thin (Int, Int) -> Int

// CHECK-LABEL: @_TF4test3barFTPS_1P_Si_Si : $@thin (@in P, Int) -> Int {
// CHECK: partial_apply
// CHECK: apply
sil [noinline] @_TF4test3barFTPS_1P_Si_Si : $@thin (@in P, Int) -> Int {
bb0(%0 : $*P, %1 : $Int):
  %2 = open_existential %0 : $*P to $*@opened("01234567-89ab-cdef-0123-000000000000") P
  %3 = witness_method $@opened("01234567-89ab-cdef-0123-000000000000") P, #P.foo!1, %2 : $*@opened("01234567-89ab-cdef-0123-000000000000") P : $@thin @cc(witness_method) @callee_owned <T: P> (@owned @callee_owned (Int) -> Int, Int, @inout T) -> Int
  %4 = integer_literal $Builtin.Word, 2
  %5 = struct $Int (%4 : $Builtin.Word)
  // function_ref test.baz (Swift.Int)(m : Swift.Int) -> Swift.Int
  %6 = function_ref @_TF4test3bazfSiFT1mSi_Si : $@thin (Int, Int) -> Int
  %7 = partial_apply %6(%5) : $@thin (Int, Int) -> Int
  %8 = apply %3<@opened("01234567-89ab-cdef-0123-000000000000") P>(%7, %1, %2) : $@thin @cc(witness_method) @callee_owned <T: P> (@owned @callee_owned (Int) -> Int, Int, @inout T) -> Int
  destroy_addr %0 : $*P
  return %8 : $Int
}
