// RUN: %target-sil-opt %s -inlinecaches -dce -verify | FileCheck %s

sil_stage canonical

import Builtin
import Swift

class A {
  func ping(x: Builtin.Int32) -> Builtin.Int32
}

class B : A {
  override func ping(x: Builtin.Int32) -> Builtin.Int32
}

class C : A {
  override func ping(x: Builtin.Int32) -> Builtin.Int32
}

class D : C {
  override func ping(x: Builtin.Int32) -> Builtin.Int32
}

sil @_TFC25polymorphic_inline_caches1A4pingfS0_FBi32_Bi32_ : $@cc(method) @thin (Builtin.Int32, @owned A) -> Builtin.Int32
sil @_TFC25polymorphic_inline_caches1B4pingfS0_FBi32_Bi32_ : $@cc(method) @thin (Builtin.Int32, @owned B) -> Builtin.Int32
sil @_TFC25polymorphic_inline_caches1C4pingfS0_FBi32_Bi32_ : $@cc(method) @thin (Builtin.Int32, @owned C) -> Builtin.Int32
sil @_TFC25polymorphic_inline_caches1D4pingfS0_FBi32_Bi32_ : $@cc(method) @thin (Builtin.Int32, @owned D) -> Builtin.Int32

// CHECK-LABEL: sil @_TF25polymorphic_inline_caches3fooFTCS_1ABi32__Bi32_
sil @_TF25polymorphic_inline_caches3fooFTCS_1ABi32__Bi32_ : $@thin (@owned A, Builtin.Int32) -> Builtin.Int32 {
// CHECK: bb0
bb0(%0 : $A, %1 : $Builtin.Int32):
// CHECK-NOT: strong_retain %0
  strong_retain %0 : $A
// CHECK-NOT: class_method
  %5 = class_method %0 : $A, #A.ping!1 : A -> (Builtin.Int32) -> Builtin.Int32 , $@cc(method) @thin (Builtin.Int32, @owned A) -> Builtin.Int32
  // CHECK-NOT: apply
  %6 = apply %5(%1, %0) : $@cc(method) @thin (Builtin.Int32, @owned A) -> Builtin.Int32
  // CHECK: checked_cast_br [exact] %0 : $A to $B, bb2, bb3
  // CHECK: bb1
  // CHECK: strong_release %0 : $A
  strong_release %0 : $A
  // CHECK: return
  return %6 : $Builtin.Int32
  // CHECK: bb2
  // CHECK: [[BPING:%.*]] = function_ref @_TFC25polymorphic_inline_caches1B4pingfS0_FBi32_Bi32_
  // CHECK: apply [[BPING]]
  // CHECK: bb3
  // CHECK: checked_cast_br [exact] %0 : $A to $C, bb5, bb6
  // CHECK: bb4
  // CHECK: br bb1
  // CHECK: bb5
  // CHECK: [[CPING:%.*]] = function_ref @_TFC25polymorphic_inline_caches1C4pingfS0_FBi32_Bi32_
  // CHECK: apply [[CPING]]
  // CHECK: bb6
  // CHECK: checked_cast_br [exact] %0 : $A to $A, bb8, bb9
  // CHECK: bb7
  // CHECK: br bb4
  // CHECK: bb8
  // CHECK: [[APING:%.*]] = function_ref @_TFC25polymorphic_inline_caches1A4pingfS0_FBi32_Bi32_
  // CHECK: apply [[APING]]
  // CHECK: bb9
  // CHECK: [[PING:%.*]] = class_method %0 : $A, #A.ping!1
  // CHECK: apply [[PING]]
}

sil_vtable A {
  #A.ping!1: _TFC25polymorphic_inline_caches1A4pingfS0_FBi32_Bi32_
}

sil_vtable B {
  #A.ping!1: _TFC25polymorphic_inline_caches1B4pingfS0_FBi32_Bi32_
}

sil_vtable C {
  #A.ping!1: _TFC25polymorphic_inline_caches1C4pingfS0_FBi32_Bi32_
}

sil_vtable D {
  #A.ping!1: _TFC25polymorphic_inline_caches1D4pingfS0_FBi32_Bi32_
}
