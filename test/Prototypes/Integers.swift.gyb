//===--- Integers.swift.gyb -----------------------------------------------===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2015 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See http://swift.org/LICENSE.txt for license information
// See http://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//
// RUN: rm -rf %t && mkdir -p %t && %S/../../utils/gyb -DWORD_BITS=%target-ptrsize %s -o %t/out.swift
// RUN: %S/../../utils/line-directive %t/out.swift -- %target-build-swift -parse-stdlib %t/out.swift -o %t/a.out
// RUN: %S/../../utils/line-directive %t/out.swift -- %target-run %t/a.out
// REQUIRES: executable_test
import Swift

%{
#
# Utility code for later in this template
#
def hexify(n):
    """Return a legible hex representation of n, using '_' separators """
    z = '%X' % n
    l = len(z)
    r = []
    while z:
        r.insert(0, z[-4:])
        z = z[:-4]
    return '0x' + '_'.join(r)

# Number of bits in the Builtin.Word type
word_bits = int(WORD_BITS)

# Number of bits in integer literals.
builtinIntLiteralBits = 2048

def maskBits(n):
    """Return an n-bit mask in hex"""
    return hexify((1 << n) - 1)

fixedBitWidths = [2**x for x in range(3, 8)]
maxFixedBits = fixedBitWidths[-1]
}%

/// A low-level 2's complement integer.
protocol LowLevelInt
  : IntegerLiteralConvertible, _BuiltinIntegerLiteralConvertible {
  /// A LowLevelInt type that accomodates more bits of precision than
  /// any instance of `Self`.
  typealias Extended

  /// A Builtin type used as `Self`'s representation
  typealias Storage

  /// Creates a representation of 0
  init()

  /// Creates an instance with the given storage representation
  init(_: Storage)

  /// The number of bits `Self` can store
  static var bitWidth : Swift.Int { get }
  
  /// The entire storage of `self`'s value.  
  var storage: Storage { get set }

#if false
  var maxUnsetBit : Swift.Int { get }
  var maxSetBit : Swift.Int { get }
#endif
  var signExtended : Extended { get }
  var zeroExtended : Extended { get }
}

extension LowLevelInt {
  init(_ other: Self) {
    self.init()
    self.storage = other.storage
  }
  
  init(integerLiteral value: Self) {
    self = value
  }

  init() {
    self = 0
  }
}

% for bits in fixedBitWidths:
%   # Until we have BitInt, the widest Int sign-extends into itself.
%   extendedBits = bits * 2 if bits != maxFixedBits else bits
struct LLInt${bits} : LowLevelInt {
  typealias Extended = LLInt${extendedBits}
  typealias Storage = Builtin.Int${bits}
  
  init(_builtinIntegerLiteral x: Builtin.Int${builtinIntLiteralBits}) {
    storage = Builtin.truncOrBitCast_Int${builtinIntLiteralBits}_Int${bits}(x)
  }
  
  init(_ storage: Storage) {
    self.storage = storage
  }
  
  var storage: Storage
  
  static var bitWidth : Swift.Int { return ${word_bits} }

  % for sz in 'sign', 'zero':
  var ${sz}Extended : Extended {
    return Extended(Builtin.${sz[0]}extOrBitCast_Int${bits}_Int${extendedBits}(storage))
  }
  % end
}
% end

//===--- tests ------------------------------------------------------------===//
import StdlibUnittest
var tests = TestSuite("DiscriminatedBridgeObject")



tests.test("Dummy") {
  let x = LLInt64()
  let y = LLInt128()
  let z = LLInt16()
}

runAllTests()
