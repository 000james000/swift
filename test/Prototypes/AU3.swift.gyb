//===--- AU3.swift.gyb ----------------------------------------------------===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2017 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://swift.org/LICENSE.txt for license information
// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//
// RUN: rm -rf %t && mkdir -p %t && %gyb -DWORD_BITS=%target-ptrsize %s -o %t/out.swift
// RUN: %line-directive %t/out.swift -- %target-build-swift %t/out.swift -o %t/a.out -Onone -g
// RUN: %line-directive %t/out.swift -- %target-run %t/a.out
// REQUIRES: executable_test

%{
  import gyb
}%

import StdlibUnittest

//===--- Unicode ----------------------------------------------------------===//

/// Types that have an `AnyUnicodeContent` instance that describes their whole
/// content.
public protocol AnyUnicode {
  var anyContent: AnyUnicodeContent { get }
}

/// Collections of `Character` that have `UnicodeContent`.
public protocol Unicode
  : AnyUnicode, BidirectionalCollection, BidirectionalCollectionWrapper
// where Iterator.Element == Character
{
  // poor man's constraint on Iterator.Element
  subscript(i: Index) -> Character { get }
  
  associatedtype Content : UnicodeContent
  var content: Content { get }
}

extension Unicode {
  public var base: Content.CharacterView { return content.characters }
  public var anyContent: AnyUnicodeContent { return content }
}

class UnicodeContentBox : FactoryInitializable {
  var utf16: AnyUInt16UnicodeView { fatalError("override me!") }
  var unicodeScalars: AnyUnicodeScalarUnicodeView { fatalError("override me!") }
  var fccNormalizedUTF16: AnyUInt16UnicodeView { fatalError("override me!") }
#if false
  var utf32: AnyUInt32UnicodeView { fatalError("override me!") }
#endif
  
#if false
  // FIXME: Can this be Random Access?  If all encodings use a single code unit
  // per ASCII character and can statelessly identify a code unit that
  // represents ASCII, then yes.  Look into, e.g. shift-JIS.
  var extendedASCII: UnicodeBidirectionalUInt32 { fatalError("override me!") }
#endif
  var characters: AnyCharacterUnicodeView { fatalError("override me!") }
  var isKnownLatin1: Bool { fatalError("override me!") }
  var isKnownASCII: Bool { fatalError("override me!") }
  var isKnownFCCNormalized: Bool { fatalError("override me!") }
  var isKnownFCDForm: Bool { fatalError("override me!") }
  var isKnownNFDNormalized: Bool { fatalError("override me!") }
  var isKnownNFCNormalized: Bool { fatalError("override me!") }

  func isLatin1() -> Bool  { fatalError("override me!") }
  func isASCII() -> Bool { fatalError("override me!") }

  class Instance<Base: UnicodeContent> : UnicodeContentBox
  where Base.UTF16View.Iterator.Element == UTF16.CodeUnit,
  Base.UnicodeScalarView.Iterator.Element == UnicodeScalar
  {
    var base: Base
    
    override var utf16: AnyUInt16UnicodeView {
      return AnyUInt16UnicodeView(base.utf16)
    }
    override var unicodeScalars: AnyUnicodeScalarUnicodeView {
      return AnyUnicodeScalarUnicodeView(base.unicodeScalars)
    }
#if false
    override var utf32: AnyUInt32UnicodeView {
      return AnyUInt32UnicodeView(base.utf32)
    }
    override var fccNormalizedUTF16: AnyUInt16UnicodeView {
      return AnyUInt16UnicodeView(base.fccNormalizedUTF16)
    }
    override var extendedASCII: UnicodeBidirectionalUInt32 {
      return base.extendedASCII
    }
    override var characters: AnyCharacters { return base.characters }
#endif
    override var isKnownLatin1: Bool { return base.isKnownLatin1 }
    override var isKnownASCII: Bool { return base.isKnownASCII }
    override var isKnownFCCNormalized: Bool { return base.isKnownFCCNormalized }
    override var isKnownFCDForm: Bool { return base.isKnownFCDForm }
    override var isKnownNFDNormalized: Bool { return base.isKnownNFDNormalized }
    override var isKnownNFCNormalized: Bool { return base.isKnownNFCNormalized }
    override func isLatin1() -> Bool  { return base.isLatin1() }
    override func isASCII() -> Bool  { return base.isASCII() }
    init(_ x: Base) {
      base = x
      super.init(fromSubclass: ())
    }
  }

  convenience init<Base: UnicodeContent>(wrapping x: Base)
  where Base.UTF16View.Iterator.Element == UTF16.CodeUnit,
  Base.UnicodeScalarView.Iterator.Element == UnicodeScalar
  {
    self.init(Instance(x))
  }
  
  init(fromSubclass: ()) {}
}

//===--- String -----------------------------------------------------------===//
public struct String {
%{
    allCases = [
      ('utf16', '_UTF16StringStorage'),
      ('latin1', '_Latin1StringStorage'),
      ('any', 'UnicodeContentBox')
    ]
}%
  public struct Content {
    internal enum Representation {
      % for tag, Payload in allCases:
    case ${tag}(${Payload})
      % end
    }
    internal var _rep: Representation
  }
  public var content: Content
}

/// Case accessors
extension String.Content {
  % for tag, Payload in allCases:
  internal var _${tag}: ${Payload}? {
    get {
      if case .${tag}(let x) = _rep { return x }
      return nil
    }
    set {
      if let v = newValue { _rep = .${tag}(v) }
      else if _${tag} != nil { self = String.Content() }
    }
  }
  % end
}

extension String : Unicode {
  public typealias Base = AnyCharacterUnicodeView
  public typealias Index = AnyCharacterUnicodeView.Index
  public typealias IndexDistance = AnyCharacterUnicodeView.IndexDistance
}

%{
def switch(s):
  return """switch _rep {
    case .utf16(let x):
      %(s)s
    case .latin1(let x):
      %(s)s
    case .any(let x):
      %(s)s
    }""" % locals()
  
}%

extension String.Content : UnicodeContent {
  public typealias UTF16View = AnyUInt16UnicodeView
  public var utf16: UTF16View {
    ${switch('return UTF16View(x.utf16)')}
  }

  public typealias FCCNormalizedUTF16View = AnyUInt16UnicodeView
  public var fccNormalizedUTF16: FCCNormalizedUTF16View {
    ${switch('return FCCNormalizedUTF16View(x.fccNormalizedUTF16)')}
  }

  public typealias UnicodeScalarView = AnyUnicodeScalarUnicodeView
  public var unicodeScalars: UnicodeScalarView {
    ${switch('return UnicodeScalarView(x.unicodeScalars)')}
  }

  public typealias CharacterView = AnyCharacterUnicodeView
  public var characters: CharacterView {
    ${switch('return CharacterView(x.characters)')}
  }
  
  public func isLatin1() -> Bool { ${switch('return x.isLatin1()')} }
  public func isASCII() -> Bool { ${switch('return x.isASCII()')} }
  public var isKnownLatin1: Bool { ${switch('return x.isKnownLatin1')} }
  public var isKnownASCII: Bool {  ${switch('return x.isKnownASCII')} }
  public var isKnownFCCNormalized: Bool {
    ${switch('return x.isKnownFCCNormalized')}
  }
  public var isKnownFCDForm: Bool { ${switch('return x.isKnownFCDForm')} }
  public var isKnownNFDNormalized: Bool {
    ${switch('return x.isKnownNFDNormalized')}
  }
  public var isKnownNFCNormalized: Bool {
    ${switch('return x.isKnownNFCNormalized')}
  }
}

extension Collection where Iterator.Element == UTF16.CodeUnit {
  internal func _isLatin1() -> Bool {
    return !self.contains { $0 > 0xFF }
  }
  internal var _low8Bits : LazyMapCollection<Self, UInt8> {
    return self.lazy.map { UInt8(truncatingBitPattern: $0) }
  }
}

extension String.Content {
  public init() { _rep = .utf16(._emptyInstance()) }

  internal var _storageID: ObjectIdentifier? {
    switch _rep {
    case .utf16(let storage):
      return ObjectIdentifier(storage)
    case .latin1(let storage):
      return ObjectIdentifier(storage)
    case .any(let storage):
      return ObjectIdentifier(storage)
    }
  }
}

extension String : RangeReplaceableCollection {
  
  public init() { content = Content() }
  
  public mutating func replaceSubrange<C: Collection>(
    _ target: Range<Index>, with replacement: C
  ) where C.Iterator.Element == Character {
    // Fast path: the incoming characters are Unicode
    if let unicodeReplacement = replacement as? AnyUnicode {
      replaceUTF16(target, with: unicodeReplacement.anyContent.anyUTF16)
    }
    else {
      // Slow path: we have to reconstruct UTF-16 from Characters
      replaceUTF16(target, with: replacement.lazy.flatMap { $0.utf16 })
    }
  }

  /// Replaces the `target` subrange with the given UTF-16 encoded content.
  internal mutating func replaceUTF16<C: Collection>(
    _ target: Range<Index>, with replacement_: C
  )  
  where C.Iterator.Element == UTF16.CodeUnit {
    // Pre-count replacement, once.
    let replacement = Counted(replacement_)

    // Try to do in-place replacement
    if _fastPath(replaceUTF16InPlace(target, with: replacement)) {
      return
    }
    // Otherwise, we need to allocate new storage
    
    let head = content.utf16[..<target.lowerBound]
    let tail = content.utf16[target.upperBound...]

    // See if we can use 8-bit code units
    if replacement._isLatin1() && (
      content.isKnownLatin1 || head._isLatin1() && tail._isLatin1()
    ) {
      let s = _Latin1StringStorage(
        joining: head._low8Bits, replacement._low8Bits, tail._low8Bits)
      s.isKnownASCII = !s.contains { $0 > 0x7f }
      content._latin1 = s
    }
    else {
      content._utf16 = _UTF16StringStorage(joining: head, replacement, tail)
    }
  }
  
  internal var isMutable: Bool {
    mutating get {
      defer { _fixLifetime(self) }
      return content._storageID?._liveObjectIsUniquelyReferenced() ?? true
    }
  }
  
  internal mutating func replaceUTF16InPlace<C>(
    _ target: Range<Index>, with replacement: Counted<C>
  ) -> Bool 
  where C.Iterator.Element == UTF16.CodeUnit {
    if !isMutable { return false }

    let t: Range<Int> = numericCast(target.lowerBound.encodedOffset)
      ..< numericCast(target.upperBound.encodedOffset)

    switch content._rep {
    case .utf16(let storage):
      return storage.tryToReplaceSubrange(t, with: replacement)
    case .latin1(let storage):
      return storage.tryToReplaceSubrange(
        t, with: replacement.lazy.map { UInt8(truncatingBitPattern: $0) })
    case .any(_):
      return false
    }
  }
}

extension ObjectIdentifier {
  /// Returns true if the object identified by `self` is uniquely referenced.
  ///
  /// - Requires: the object identified by `self` exists.
  /// - Note: will only work when called from a mutating method
  internal func _liveObjectIsUniquelyReferenced() -> Bool {
    var me = self
    return withUnsafeMutablePointer(to: &me) {
      $0.withMemoryRebound(to: AnyObject.self, capacity: 1) {
        _isUnique(&$0.pointee)
      }
    }    
  }
}

//===----------------------------------------------------------------------===//
//===--- Tests ------------------------------------------------------------===//
//===----------------------------------------------------------------------===//


var suite = TestSuite("AnyUnicode")

let sample = "abcdefghijklmnopqrstuvwxyz\n"
  + "🇸🇸🇬🇱🇱🇸🇩🇯🇺🇸\n"
  + "Σὲ 👥🥓γνωρίζω ἀπὸ τὴν κόψη χαῖρε, ὦ χαῖρε, ᾿Ελευθεριά!\n"
  + "Οὐχὶ ταὐτὰ παρίσταταί μοι γιγνώσκειν, ὦ ἄνδρες ᾿Αθηναῖοι,\n"
  + "გთხოვთ ახლავე გაიაროთ რეგისტრაცია Unicode-ის მეათე საერთაშორისო\n"
  + "Зарегистрируйтесь сейчас на Десятую Международную Конференцию по\n"
  + "  ๏ แผ่นดินฮั่นเสื่อมโทรมแสนสังเวช  พระปกเกศกองบู๊กู้ขึ้นใหม่\n"
  + "ᚻᛖ ᚳᚹᚫᚦ ᚦᚫᛏ ᚻᛖ ᛒᚢᛞᛖ ᚩᚾ ᚦᚫᛗ ᛚᚪᚾᛞᛖ ᚾᚩᚱᚦᚹᛖᚪᚱᛞᚢᛗ ᚹᛁᚦ ᚦᚪ ᚹᛖᛥᚫ"

suite.test("MemoryLayout") {
  expectEqual(8, MemoryLayout<String>.size)
  expectEqual(8, MemoryLayout<String>.stride)
}

suite.test("UTF16/smoke") {
  var s = String(sample)
  expectFalse(s.content.isKnownLatin1)
  expectFalse(s.content.isLatin1())
  expectFalse(s.content.isKnownASCII)
  expectFalse(s.content.isASCII())
  
  s.replaceSubrange(
    s.index(atOffset: 3)..<s.index(atOffset: 10), with: "BRAK")
  expectEqual(
    "abcBRAKklmnopqrstuvw", Swift.String(s[..<s.index(atOffset: 20)]))
  expectFalse(s.content.isKnownLatin1)
  expectFalse(s.content.isLatin1())
  expectFalse(s.content.isKnownASCII)
  expectFalse(s.content.isASCII())

  let s1 = s
  // ensure that we modify a non-unique buffer this time
  defer { _fixLifetime(s1) } 
  
  s.replaceSubrange(
    s.index(atOffset: 5)..<s.index(atOffset: 6),
    with: "---bl\u{f8}\u{f8}g---"
  )
  expectEqual(
    "abcBR---bl\u{f8}\u{f8}g---Kklmnopqr",
    Swift.String(s[..<s.index(atOffset: 25)]))
  expectFalse(s.content.isKnownLatin1)
  expectFalse(s.content.isLatin1())
  expectFalse(s.content.isKnownASCII)
  expectFalse(s.content.isASCII())
}

suite.test("Latin1/smoke") {
  var s = String(
    sample.unicodeScalars.lazy.filter { $0.value < 0x100 }.map {
      Character($0)
    })
  expectNotNil(s.content._latin1)
  expectTrue(s.content.isKnownLatin1)
  expectTrue(s.content.isLatin1())
  expectEqual(!s.content.utf16.contains { $0 > 0x7f }, s.content.isKnownASCII)
  expectEqual(!s.content.utf16.contains { $0 > 0x7f }, s.content.isASCII())
  
  s.replaceSubrange(s.index(atOffset: 3)..<s.index(atOffset: 10), with: "BRAK")
  expectEqual(
    "abcBRAKklmnopqrstuvw", Swift.String(s[..<s.index(atOffset: 20)]))
  expectTrue(s.content.isKnownLatin1)
  expectTrue(s.content.isLatin1())
  expectTrue(s.content.isKnownASCII)
  expectTrue(s.content.isASCII())
  
  let s1 = s
  // ensure that we modify a non-unique buffer this time
  defer { _fixLifetime(s1) } 
  
  s.replaceSubrange(
    s.index(atOffset: 5)..<s.index(atOffset: 6),
    with: "---bl\u{f8}\u{f8}g---"
  )
  expectNotNil(s.content._latin1)
  expectEqual(
    "abcBR---bl\u{f8}\u{f8}g---Kklmnopqr",
    Swift.String(s[..<s.index(atOffset: 25)]))
  expectTrue(s.content.isKnownLatin1)
  expectTrue(s.content.isLatin1())
  expectFalse(s.content.isKnownASCII)
  expectFalse(s.content.isASCII())
  
  s.replaceSubrange(
    s.index(atOffset: 11)..<s.index(atOffset: 11),
    with: "🇸🇸🇬🇱🇱🇸🇩🇯🇺🇸")
  expectNil(s.content._latin1)
  expectFalse(s.content.isKnownLatin1)
  expectFalse(s.content.isLatin1())
  expectFalse(s.content.isKnownASCII)
  expectFalse(s.content.isASCII())
  expectEqual(
    "abcBR---blø🇸🇸🇬🇱🇱🇸🇩🇯🇺🇸øg---Kklm",
    Swift.String(s[..<s.index(atOffset: 25)]))
}

suite.test("RangeReplaceable/UTF16/FastPath") {
  // Exercise the case where the source text is-a Unicode.
  var s = String(sample)
  s.replaceSubrange(
    s.index(atOffset: 3)..<s.index(atOffset: 10), with: String("BRAK"))
  expectEqual(
    "abcBRAKklmnopqrstuvw", Swift.String(s[..<s.index(atOffset: 20)]))

  let s1 = s
  // ensure that we modify a non-unique buffer this time
  defer { _fixLifetime(s1) } 
  
  s.replaceSubrange(
    s.index(atOffset: 5)..<s.index(atOffset: 6),
    with: String("---bl\u{f8}\u{f8}g---")
  )
  expectEqual(
    "abcBR---bl\u{f8}\u{f8}g---Kklmnopqr",
    Swift.String(s[..<s.index(atOffset: 25)]))
}

suite.test("RangeReplaceable/Latin1/FastPath") {
  // Exercise the case where the source text is-a Unicode.
  var s = String(
    sample.unicodeScalars.lazy.filter { $0.value < 0x100 }.map {
      Character($0)
    })
  s.replaceSubrange(
    s.index(atOffset: 3)..<s.index(atOffset: 10), with: String("BRAK"))
  expectEqual(
    "abcBRAKklmnopqrstuvw", Swift.String(s[..<s.index(atOffset: 20)]))

  let s1 = s
  // ensure that we modify a non-unique buffer this time
  defer { _fixLifetime(s1) } 
  
  s.replaceSubrange(
    s.index(atOffset: 5)..<s.index(atOffset: 6),
    with: String("---bl\u{f8}\u{f8}g---")
  )
  expectEqual(
    "abcBR---bl\u{f8}\u{f8}g---Kklmnopqr",
    Swift.String(s[..<s.index(atOffset: 25)]))
}

suite.test("Bidirectional/UnicodeScalar") {
  let a = AnyUnicodeScalarUnicodeView(
    _UnicodeViews(Array(sample.utf16), ValidUTF16.self).scalars)
  expectEqualSequence(sample.unicodeScalars, a)
  var lastEncodedOffset = Int64.min
  // Make sure it works as a collection, too.
  for (s, i) in zip(sample.unicodeScalars, a.indices) {
    expectEqual(s, a[i])
    let o = i.encodedOffset
    expectLT(lastEncodedOffset, o)
    lastEncodedOffset = o
  }
}

suite.test("RandomAccess/UnicodeScalar") {
  let a = AnyUnicodeScalarUnicodeView(
    RandomAccessUnicodeView(Array(sample.unicodeScalars)))
  expectEqualSequence(sample.unicodeScalars, a)
  var lastEncodedOffset = Int64.min
  // Make sure it works as a collection, too.
  for (s, i) in zip(sample.unicodeScalars, a.indices) {
    expectEqual(s, a[i])
    let o = i.encodedOffset
    expectLT(lastEncodedOffset, o)
    lastEncodedOffset = o
  }
}
runAllTests()

// ${'Local Variables'}:
// eval: (read-only-mode 1)
// End:
