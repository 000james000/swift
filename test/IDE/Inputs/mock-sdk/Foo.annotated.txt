<decl>@exported import Foo.FooSub</decl>
<decl>@exported import FooHelper</decl>

<decl>/// Aaa.  FooEnum1.  Bbb.
struct FooEnum1 {
  <decl>init(value: <ref:TypeAlias>CUnsignedInt</ref>)</decl>
  <decl>var value: <ref:TypeAlias>CUnsignedInt</ref></decl>
}</decl>

<decl>/// Aaa.  FooEnum1X.  Bbb.
var FooEnum1X: <ref:Struct>FooEnum1</ref> { get }</decl>
<decl>struct FooEnum2 {
  <decl>init(value: <ref:TypeAlias>CUnsignedInt</ref>)</decl>
  <decl>var value: <ref:TypeAlias>CUnsignedInt</ref></decl>
}</decl>
<decl>var FooEnum2X: <ref:Struct>FooEnum2</ref> { get }</decl>
<decl>var FooEnum2Y: <ref:Struct>FooEnum2</ref> { get }</decl>
<decl>struct FooEnum3 {
  <decl>init(value: <ref:TypeAlias>CUnsignedInt</ref>)</decl>
  <decl>var value: <ref:TypeAlias>CUnsignedInt</ref></decl>
}</decl>
<decl>var FooEnum3X: <ref:Struct>FooEnum3</ref> { get }</decl>
<decl>var FooEnum3Y: <ref:Struct>FooEnum3</ref> { get }</decl>

<decl>/// Aaa.  FooComparisonResult.  Bbb.
enum FooComparisonResult : <ref:TypeAlias>CLong</ref> {
  <decl>case OrderedAscending</decl>
  <decl>case OrderedSame</decl>
  <decl>case OrderedDescending</decl>
}</decl>

<decl>/// Aaa.  FooRuncingOptions.  Bbb.
struct FooRuncingOptions {
  <decl>static var EnableMince: <ref:Struct>FooRuncingOptions</ref> { get }</decl>
  <decl>static var EnableQuince: <ref:Struct>FooRuncingOptions</ref> { get }</decl>
  <decl>init()</decl>
  <decl>init(value: <ref:TypeAlias>CLong</ref>)</decl>
  <decl>var value: <ref:TypeAlias>CLong</ref></decl>
  <decl>static func fromMask(raw: <ref:TypeAlias>CLong</ref>) -> <ref:Struct>FooRuncingOptions</ref></decl>
  <decl>static func fromRaw(raw: <ref:TypeAlias>CLong</ref>) -> <ref:Struct>FooRuncingOptions</ref>?</decl>
  <decl>func toRaw() -> <ref:TypeAlias>CLong</ref></decl>
  <decl>func getLogicValue() -> <ref:Struct>Bool</ref></decl>
}</decl>
<decl>struct FooStruct1 {
  <decl>var x: <ref:TypeAlias>CInt</ref></decl>
  <decl>var y: <ref:TypeAlias>CDouble</ref></decl>
}</decl>
<decl>struct FooStruct2 {
  <decl>var x: <ref:TypeAlias>CInt</ref></decl>
  <decl>var y: <ref:TypeAlias>CDouble</ref></decl>
}</decl>
<decl>typealias FooStructTypedef1 = <ref:Struct>FooStruct2</ref></decl>
<decl>struct FooStructTypedef2 {
  <decl>var x: <ref:TypeAlias>CInt</ref></decl>
  <decl>var y: <ref:TypeAlias>CDouble</ref></decl>
}</decl>

<decl>/// Aaa.  FooTypedef1.  Bbb.
typealias FooTypedef1 = <ref:TypeAlias>CInt</ref></decl>

<decl>/// Aaa.  fooIntVar.  Bbb.
var fooIntVar: <ref:TypeAlias>CInt</ref></decl>

<decl>/// Aaa.  fooFunc1.  Bbb.
func fooFunc1(a: <ref:TypeAlias>CInt</ref>) -> <ref:TypeAlias>CInt</ref></decl>
<decl>func fooFunc1AnonymousParam(_: <ref:TypeAlias>CInt</ref>) -> <ref:TypeAlias>CInt</ref></decl>
<decl>func fooFunc3(a: <ref:TypeAlias>CInt</ref>, b: <ref:TypeAlias>CFloat</ref>, c: <ref:TypeAlias>CDouble</ref>, d: <ref:Struct>CMutablePointer</ref><<ref:TypeAlias>CInt</ref>>) -> <ref:TypeAlias>CInt</ref></decl>
<decl>func fooFuncWithBlock(blk: @objc_block (<ref:TypeAlias>CFloat</ref>) -> <ref:TypeAlias>CInt</ref>)</decl>

<decl>/**
 * Aaa.  fooFuncWithComment1.  Bbb.
 * Ccc.
 *
 * Ddd.
 */
func fooFuncWithComment1()</decl>

<decl>/*!
  Aaa.  fooFuncWithComment2.  Bbb.
 */
func fooFuncWithComment2()</decl>

<decl>/**
 * Aaa.  fooFuncWithComment3.  Bbb.
 */
/**
 * Ccc.
 */
func fooFuncWithComment3()</decl>

<decl>/**
 * Aaa.  fooFuncWithComment4.  Bbb.
 */
/// Ddd.
func fooFuncWithComment4()</decl>

<decl>/// Aaa.  fooFuncWithComment5.  Bbb.
/// Ccc.
///
/// Ddd.
func fooFuncWithComment5()</decl>

<decl>/// Aaa.  redeclaredInMultipleModulesFunc1.  Bbb.
func redeclaredInMultipleModulesFunc1(a: <ref:TypeAlias>CInt</ref>) -> <ref:TypeAlias>CInt</ref></decl>

<decl>/// Aaa.  FooProtocolBase.  Bbb.
@objc protocol FooProtocolBase {

  <decl>/// Aaa.  fooProtoFunc.  Bbb.
  /// Ccc.
  func fooProtoFunc()</decl>

  <decl>/// Aaa.  fooProtoFuncWithExtraIndentation1.  Bbb.
  /// Ccc.
  func fooProtoFuncWithExtraIndentation1()</decl>

  <decl>/**
   * Aaa.  fooProtoFuncWithExtraIndentation2.  Bbb.
   * Ccc.
   */
  func fooProtoFuncWithExtraIndentation2()</decl>
  <decl>class func fooProtoClassFunc()</decl>
  <decl>var fooProperty1: <ref:TypeAlias>CInt</ref> { get set }</decl>
  <decl>var fooProperty2: <ref:TypeAlias>CInt</ref> { get set }</decl>
  <decl>var fooProperty3: <ref:TypeAlias>CInt</ref> { get }</decl>
}</decl>
<decl>@objc protocol FooProtocolDerived : <ref:Protocol>FooProtocolBase</ref> {
}</decl>
<decl>@objc class FooClassBase {
  <decl>class func fooBaseInstanceFunc0()</decl>
  <decl>func fooBaseInstanceFunc0()</decl>
  <decl>class func fooBaseClassFunc0()</decl>
}</decl>

<decl>/// Aaa.  FooClassDerived.  Bbb.
@objc class FooClassDerived : <ref:Class>FooClassBase</ref>, <ref:Protocol>FooProtocolDerived</ref>, <ref:Protocol>FooProtocolBase</ref> {
  <decl>var fooProperty1: <ref:TypeAlias>CInt</ref></decl>
  <decl>var fooProperty2: <ref:TypeAlias>CInt</ref></decl>
  <decl>var fooProperty3: <ref:TypeAlias>CInt</ref> { get }</decl>
  <decl>func fooInstanceFunc0()</decl>
  <decl>func fooInstanceFunc1(a: <ref:TypeAlias>CInt</ref>)</decl>
  <decl>func fooInstanceFunc2(a: <ref:TypeAlias>CInt</ref>) withB(b: <ref:TypeAlias>CInt</ref>)</decl>
  <decl>class func fooClassFunc0()</decl>

  <decl>/// Aaa.  fooProtoFunc.  Bbb.
  /// Ccc.
  func fooProtoFunc()</decl>

  <decl>/// Aaa.  fooProtoFuncWithExtraIndentation1.  Bbb.
  /// Ccc.
  func fooProtoFuncWithExtraIndentation1()</decl>

  <decl>/**
   * Aaa.  fooProtoFuncWithExtraIndentation2.  Bbb.
   * Ccc.
   */
  func fooProtoFuncWithExtraIndentation2()</decl>
  <decl>class func fooProtoClassFunc()</decl>
}</decl>
<decl>var FOO_MACRO_1: <ref:TypeAlias>CInt</ref> { get }</decl>
<decl>var FOO_MACRO_2: <ref:TypeAlias>CInt</ref> { get }</decl>
<decl>var FOO_MACRO_3: <ref:TypeAlias>CInt</ref> { get }</decl>
<decl>var FOO_MACRO_4: <ref:TypeAlias>CUnsignedInt</ref> { get }</decl>
<decl>var FOO_MACRO_5: <ref:TypeAlias>CUnsignedLongLong</ref> { get }</decl>
<decl>var FOO_MACRO_REDEF_1: <ref:TypeAlias>CInt</ref> { get }</decl>
<decl>var FOO_MACRO_REDEF_2: <ref:TypeAlias>CInt</ref> { get }</decl>
<decl>func theLastDeclInFoo()</decl>
