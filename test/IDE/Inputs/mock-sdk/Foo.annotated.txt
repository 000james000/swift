<decl:Import>@exported import Foo.FooSub</decl>
<decl:Import>@exported import FooHelper</decl>


<decl:Struct>/// Aaa.  FooEnum1.  Bbb.
struct FooEnum1 {
  <decl:Constructor>init(value: <ref:TypeAlias>CUnsignedInt</ref>)</decl>
  <decl:Var>var value: <ref:TypeAlias>CUnsignedInt</ref></decl>
}</decl>

<decl:Var>/// Aaa.  FooEnum1X.  Bbb.
var FooEnum1X: <ref:Struct>FooEnum1</ref> { get }</decl>
<decl:Struct>struct FooEnum2 {
  <decl:Constructor>init(value: <ref:TypeAlias>CUnsignedInt</ref>)</decl>
  <decl:Var>var value: <ref:TypeAlias>CUnsignedInt</ref></decl>
}</decl>
<decl:Var>var FooEnum2X: <ref:Struct>FooEnum2</ref> { get }</decl>
<decl:Var>var FooEnum2Y: <ref:Struct>FooEnum2</ref> { get }</decl>
<decl:Struct>struct FooEnum3 {
  <decl:Constructor>init(value: <ref:TypeAlias>CUnsignedInt</ref>)</decl>
  <decl:Var>var value: <ref:TypeAlias>CUnsignedInt</ref></decl>
}</decl>
<decl:Var>var FooEnum3X: <ref:Struct>FooEnum3</ref> { get }</decl>
<decl:Var>var FooEnum3Y: <ref:Struct>FooEnum3</ref> { get }</decl>

<decl:Enum>/// Aaa.  FooComparisonResult.  Bbb.
enum FooComparisonResult : <ref:TypeAlias>CLong</ref> {
  <decl:EnumElement>case OrderedAscending</decl>
  <decl:EnumElement>case OrderedSame</decl>
  <decl:EnumElement>case OrderedDescending</decl>
}</decl>

<decl:Struct>/// Aaa.  FooRuncingOptions.  Bbb.
struct FooRuncingOptions {
  <decl:Constructor>init()</decl>
  <decl:Constructor>init(value: <ref:TypeAlias>CLong</ref>)</decl>
  <decl:Var>var value: <ref:TypeAlias>CLong</ref></decl>
  <decl:Var>static var EnableMince: <ref:Struct>FooRuncingOptions</ref> { get }</decl>
  <decl:Var>static var EnableQuince: <ref:Struct>FooRuncingOptions</ref> { get }</decl>
  <decl:Func>static func fromMask(raw: <ref:TypeAlias>CLong</ref>) -> <ref:Struct>FooRuncingOptions</ref></decl>
  <decl:Func>static func fromRaw(raw: <ref:TypeAlias>CLong</ref>) -> <ref:Struct>FooRuncingOptions</ref>?</decl>
  <decl:Func>func toRaw() -> <ref:TypeAlias>CLong</ref></decl>
  <decl:Func>func getLogicValue() -> <ref:Struct>Bool</ref></decl>
}</decl>
<decl:Struct>struct FooStruct1 {
  <decl:Var>var x: <ref:TypeAlias>CInt</ref></decl>
  <decl:Var>var y: <ref:TypeAlias>CDouble</ref></decl>
}</decl>
<decl:Struct>struct FooStruct2 {
  <decl:Var>var x: <ref:TypeAlias>CInt</ref></decl>
  <decl:Var>var y: <ref:TypeAlias>CDouble</ref></decl>
}</decl>
<decl:TypeAlias>typealias FooStructTypedef1 = <ref:Struct>FooStruct2</ref></decl>
<decl:Struct>struct FooStructTypedef2 {
  <decl:Var>var x: <ref:TypeAlias>CInt</ref></decl>
  <decl:Var>var y: <ref:TypeAlias>CDouble</ref></decl>
}</decl>

<decl:TypeAlias>/// Aaa.  FooTypedef1.  Bbb.
typealias FooTypedef1 = <ref:TypeAlias>CInt</ref></decl>

<decl:Var>/// Aaa.  fooIntVar.  Bbb.
var fooIntVar: <ref:TypeAlias>CInt</ref></decl>

<decl:Func>/// Aaa.  fooFunc1.  Bbb.
func fooFunc1(_ a: <ref:TypeAlias>CInt</ref>) -> <ref:TypeAlias>CInt</ref></decl>
<decl:Func>func fooFunc1AnonymousParam(_: <ref:TypeAlias>CInt</ref>) -> <ref:TypeAlias>CInt</ref></decl>
<decl:Func>func fooFunc3(_ a: <ref:TypeAlias>CInt</ref>, _ b: <ref:TypeAlias>CFloat</ref>, _ c: <ref:TypeAlias>CDouble</ref>, _ d: <ref:Struct>CMutablePointer</ref><<ref:TypeAlias>CInt</ref>>) -> <ref:TypeAlias>CInt</ref></decl>
<decl:Func>func fooFuncWithBlock(_ blk: @unchecked ((<ref:TypeAlias>CFloat</ref>) -> <ref:TypeAlias>CInt</ref>)?)</decl>
<decl:Func>@noreturn func fooFuncNoreturn1()</decl>
<decl:Func>@noreturn func fooFuncNoreturn2()</decl>

<decl:Func>/**
 * Aaa.  fooFuncWithComment1.  Bbb.
 * Ccc.
 *
 * Ddd.
 */
func fooFuncWithComment1()</decl>

<decl:Func>/*!
  Aaa.  fooFuncWithComment2.  Bbb.
 */
func fooFuncWithComment2()</decl>

<decl:Func>/**
 * Aaa.  fooFuncWithComment3.  Bbb.
 */
/**
 * Ccc.
 */
func fooFuncWithComment3()</decl>

<decl:Func>/**
 * Aaa.  fooFuncWithComment4.  Bbb.
 */
/// Ddd.
func fooFuncWithComment4()</decl>

<decl:Func>/// Aaa.  fooFuncWithComment5.  Bbb.
/// Ccc.
///
/// Ddd.
func fooFuncWithComment5()</decl>

<decl:Func>/// Aaa.  redeclaredInMultipleModulesFunc1.  Bbb.
func redeclaredInMultipleModulesFunc1(_ a: <ref:TypeAlias>CInt</ref>) -> <ref:TypeAlias>CInt</ref></decl>

<decl:Protocol>/// Aaa.  FooProtocolBase.  Bbb.
protocol FooProtocolBase {

  <decl:Func>/// Aaa.  fooProtoFunc.  Bbb.
  /// Ccc.
  func fooProtoFunc()</decl>

  <decl:Func>/// Aaa.  fooProtoFuncWithExtraIndentation1.  Bbb.
  /// Ccc.
  func fooProtoFuncWithExtraIndentation1()</decl>

  <decl:Func>/**
   * Aaa.  fooProtoFuncWithExtraIndentation2.  Bbb.
   * Ccc.
   */
  func fooProtoFuncWithExtraIndentation2()</decl>
  <decl:Func>class func fooProtoClassFunc()</decl>
  <decl:Var>var fooProperty1: <ref:TypeAlias>CInt</ref> { get set }</decl>
  <decl:Var>var fooProperty2: <ref:TypeAlias>CInt</ref> { get set }</decl>
  <decl:Var>var fooProperty3: <ref:TypeAlias>CInt</ref> { get }</decl>
}</decl>
<decl:Protocol>protocol FooProtocolDerived : <ref:Protocol>FooProtocolBase</ref> {
}</decl>
<decl:Class>class FooClassBase {
  <decl:Func>class func fooBaseInstanceFunc0()</decl>
  <decl:Func>func fooBaseInstanceFunc0()</decl>
  <decl:Func>class func fooBaseInstanceFunc1(_ anObject: @unchecked <ref:Protocol>AnyObject</ref>?) -> @unchecked <ref:Class>FooClassBase</ref>?</decl>
  <decl:Func>func fooBaseInstanceFunc1(_ anObject: @unchecked <ref:Protocol>AnyObject</ref>?) -> @unchecked <ref:Class>FooClassBase</ref>?</decl>
  <decl:Func>class func fooBaseInstanceFuncOverridden()</decl>
  <decl:Func>func fooBaseInstanceFuncOverridden()</decl>
  <decl:Func>class func fooBaseClassFunc0()</decl>
}</decl>

<decl:Extension>extension <ref:Class>FooClassBase</ref> {
  <decl:Func>class func _internalMeth3() -> @unchecked <ref:Protocol>AnyObject</ref>?</decl>
  <decl:Func>func _internalMeth3() -> @unchecked <ref:Protocol>AnyObject</ref>?</decl>
}</decl>

<decl:Extension>extension <ref:Class>FooClassBase</ref> {
  <decl:Func>class func _internalMeth2() -> @unchecked <ref:Protocol>AnyObject</ref>?</decl>
  <decl:Func>func _internalMeth2() -> @unchecked <ref:Protocol>AnyObject</ref>?</decl>
  <decl:Func>class func nonInternalMeth() -> @unchecked <ref:Protocol>AnyObject</ref>?</decl>
  <decl:Func>func nonInternalMeth() -> @unchecked <ref:Protocol>AnyObject</ref>?</decl>
}</decl>

<decl:Extension>extension <ref:Class>FooClassBase</ref> {
  <decl:Func>class func _internalMeth1() -> @unchecked <ref:Protocol>AnyObject</ref>?</decl>
  <decl:Func>func _internalMeth1() -> @unchecked <ref:Protocol>AnyObject</ref>?</decl>
}</decl>

<decl:Class>/// Aaa.  FooClassDerived.  Bbb.
class FooClassDerived : <ref:Class>FooClassBase</ref>, <ref:Protocol>FooProtocolDerived</ref>, <ref:Protocol>FooProtocolBase</ref> {
  <decl:Var>var fooProperty1: <ref:TypeAlias>CInt</ref></decl>
  <decl:Var>var fooProperty2: <ref:TypeAlias>CInt</ref></decl>
  <decl:Var>var fooProperty3: <ref:TypeAlias>CInt</ref> { get }</decl>
  <decl:Func>func fooInstanceFunc0()</decl>
  <decl:Func>func fooInstanceFunc1(_ a: <ref:TypeAlias>CInt</ref>)</decl>
  <decl:Func>func fooInstanceFunc2(_ a: <ref:TypeAlias>CInt</ref>, withB b: <ref:TypeAlias>CInt</ref>)</decl>
  <decl:Func>func fooBaseInstanceFuncOverridden()</decl>
  <decl:Func>class func fooClassFunc0()</decl>

  <decl:Func>/// Aaa.  fooProtoFunc.  Bbb.
  /// Ccc.
  func fooProtoFunc()</decl>

  <decl:Func>/// Aaa.  fooProtoFuncWithExtraIndentation1.  Bbb.
  /// Ccc.
  func fooProtoFuncWithExtraIndentation1()</decl>

  <decl:Func>/**
   * Aaa.  fooProtoFuncWithExtraIndentation2.  Bbb.
   * Ccc.
   */
  func fooProtoFuncWithExtraIndentation2()</decl>
  <decl:Func>class func fooProtoClassFunc()</decl>
}</decl>
<decl:Var>var FOO_MACRO_1: <ref:TypeAlias>CInt</ref> { get }</decl>
<decl:Var>var FOO_MACRO_2: <ref:TypeAlias>CInt</ref> { get }</decl>
<decl:Var>var FOO_MACRO_3: <ref:TypeAlias>CInt</ref> { get }</decl>
<decl:Var>var FOO_MACRO_4: <ref:TypeAlias>CUnsignedInt</ref> { get }</decl>
<decl:Var>var FOO_MACRO_5: <ref:TypeAlias>CUnsignedLongLong</ref> { get }</decl>
<decl:Var>var FOO_MACRO_REDEF_1: <ref:TypeAlias>CInt</ref> { get }</decl>
<decl:Var>var FOO_MACRO_REDEF_2: <ref:TypeAlias>CInt</ref> { get }</decl>
<decl:Func>func theLastDeclInFoo()</decl>
<decl:Func>func _internalTopLevelFunc()</decl>
<decl:Struct>struct _InternalStruct {
  <decl:Var>var x: <ref:TypeAlias>CInt</ref></decl>
}</decl>
