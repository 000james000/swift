// RUN: %sil-opt %s -aa=basic-aa -aa-dump -o /dev/null | FileCheck %s

import Builtin

// Address Arguments don't alias if they are arguments to the first BB.
//
// CHECK-LABEL: @address_args_dont_alias_in_first_bb
// CHECK: PAIR #0.
// CHECK-NEXT: %0 = argument of bb0 : $*Builtin.NativeObject
// CHECK-NEXT: %0 = argument of bb0 : $*Builtin.NativeObject
// CHECK-NEXT: MustAlias
// CHECK: PAIR #1.
// CHECK-NEXT: %0 = argument of bb0
// CHECK-NEXT: %1 = argument of bb0
// CHECK-NEXT: NoAlias
sil @address_args_dont_alias_in_first_bb : $@thin (@inout Builtin.NativeObject, @inout Builtin.NativeObject) -> () {
bb0(%0 : $*Builtin.NativeObject, %1 : $*Builtin.NativeObject):
  %2 = tuple()
  return %2 : $()
}

// Address Arguments may alias if they are arguments to a BB besides the first.
//
// FIXME: Once we support looking through PHIs, we will allow for must alias here.
//
// CHECK-LABEL: @address_args_may_alias_in_non_first_bb
// CHECK-NOT: NoAlias
sil @address_args_may_alias_in_non_first_bb : $@thin (@inout Builtin.NativeObject) -> () {
bb0(%0 : $*Builtin.NativeObject):
  br bb1(%0 : $*Builtin.NativeObject, %0 : $*Builtin.NativeObject)

bb1(%1 : $*Builtin.NativeObject, %2 : $*Builtin.NativeObject):
  %3 = tuple()
  return %3 : $()
}

struct StructLvl2 {
  var tup : (Builtin.Int64, Builtin.Int32)
}

struct StructLvl1 {
  var sub : StructLvl2
  var x : Builtin.Int64
}

// Two values with different underlying alloc_stack can not alias.
//
// CHECK-LABEL: @different_alloc_stack_dont_alias

// @local_storage can not alias non @local_storage types.
// CHECK: PAIR #0.
// CHECK-NEXT: (0):   %0 = alloc_stack $StructLvl1
// CHECK-NEXT: (0):   %0 = alloc_stack $StructLvl1
// CHECK-NEXT: MustAlias
// CHECK: PAIR #1.
// CHECK-NEXT: (0):   %0 = alloc_stack $StructLvl1
// CHECK-NEXT: (1):   %0 = alloc_stack $StructLvl1
// CHECK-NEXT: NoAlias
// CHECK: PAIR #2.
// CHECK-NEXT: (0):   %0 = alloc_stack $StructLvl1
// CHECK-NEXT: (0):   %1 = alloc_stack $StructLvl1
// CHECK-NEXT: NoAlias
// CHECK: PAIR #3.
// CHECK-NEXT: (0):   %0 = alloc_stack $StructLvl1
// CHECK-NEXT: (1):   %1 = alloc_stack $StructLvl1
// CHECK-NEXT: NoAlias
// CHECK: PAIR #4.
// CHECK-NEXT: (0):   %0 = alloc_stack $StructLvl1
// CHECK-NEXT: (0):   %2 = struct_element_addr %0#1 : $*StructLvl1, #StructLvl1.sub
// CHECK-NEXT: NoAlias
// CHECK: PAIR #14.
// CHECK-NEXT: (0):   %0 = alloc_stack $StructLvl1
// CHECK-NEXT: (0):   %14 = tuple ()
// CHECK-NEXT: MayAlias

// CHECK: PAIR #15.
// CHECK-NEXT: (1):   %0 = alloc_stack $StructLvl1
// CHECK-NEXT: (1):   %0 = alloc_stack $StructLvl1
// CHECK-NEXT: MustAlias
// CHECK: PAIR #16.
// CHECK-NEXT: (1):   %0 = alloc_stack $StructLvl1
// CHECK-NEXT: (0):   %1 = alloc_stack $StructLvl1
// CHECK-NEXT: NoAlias
// CHECK: PAIR #17.
// CHECK-NEXT: (1):   %0 = alloc_stack $StructLvl1
// CHECK-NEXT: (1):   %1 = alloc_stack $StructLvl1
// CHECK-NEXT: NoAlias
// CHECK: PAIR #18.
// CHECK-NEXT: (1):   %0 = alloc_stack $StructLvl1
// CHECK-NEXT: (0):   %2 = struct_element_addr %0#1 : $*StructLvl1, #StructLvl1.sub
// CHECK-NEXT: MayAlias
// CHECK: PAIR #19.
// CHECK-NEXT: (1):   %0 = alloc_stack $StructLvl1
// CHECK-NEXT: (0):   %3 = struct_element_addr %0#1 : $*StructLvl1, #StructLvl1.x
// CHECK-NEXT: MayAlias
// CHECK: PAIR #20.
// CHECK-NEXT: (1):   %0 = alloc_stack $StructLvl1
// CHECK-NEXT: (0):   %4 = struct_element_addr %2 : $*StructLvl2, #StructLvl2.tup
// CHECK-NEXT: MayAlias

// CHECK: PAIR #50.
// CHECK-NEXT: (1):   %1 = alloc_stack $StructLvl1
// CHECK-NEXT: (0):   %9 = struct_element_addr %7 : $*StructLvl2, #StructLvl2.tup
// CHECK-NEXT: MayAlias
// CHECK: PAIR #51.
// CHECK-NEXT: (1):   %1 = alloc_stack $StructLvl1
// CHECK-NEXT: (0):   %10 = tuple_element_addr %9 : $*(Builtin.Int64, Builtin.Int32), 0
// CHECK-NEXT: MayAlias
// CHECK: PAIR #52.
// CHECK-NEXT: (1):   %1 = alloc_stack $StructLvl1
// CHECK-NEXT: (0):   %11 = tuple_element_addr %9 : $*(Builtin.Int64, Builtin.Int32), 1
// CHECK-NEXT: MayAlias
// CHECK: PAIR #53.
// CHECK-NEXT: (1):   %1 = alloc_stack $StructLvl1
// CHECK-NEXT: (0):   %14 = tuple ()
// CHECK-NEXT: MayAlias
// CHECK: PAIR #55.
// CHECK-NEXT: (0):   %2 = struct_element_addr %0#1 : $*StructLvl1, #StructLvl1.sub
// CHECK-NEXT: (0):   %3 = struct_element_addr %0#1 : $*StructLvl1, #StructLvl1.x
// CHECK-NEXT: MayAlias
// CHECK: PAIR #56.
// CHECK-NEXT: (0):   %2 = struct_element_addr %0#1 : $*StructLvl1, #StructLvl1.sub
// CHECK-NEXT: (0):   %4 = struct_element_addr %2 : $*StructLvl2, #StructLvl2.tup
// CHECK-NEXT: MayAlias
// CHECK: PAIR #57.
// CHECK-NEXT: (0):   %2 = struct_element_addr %0#1 : $*StructLvl1, #StructLvl1.sub
// CHECK-NEXT: (0):   %5 = tuple_element_addr %4 : $*(Builtin.Int64, Builtin.Int32), 0
// CHECK-NEXT: MayAlias
// CHECK: PAIR #58.
// CHECK-NEXT: (0):   %2 = struct_element_addr %0#1 : $*StructLvl1, #StructLvl1.sub
// CHECK-NEXT: (0):   %6 = tuple_element_addr %4 : $*(Builtin.Int64, Builtin.Int32), 1
// CHECK-NEXT: MayAlias
sil @different_alloc_stack_dont_alias : $@thin () -> () {
  %0 = alloc_stack $StructLvl1
  %1 = alloc_stack $StructLvl1

  %2 = struct_element_addr %0#1 : $*StructLvl1, #StructLvl1.sub
  %3 = struct_element_addr %0#1 : $*StructLvl1, #StructLvl1.x
  %4 = struct_element_addr %2 : $*StructLvl2, #StructLvl2.tup
  %5 = tuple_element_addr %4 : $*(Builtin.Int64, Builtin.Int32), 0
  %6 = tuple_element_addr %4 : $*(Builtin.Int64, Builtin.Int32), 1

  %7 = struct_element_addr %1#1 : $*StructLvl1, #StructLvl1.sub
  %8 = struct_element_addr %1#1 : $*StructLvl1, #StructLvl1.x
  %9 = struct_element_addr %7 : $*StructLvl2, #StructLvl2.tup
  %10 = tuple_element_addr %9 : $*(Builtin.Int64, Builtin.Int32), 0
  %11 = tuple_element_addr %9 : $*(Builtin.Int64, Builtin.Int32), 1

  dealloc_stack %1#0 : $*@local_storage StructLvl1
  dealloc_stack %0#0 : $*@local_storage StructLvl1

  %12 = tuple()
  return %12 : $()
}

// Function Arguments can not alias with no alias arguments or with identified
// function locals.
//
// @args_dont_alias_with_identified_function_locals
// CHECK: PAIR #1.
// CHECK-NEXT: (0):   %0 = argument of bb0 : $Builtin.NativeObject
// CHECK-NEXT: (0):   %1 = argument of bb0 : $Builtin.NativeObject
// CHECK-NEXT: MayAlias
// CHECK: PAIR #2.
// CHECK-NEXT: (0):   %0 = argument of bb0 : $Builtin.NativeObject
// CHECK-NEXT: (0):   %2 = argument of bb0 : $*Builtin.NativeObject
// CHECK-NEXT: NoAlias
// CHECK: PAIR #3.
// CHECK-NEXT: (0):   %0 = argument of bb0 : $Builtin.NativeObject
// CHECK-NEXT: (0):   %3 = alloc_stack $Builtin.NativeObject
// CHECK-NEXT: NoAlias
// CHECK: PAIR #4.
// CHECK-NEXT: (0):   %0 = argument of bb0 : $Builtin.NativeObject
// CHECK-NEXT: (1):   %3 = alloc_stack $Builtin.NativeObject
// CHECK-NEXT: NoAlias
// CHECK: PAIR #5.
// CHECK-NEXT: (0):   %0 = argument of bb0 : $Builtin.NativeObject
// CHECK-NEXT: (0):   %5 = tuple ()
// CHECK-NEXT: MayAlias
// CHECK: PAIR #7.
// CHECK-NEXT: (0):   %1 = argument of bb0 : $Builtin.NativeObject
// CHECK-NEXT: (0):   %2 = argument of bb0 : $*Builtin.NativeObject
// CHECK-NEXT: NoAlias
// CHECK: PAIR #8.
// CHECK-NEXT: (0):   %1 = argument of bb0 : $Builtin.NativeObject
// CHECK-NEXT: (0):   %3 = alloc_stack $Builtin.NativeObject
// CHECK-NEXT: NoAlias
// CHECK: PAIR #9.
// CHECK-NEXT: (0):   %1 = argument of bb0 : $Builtin.NativeObject
// CHECK-NEXT: (1):   %3 = alloc_stack $Builtin.NativeObject
// CHECK-NEXT: NoAlias
// CHECK: PAIR #12.
// CHECK-NEXT: (0):   %2 = argument of bb0 : $*Builtin.NativeObject
// CHECK-NEXT: (0):   %3 = alloc_stack $Builtin.NativeObject
// CHECK-NEXT: NoAlias
// CHECK: PAIR #13.
// CHECK-NEXT: (0):   %2 = argument of bb0 : $*Builtin.NativeObject
// CHECK-NEXT: (1):   %3 = alloc_stack $Builtin.NativeObject
// CHECK-NEXT: NoAlias
sil @args_dont_alias_with_identified_function_locals : $@thin (Builtin.NativeObject, Builtin.NativeObject, @inout Builtin.NativeObject) -> () {
bb0(%0 : $Builtin.NativeObject, %1 : $Builtin.NativeObject, %2 : $*Builtin.NativeObject):
  %3 = alloc_stack $Builtin.NativeObject
  dealloc_stack %3#0 : $*@local_storage Builtin.NativeObject
  %4 = tuple()
  return %4 : $()
}

sil @create_native_object : $@thin () -> (Builtin.NativeObject)
sil @use_native_object : $@thin (Builtin.NativeObject) -> ()

// For this test, we care about the following results:
//   %1, %3, %5, %7, %8, %9
// Check every alias query involving those.

// @escapesource_functionlocal_test_readwrite_nonescaping_alloca
// Test %0

// CHECK: PAIR #1.
// CHECK: (0):   %0 = argument of bb0 : $*Builtin.NativeObject
// CHECK: (0):   %1 = argument of bb0 : $Builtin.NativeObject
// CHECK: NoAlias
// CHECK: PAIR #3.
// CHECK: (0):   %0 = argument of bb0 : $*Builtin.NativeObject
// CHECK: (1):   %2 = alloc_stack $Builtin.NativeObject
// CHECK: NoAlias
// CHECK: PAIR #5.
// CHECK: (0):   %0 = argument of bb0 : $*Builtin.NativeObject
// CHECK: (1):   %3 = alloc_stack $Builtin.NativeObject
// CHECK: NoAlias
// CHECK: PAIR #7.
// CHECK: (0):   %0 = argument of bb0 : $*Builtin.NativeObject
// CHECK: (0):   %5 = apply %4() : $@thin () -> Builtin.NativeObject
// CHECK: NoAlias
// CHECK: PAIR #10.
// CHECK: (0):   %0 = argument of bb0 : $*Builtin.NativeObject
// CHECK: (0):   %8 = load %3#1 : $*Builtin.NativeObject
// CHECK: NoAlias
// CHECK: PAIR #11.
// CHECK: (0):   %0 = argument of bb0 : $*Builtin.NativeObject
// CHECK: (0):   %9 = apply %7(%8) : $@thin (Builtin.NativeObject) -> ()
// CHECK: NoAlias

// Test %1 (the aliasing argument)

// CHECK: PAIR #13.
// CHECK-NEXT: (0):   %1 = argument of bb0 : $Builtin.NativeObject
// CHECK-NEXT: (0):   %1 = argument of bb0 : $Builtin.NativeObject
// CHECK-NEXT: MustAlias
// CHECK: PAIR #14.
// CHECK-NEXT: (0):   %1 = argument of bb0 : $Builtin.NativeObject
// CHECK-NEXT: (0):   %2 = alloc_stack $Builtin.NativeObject
// CHECK-NEXT: NoAlias
// CHECK: PAIR #15.
// CHECK-NEXT: (0):   %1 = argument of bb0 : $Builtin.NativeObject
// CHECK-NEXT: (1):   %2 = alloc_stack $Builtin.NativeObject
// CHECK-NEXT: NoAlias
// CHECK: PAIR #16.
// CHECK-NEXT: (0):   %1 = argument of bb0 : $Builtin.NativeObject
// CHECK-NEXT: (0):   %3 = alloc_stack $Builtin.NativeObject
// CHECK-NEXT: NoAlias
// CHECK: PAIR #17.
// CHECK-NEXT: (0):   %1 = argument of bb0 : $Builtin.NativeObject
// CHECK-NEXT: (1):   %3 = alloc_stack $Builtin.NativeObject
// CHECK-NEXT: NoAlias
// CHECK: PAIR #19.
// CHECK-NEXT: (0):   %1 = argument of bb0 : $Builtin.NativeObject
// CHECK-NEXT: (0):   %5 = apply %4() : $@thin () -> Builtin.NativeObject
// CHECK-NEXT: MayAlias
// CHECK: PAIR #20.
// CHECK-NEXT: (0):   %1 = argument of bb0 : $Builtin.NativeObject
// CHECK-NEXT: (0):   %6 = load %0 : $*Builtin.NativeObject
// CHECK-NEXT: MayAlias
// CHECK: PAIR #22.
// CHECK-NEXT: (0):   %1 = argument of bb0 : $Builtin.NativeObject
// CHECK-NEXT: (0):   %8 = load %3#1 : $*Builtin.NativeObject
// CHECK-NEXT: MayAlias
// CHECK: PAIR #23.
// CHECK-NEXT: (0):   %1 = argument of bb0 : $Builtin.NativeObject
// CHECK-NEXT: (0):   %9 = apply %7(%8) : $@thin (Builtin.NativeObject) -> ()
// CHECK-NEXT: MayAlias

// Test %2
// CHECK: PAIR #38.
// CHECK: (1):   %2 = alloc_stack $Builtin.NativeObject
// CHECK: (1):   %3 = alloc_stack $Builtin.NativeObject
// CHECK: NoAlias
// CHECK: PAIR #40.
// CHECK: (1):   %2 = alloc_stack $Builtin.NativeObject
// CHECK: (0):   %5 = apply %4() : $@thin () -> Builtin.NativeObject
// CHECK: NoAlias
// CHECK: PAIR #41.
// CHECK: (1):   %2 = alloc_stack $Builtin.NativeObject
// CHECK: (0):   %6 = load %0 : $*Builtin.NativeObject
// CHECK: NoAlias
// CHECK: PAIR #43.
// CHECK: (1):   %2 = alloc_stack $Builtin.NativeObject
// CHECK: (0):   %8 = load %3#1 : $*Builtin.NativeObject
// CHECK: NoAlias
// CHECK: PAIR #44.
// CHECK: (1):   %2 = alloc_stack $Builtin.NativeObject
// CHECK: (0):   %9 = apply %7(%8) : $@thin (Builtin.NativeObject) -> ()
// CHECK: NoAlias

// Test %3 (the escaping alloca).

// CHECK: PAIR #49.
// CHECK-NEXT: (0):   %3 = alloc_stack $Builtin.NativeObject
// CHECK-NEXT: (0):   %5 = apply %4() : $@thin () -> Builtin.NativeObject
// CHECK-NEXT: NoAlias
// CHECK: PAIR #50.
// CHECK-NEXT: (0):   %3 = alloc_stack $Builtin.NativeObject
// CHECK-NEXT: (0):   %6 = load %0 : $*Builtin.NativeObject
// CHECK-NEXT: NoAlias
// CHECK: PAIR #52.
// CHECK-NEXT: (0):   %3 = alloc_stack $Builtin.NativeObject
// CHECK-NEXT: (0):   %8 = load %3#1 : $*Builtin.NativeObject
// CHECK-NEXT: NoAlias
// CHECK: PAIR #53.
// CHECK-NEXT: (0):   %3 = alloc_stack $Builtin.NativeObject
// CHECK-NEXT: (0):   %9 = apply %7(%8) : $@thin (Builtin.NativeObject) -> ()
// CHECK-NEXT: NoAlias
// CHECK: PAIR #57.
// CHECK-NEXT: (1):   %3 = alloc_stack $Builtin.NativeObject
// CHECK-NEXT: (0):   %5 = apply %4() : $@thin () -> Builtin.NativeObject
// CHECK-NEXT: NoAlias
// CHECK: PAIR #58.
// CHECK-NEXT: (1):   %3 = alloc_stack $Builtin.NativeObject
// CHECK-NEXT: (0):   %6 = load %0 : $*Builtin.NativeObject
// CHECK-NEXT: NoAlias
// CHECK: PAIR #60.
// CHECK-NEXT: (1):   %3 = alloc_stack $Builtin.NativeObject
// CHECK-NEXT: (0):   %8 = load %3#1 : $*Builtin.NativeObject
// CHECK-NEXT: NoAlias
// CHECK: PAIR #61.
// CHECK-NEXT: (1):   %3 = alloc_stack $Builtin.NativeObject
// CHECK-NEXT: (0):   %9 = apply %7(%8) : $@thin (Builtin.NativeObject) -> ()
// CHECK-NEXT: NoAlias

// Test %5 (the read write apply inst).

// CHECK: PAIR #70.
// CHECK-NEXT: (0):   %5 = apply %4() : $@thin () -> Builtin.NativeObject
// CHECK-NEXT: (0):   %5 = apply %4() : $@thin () -> Builtin.NativeObject
// CHECK-NEXT: MustAlias
// CHECK: PAIR #71.
// CHECK-NEXT: (0):   %5 = apply %4() : $@thin () -> Builtin.NativeObject
// CHECK-NEXT: (0):   %6 = load %0 : $*Builtin.NativeObject
// CHECK-NEXT: MayAlias
// CHECK: PAIR #72.
// CHECK-NEXT: (0):   %5 = apply %4() : $@thin () -> Builtin.NativeObject
// CHECK-NEXT: function_ref use_native_object
// CHECK-NEXT:   %7 = function_ref @use_native_object : $@thin (Builtin.NativeObject) -> ()
// CHECK-NEXT: MayAlias
// CHECK: PAIR #73.
// CHECK-NEXT: (0):   %5 = apply %4() : $@thin () -> Builtin.NativeObject
// CHECK-NEXT: (0):   %8 = load %3#1 : $*Builtin.NativeObject
// CHECK-NEXT: MayAlias
// CHECK: PAIR #74.
// CHECK-NEXT: (0):   %5 = apply %4() : $@thin () -> Builtin.NativeObject
// CHECK-NEXT: (0):   %9 = apply %7(%8) : $@thin (Builtin.NativeObject) -> ()
// CHECK-NEXT: MayAlias

// Test %8 (the escaping load)

// CHECK: PAIR #85.
// CHECK-NEXT: (0):   %8 = load %3#1 : $*Builtin.NativeObject
// CHECK-NEXT: (0):   %8 = load %3#1 : $*Builtin.NativeObject
// CHECK-NEXT: MustAlias
// CHECK: PAIR #86.
// CHECK-NEXT: (0):   %8 = load %3#1 : $*Builtin.NativeObject
// CHECK-NEXT: (0):   %9 = apply %7(%8) : $@thin (Builtin.NativeObject) -> ()
// CHECK-NEXT: MayAlias
sil @escapesource_functionlocal_test_escapesource_nonescapinglocal : $@thin (@inout Builtin.NativeObject, Builtin.NativeObject) -> () {
bb0(%0 : $*Builtin.NativeObject, %1 : $Builtin.NativeObject):
  %2 = alloc_stack $Builtin.NativeObject
  %3 = alloc_stack $Builtin.NativeObject
  %4 = function_ref @create_native_object : $@thin () -> Builtin.NativeObject
  %5 = apply %4() : $@thin () -> Builtin.NativeObject
  %6 = load %0 : $*Builtin.NativeObject
  %7 = function_ref @use_native_object : $@thin (Builtin.NativeObject) -> ()
  %8 = load %3#1 : $*Builtin.NativeObject
  %9 = apply %7(%8) : $@thin (Builtin.NativeObject) -> ()
  dealloc_stack %3#0 : $*@local_storage Builtin.NativeObject
  dealloc_stack %2#0 : $*@local_storage Builtin.NativeObject
  %12 = tuple ()
  return %12 : $()
}

// CHECK-LABEL: @projections_from_the_same_source_with_the_same_projection_path_mustalias
// CHECK: PAIR #33.
// CHECK-NEXT: (0):   %3 = tuple_element_addr %2 : $*(Builtin.Int64, Builtin.Int32), 1
// CHECK-NEXT: (0):   %6 = tuple_element_addr %5 : $*(Builtin.Int64, Builtin.Int32), 1
// CHECK-NEXT: MustAlias
sil @projections_from_the_same_source_with_the_same_projection_path_mustalias : $@thin () -> () {
  %0 = alloc_stack $StructLvl1
  %1 = struct_element_addr %0#1 : $*StructLvl1, #StructLvl1.sub
  %2 = struct_element_addr %1 : $*StructLvl2, #StructLvl2.tup
  %3 = tuple_element_addr %2 : $*(Builtin.Int64, Builtin.Int32), 1
  %4 = struct_element_addr %0#1 : $*StructLvl1, #StructLvl1.sub
  %5 = struct_element_addr %4 : $*StructLvl2, #StructLvl2.tup
  %6 = tuple_element_addr %5 : $*(Builtin.Int64, Builtin.Int32), 1
  dealloc_stack %0#0 : $*@local_storage StructLvl1
  %7 = tuple()
  return %7 : $()
}

var swift_global1 : Builtin.Int32
var swift_global2 : Builtin.Int32
sil_global public @sil_global1 : $Builtin.Int32
sil_global public @sil_global2 : $Builtin.Int32

// CHECK-LABEL: @globals_dont_alias
// CHECK: PAIR #0.
// CHECK-NEXT: (0):   %0 = global_addr #swift_global1 : $*Builtin.Int32
// CHECK-NEXT: (0):   %0 = global_addr #swift_global1 : $*Builtin.Int32
// CHECK-NEXT: MustAlias
// CHECK: PAIR #1.
// CHECK-NEXT: (0):   %0 = global_addr #swift_global1 : $*Builtin.Int32
// CHECK-NEXT: (0):   %1 = global_addr #swift_global2 : $*Builtin.Int32
// CHECK-NEXT: NoAlias
// CHECK: PAIR #2.
// CHECK-NEXT: (0):   %0 = global_addr #swift_global1 : $*Builtin.Int32
// CHECK-NEXT: (0):   %2 = sil_global_addr @sil_global1 : $*Builtin.Int32
// CHECK-NEXT: NoAlias
// CHECK: PAIR #3.
// CHECK-NEXT: (0):   %0 = global_addr #swift_global1 : $*Builtin.Int32
// CHECK-NEXT: (0):   %3 = sil_global_addr @sil_global2 : $*Builtin.Int32
// CHECK-NEXT: NoAlias
sil @globals_dont_alias : $@thin () -> () {
  %0 = global_addr #swift_global1 : $*Builtin.Int32
  %1 = global_addr #swift_global2 : $*Builtin.Int32
  %2 = sil_global_addr @sil_global1 : $*Builtin.Int32
  %3 = sil_global_addr @sil_global2 : $*Builtin.Int32
  %4 = tuple()
  return %4 : $()
}
