// RUN: %target-sil-opt %s -side-effects -sil-print-escapes -o /dev/null | FileCheck %s

// REQUIRES: asserts

sil_stage canonical

import Builtin
import Swift
import SwiftShims

class X {
}

class Y {
	@sil_stored var x: X

	init(newx: X)
}

struct Pointer {
	let y : Y
}

enum PointerEnum {
	case B(Pointer, Pointer)
}

class LinkedNode {
	@sil_stored var next: LinkedNode;

	init(_ n: LinkedNode)
}

struct MyError : ErrorType {
}

final class ErrorClass : ErrorType {
}


// Sanity check with a simple function.

// CHECK-LABEL: CG of test_simple
// CHECK-NEXT:    Arg %0 Esc: A0, Succ: (%0.1)
// CHECK-NEXT:    Con %0.1 Esc: A0, Succ: %2
// CHECK-NEXT:    Arg %1 Esc: G, A0, A1, Succ: 
// CHECK-NEXT:    Val %2 Esc: A0, Succ: (%2.1)
// CHECK-NEXT:    Con %2.1 Esc: G, A0, Succ: %1
// CHECK-NEXT:  End
sil @test_simple : $@convention(thin) (@inout Y, @owned X) -> () {
bb0(%0 : $*Y, %1 : $X):
  %2 = alloc_ref $Y
  %3 = ref_element_addr %2 : $Y, #Y.x
  store %1 to %3 : $*X
  %5 = load %0 : $*Y
  store %2 to %0 : $*Y
  strong_release %5 : $Y
  %7 = tuple ()
  return %7 : $()
}

// Test if a defering edge is created for a block argument.

// CHECK-LABEL: CG of deferingEdge
// CHECK-NEXT:    Arg %0 Esc: R, A0, Succ: (%3.1)
// CHECK-NEXT:    Arg %1 Esc: R, A0, A1, Succ: 
// CHECK-NEXT:    Val %3 Esc: Succ: %0
// CHECK-NEXT:    Con %3.1 Esc: R, A0, Succ: %1
// CHECK-NEXT:    Ret %6 Esc: R, Succ: %0
// CHECK-NEXT:  End
sil @deferingEdge : $@convention(thin) (@owned LinkedNode, @owned LinkedNode) -> @owned LinkedNode {
bb0(%0 : $LinkedNode, %1 : $LinkedNode):
  br bb1(%0 : $LinkedNode)

bb1(%2 : $LinkedNode):
  %3 = ref_element_addr %2 : $LinkedNode, #LinkedNode.next
  store %1 to %3 : $*LinkedNode
  return %0 : $LinkedNode
}

// A linear chain of assignments is collapsed to a single node.

// CHECK-LABEL: CG of test_linked_list
// CHECK-NEXT:    Arg %0 Esc: R, A0, Succ: (%1.1)
// CHECK-NEXT:    Val %1 Esc: R, A0, Succ: (%1.1)
// CHECK-NEXT:    Con %1.1 Esc: R, A0, Succ: %0, %1, %4
// CHECK-NEXT:    Val %4 Esc: R, A0, Succ: (%1.1)
// CHECK-NEXT:    Val %7 Esc: Succ: (%1.1)
// CHECK-NEXT:    Val %11 Esc: Succ: %13, %7
// CHECK-NEXT:    Val %13 Esc: R, Succ: (%1.1), %1.1
// CHECK-NEXT:    Ret %15 Esc: R, Succ: %13
// CHECK-NEXT:  End
sil hidden @test_linked_list : $@convention(thin) (@owned LinkedNode) -> @owned LinkedNode {
bb0(%0 : $LinkedNode):
  %1 = alloc_ref $LinkedNode
  %2 = ref_element_addr %1 : $LinkedNode, #LinkedNode.next
  store %0 to %2 : $*LinkedNode
  %4 = alloc_ref $LinkedNode
  %5 = ref_element_addr %4 : $LinkedNode, #LinkedNode.next
  store %1 to %5 : $*LinkedNode
  %7 = alloc_ref $LinkedNode
  %8 = ref_element_addr %7 : $LinkedNode, #LinkedNode.next
  store %4 to %8 : $*LinkedNode
  br bb1(%7 : $LinkedNode)

// This "x = x.next" loop let's the chain collapse to a single node.
bb1(%11 : $LinkedNode):
  %12 = ref_element_addr %11 : $LinkedNode, #LinkedNode.next
  %13 = load %12 : $*LinkedNode
  cond_br undef, bb1(%13 : $LinkedNode), bb2

bb2:
  return %13 : $LinkedNode
}

// The same example as above but distributed over two functions.

// CHECK-LABEL: CG of create_chain
// CHECK-NEXT:    Arg %0 Esc: R, A0, Succ: (%1.1)
// CHECK-NEXT:    Val %1 Esc: R, A0, Succ: (%1.1)
// CHECK-NEXT:    Con %1.1 Esc: R, A0, Succ: %0, %4, %1
// CHECK-NEXT:    Val %4 Esc: R, A0, Succ: (%1.1)
// CHECK-NEXT:    Val %7 Esc: Succ: (%1.1)
// CHECK-NEXT:    Val %11 Esc: R, Succ: (%1.1), %1.1
// CHECK-NEXT:    Ret %12 Esc: R, Succ: %11
// CHECK-NEXT:  End
sil @create_chain : $@convention(thin) (@owned LinkedNode) -> @owned LinkedNode {
bb0(%0 : $LinkedNode):
  %1 = alloc_ref $LinkedNode
  %2 = ref_element_addr %1 : $LinkedNode, #LinkedNode.next
  store %0 to %2 : $*LinkedNode
  %4 = alloc_ref $LinkedNode
  %5 = ref_element_addr %4 : $LinkedNode, #LinkedNode.next
  store %1 to %5 : $*LinkedNode
  %7 = alloc_ref $LinkedNode
  %8 = ref_element_addr %7 : $LinkedNode, #LinkedNode.next
  store %4 to %8 : $*LinkedNode

  %10 = function_ref @loadNext : $@convention(thin) (@owned LinkedNode) -> @owned LinkedNode
  %11 = apply %10(%7) : $@convention(thin) (@owned LinkedNode) -> @owned LinkedNode
  return %11 : $LinkedNode
}

// CHECK-LABEL: CG of loadNext
// CHECK-NEXT:    Arg %0 Esc: A0, Succ: (%2.1)
// CHECK-NEXT:    Val %2 Esc: Succ: %4, %0
// CHECK-NEXT:    Con %2.1 Esc: R, A0, Succ: (%2.1)
// CHECK-NEXT:    Val %4 Esc: R, Succ: (%2.1), %2.1
// CHECK-NEXT:    Ret %6 Esc: R, Succ: %4
// CHECK-NEXT:  End
sil @loadNext : $@convention(thin) (@owned LinkedNode) -> @owned LinkedNode {
bb0(%0 : $LinkedNode):
  br bb1(%0 : $LinkedNode)

bb1(%2 : $LinkedNode):
  %3 = ref_element_addr %2 : $LinkedNode, #LinkedNode.next
  %4 = load %3 : $*LinkedNode
  cond_br undef, bb1(%4 : $LinkedNode), bb2

bb2:
  return %4 : $LinkedNode
}

// Content nodes in the callee are duplicated in the caller.

// CHECK-LABEL: CG of call_load_next3
// CHECK-NEXT:    Arg %0 Esc: A0, Succ: (%0.1)
// CHECK-NEXT:    Con %0.1 Esc: A0, Succ: (%0.2)
// CHECK-NEXT:    Con %0.2 Esc: A0, Succ: (%0.3)
// CHECK-NEXT:    Con %0.3 Esc: R, A0, Succ: 
// CHECK-NEXT:    Val %2 Esc: R, Succ: %0.3
// CHECK-NEXT:    Ret %3 Esc: R, Succ: %2
// CHECK-NEXT:  End
sil @call_load_next3 : $@convention(thin) (@owned LinkedNode) -> @owned LinkedNode {
bb0(%0 : $LinkedNode):
  %1 = function_ref @load_next3 : $@convention(thin) (@owned LinkedNode) -> @owned LinkedNode
  %2 = apply %1(%0) : $@convention(thin) (@owned LinkedNode) -> @owned LinkedNode 
  return %2 : $LinkedNode
}

// CHECK-LABEL: CG of load_next3
// CHECK-NEXT:    Arg %0 Esc: A0, Succ: (%0.1)
// CHECK-NEXT:    Con %0.1 Esc: A0, Succ: (%0.2)
// CHECK-NEXT:    Con %0.2 Esc: A0, Succ: (%0.3)
// CHECK-NEXT:    Con %0.3 Esc: R, A0, Succ: 
// CHECK-NEXT:    Ret %7 Esc: R, Succ: %0.3
// CHECK-NEXT:  End
sil @load_next3 : $@convention(thin) (@owned LinkedNode) -> @owned LinkedNode {
bb0(%0 : $LinkedNode):
  %1 = ref_element_addr %0 : $LinkedNode, #LinkedNode.next
  %2 = load %1 : $*LinkedNode
  %3 = ref_element_addr %2 : $LinkedNode, #LinkedNode.next
  %4 = load %3 : $*LinkedNode
  %5 = ref_element_addr %4 : $LinkedNode, #LinkedNode.next
  %6 = load %5 : $*LinkedNode
  return %6 : $LinkedNode
}

sil_global @global_pointer : $Pointer
sil_global @global_x : $X

// The argument escapes because it is stored to a global variable in the callee.

// CHECK-LABEL: CG of call_store_pointer
// CHECK-NEXT:    Arg %0 Esc: G, A0, Succ: (%0.1)
// CHECK-NEXT:    Con %0.1 Esc: G, R, A0, Succ: 
// CHECK-NEXT:    Ret %7 Esc: R, Succ: %0.1
// CHECK-NEXT:  End
sil @call_store_pointer : $@convention(thin) (@owned Pointer) -> @owned X {
bb0(%0 : $Pointer):
  debug_value %0 : $Pointer
  %2 = function_ref @store_pointer : $@convention(thin) (@owned Pointer) -> ()
  %3 = struct_extract %0 : $Pointer, #Pointer.y
  %5 = apply %2(%0) : $@convention(thin) (@owned Pointer) -> ()
  %6 = ref_element_addr %3 : $Y, #Y.x
  %7 = load %6 : $*X
  return %7 : $X
}

// CHECK-LABEL: CG of store_pointer
// CHECK-NEXT:    Arg %0 Esc: G, A0, Succ: 
// CHECK-NEXT:    Val %1 Esc: G, Succ: (%1.1)
// CHECK-NEXT:    Con %1.1 Esc: G, Succ: %0
// CHECK-NEXT:  End
sil  @store_pointer : $@convention(thin) (@owned Pointer) -> () {
bb0(%0 : $Pointer):
  %1 = global_addr @global_pointer : $*Pointer
  store %0 to %1 : $*Pointer
  %3 = tuple ()
  return %3 : $()
}

// The argument does not escape because only the content is stored to a
// global variable in the callee.

// CHECK-LABEL: CG of store_content
// CHECK-NEXT:    Arg %0 Esc: A0, Succ: (%0.1)
// CHECK-NEXT:    Con %0.1 Esc: G, A0, Succ: 
// CHECK-NEXT:    Val %1 Esc: G, Succ: (%1.1)
// CHECK-NEXT:    Con %1.1 Esc: G, Succ: %0.1
// CHECK-NEXT:  End
sil  @store_content : $@convention(thin) (@owned Pointer) -> () {
bb0(%0 : $Pointer):
  %1 = global_addr @global_x : $*X
  %3 = struct_extract %0 : $Pointer, #Pointer.y
  %4 = ref_element_addr %3 : $Y, #Y.x
  %5 = load %4 : $*X
  store %5 to %1 : $*X
  %11 = tuple ()
  return %11 : $()
}

// CHECK-LABEL: CG of call_store_content
// CHECK-NEXT:    Arg %0 Esc: A0, Succ: (%0.1)
// CHECK-NEXT:    Con %0.1 Esc: G, R, A0, Succ: 
// CHECK-NEXT:    Ret %6 Esc: R, Succ: %0.1
// CHECK-NEXT:  End
sil hidden @call_store_content : $@convention(thin) (@owned Pointer) -> @owned X {
bb0(%0 : $Pointer):
  %2 = function_ref @store_content : $@convention(thin) (@owned Pointer) -> ()
  %3 = struct_extract %0 : $Pointer, #Pointer.y
  %5 = apply %2(%0) : $@convention(thin) (@owned Pointer) -> ()
  %6 = ref_element_addr %3 : $Y, #Y.x
  %7 = load %6 : $*X
  return %7 : $X
}

// Test partial_apply. The partial_apply and the boxes do not escape.
// The X parameter does escape because it is stored in Y and the release
// of Y's box _could_ capture Y.x in Y's deinit.

// CHECK-LABEL: CG of test_partial_apply
// CHECK-NEXT:    Arg %1 Esc: G, A1, A2, Succ: 
// CHECK-NEXT:    Arg %2 Esc: A2, Succ: (%5.2)
// CHECK-NEXT:    Val %3 Esc: Succ: (%5.1)
// CHECK-NEXT:    Val %5 Esc: Succ: (%5.1)
// CHECK-NEXT:    Con %5.1 Esc: Succ: %2
// CHECK-NEXT:    Con %5.2 Esc: G, A2, Succ: %1
// CHECK-NEXT:    Val %10 Esc: Succ: %3, %5
// CHECK-NEXT:  End
sil @test_partial_apply : $@convention(thin) (Int64, @owned X, @owned Y) -> Int64 {
bb0(%0 : $Int64, %1 : $X, %2 : $Y):
  %3 = alloc_box $Int64
  store %0 to %3#1 : $*Int64
  %5 = alloc_box $Y
  store %2 to %5#1 : $*Y
  %7 = function_ref @closure1 : $@convention(thin) (@owned X, @owned @box Int64, @inout Int64, @owned @box Y, @inout Y) -> Int64
  strong_retain %3#0 : $@box Int64
  strong_retain %5#0 : $@box Y
  %10 = partial_apply %7(%3#0, %3#1, %5#0, %5#1) : $@convention(thin) (@owned X, @owned @box Int64, @inout Int64, @owned @box Y, @inout Y) -> Int64
  strong_retain %10 : $@callee_owned (@owned X) -> Int64
  %12 = apply %10(%1) : $@callee_owned (@owned X) -> Int64
  strong_release %10 : $@callee_owned (@owned X) -> Int64
  strong_release %5#0 : $@box Y
  strong_release %3#0 : $@box Int64
  return %12 : $Int64
}

// CHECK-LABEL: CG of closure1
// CHECK-NEXT:    Arg %0 Esc: G, A0, A3, A4, Succ: 
// CHECK-NEXT:    Arg %1 Esc: A1, Succ: (%1.1)
// CHECK-NEXT:    Con %1.1 Esc: A1, Succ: (%1.2)
// CHECK-NEXT:    Con %1.2 Esc: G, A1, Succ: 
// CHECK-NEXT:    Arg %2 Esc: A2, Succ: 
// CHECK-NEXT:    Arg %3 Esc: A3, Succ: (%7.1)
// CHECK-NEXT:    Arg %4 Esc: A4, Succ: (%7.1)
// CHECK-NEXT:    Val %7 Esc: Succ: %3, %4
// CHECK-NEXT:    Con %7.1 Esc: A3, A4, Succ: (%7.2)
// CHECK-NEXT:    Con %7.2 Esc: G, A3, A4, Succ: %0
// CHECK-NEXT:  End
sil @closure1 : $@convention(thin) (@owned X, @owned @box Int64, @inout Int64, @owned @box Y, @inout Y) -> Int64 {
bb0(%0 : $X, %1 : $@box Int64, %2 : $*Int64, %3 : $@box Y, %4 : $*Y):
  %5 = load %2 : $*Int64
  %6 = function_ref @closure2 : $@convention(thin) (@owned X, @owned @box Y, @inout Y) -> ()
  %7 = partial_apply %6(%3, %4) : $@convention(thin) (@owned X, @owned @box Y, @inout Y) -> ()
  %8 = apply %7(%0) : $@callee_owned (@owned X) -> ()
  strong_release %1 : $@box Int64
  return %5 : $Int64
}

// CHECK-LABEL: CG of closure2
// CHECK-NEXT:    Arg %0 Esc: A0, A2, Succ: 
// CHECK-NEXT:    Arg %1 Esc: A1, Succ: (%1.1)
// CHECK-NEXT:    Con %1.1 Esc: A1, Succ: (%1.2)
// CHECK-NEXT:    Con %1.2 Esc: G, A1, Succ: 
// CHECK-NEXT:    Arg %2 Esc: A2, Succ: (%2.1)
// CHECK-NEXT:    Con %2.1 Esc: A2, Succ: (%2.2)
// CHECK-NEXT:    Con %2.2 Esc: A2, Succ: %0
// CHECK-NEXT:  End
sil @closure2 : $@convention(thin) (@owned X, @owned @box Y, @inout Y) -> () {
bb0(%0 : $X, %1 : $@box Y, %2 : $*Y):
  %3 = load %2 : $*Y
  %4 = ref_element_addr %3 : $Y, #Y.x
  store %0 to %4 : $*X
  strong_release %1 : $@box Y
  %7 = tuple ()
  return %7 : $()
}

// Test partial_apply. The box escapes in the callee.

// CHECK-LABEL: CG of test_escaped_box
// CHECK-NEXT:    Val %1 Esc: G, Succ: (%5.1)
// CHECK-NEXT:    Val %5 Esc: G, Succ: %1
// CHECK-NEXT:    Con %5.1 Esc: G, Succ: (%5.2)
// CHECK-NEXT:    Con %5.2 Esc: G, Succ: 
// CHECK-NEXT:  End
sil @test_escaped_box : $@convention(thin) (Int64) -> Int64 {
bb0(%0 : $Int64):
  %1 = alloc_box $Int64
  store %0 to %1#1 : $*Int64

  %3 = function_ref @let_box_escape : $@convention(thin) (@owned @box Int64, @inout Int64) -> Int64
  strong_retain %1#0 : $@box Int64
  %5 = partial_apply %3(%1#0, %1#1) : $@convention(thin) (@owned @box Int64, @inout Int64) -> Int64
  strong_retain %5 : $@callee_owned () -> Int64
  %7 = apply %5() : $@callee_owned () -> Int64
  strong_release %5 : $@callee_owned () -> Int64
  strong_release %1#0 : $@box Int64
  return %7 : $Int64
}


// CHECK-LABEL: CG of let_box_escape
// CHECK-NEXT:    Arg %0 Esc: G, A0, Succ: (%0.1)
// CHECK-NEXT:    Con %0.1 Esc: G, A0, Succ: (%0.2)
// CHECK-NEXT:    Con %0.2 Esc: G, A0, Succ: 
// CHECK-NEXT:    Arg %1 Esc: A1, Succ: 
// CHECK-NEXT:  End
sil @let_box_escape : $@convention(thin) (@owned @box Int64, @inout Int64) -> Int64 {
bb0(%0 : $@box Int64, %1 : $*Int64):
  %2 = load %1 : $*Int64

  %3 = function_ref @takebox : $@convention(thin) (@owned @box Int64) -> ()
  %4 = apply %3(%0) : $@convention(thin) (@owned @box Int64) -> ()
  strong_release %0 : $@box Int64
  return %2 : $Int64
}

sil @takebox :  $@convention(thin) (@owned @box Int64) -> ()


// The partial_apply itself escapes and therefore also the box escapes.

// CHECK-LABEL: CG of test_escaped_partial_apply
// CHECK-NEXT:    Val %1 Esc: G, Succ: 
// CHECK-NEXT:    Val %5 Esc: G, Succ: %1
// CHECK-NEXT:  End
sil @test_escaped_partial_apply : $@convention(thin) (Int64) -> () {
bb0(%0 : $Int64):
  %1 = alloc_box $Int64
  store %0 to %1#1 : $*Int64
  %3 = function_ref @closure3 : $@convention(thin) (@owned @box Int64, @inout Int64) -> Int64
  strong_retain %1#0 : $@box Int64
  %5 = partial_apply %3(%1#0, %1#1) : $@convention(thin) (@owned @box Int64, @inout Int64) -> Int64
  strong_retain %5 : $@callee_owned () -> Int64
  %6 = function_ref @take_partial_apply : $@convention(thin) (@owned @callee_owned () -> Int64) -> ()
  %7 = apply %6(%5) : $@convention(thin) (@owned @callee_owned () -> Int64) -> ()
  %8 = tuple()
  return %8 : $()
}

// CHECK-LABEL: CG of closure3
// CHECK-NEXT:    Arg %0 Esc: A0, Succ: (%0.1)
// CHECK-NEXT:    Con %0.1 Esc: A0, Succ: (%0.2)
// CHECK-NEXT:    Con %0.2 Esc: G, A0, Succ: 
// CHECK-NEXT:  End
sil @closure3 : $@convention(thin) (@owned @box Int64, @inout Int64) -> Int64 {
bb0(%0 : $@box Int64, %1 : $*Int64):
  %2 = load %1 : $*Int64
  strong_release %0 : $@box Int64
  return %2 : $Int64
}

sil @take_partial_apply : $@convention(thin) (@owned @callee_owned () -> Int64) -> ()

// Test if the global escape state is propagated through recursive functions.

sil_global @global_ln : $LinkedNode

// CHECK-LABEL: CG of load_next_recursive
// CHECK-NEXT:    Arg %0 Esc: A0, Succ: (%0.1)
// CHECK-NEXT:    Con %0.1 Esc: G, R, A0, Succ: (%4.1)
// CHECK-NEXT:    Val %4 Esc: R, Succ: (%4.1), %0.1, %4.1
// CHECK-NEXT:    Con %4.1 Esc: G, R, A0, Succ: (%4.1)
// CHECK-NEXT:    Ret %5 Esc: R, Succ: %4
// CHECK-NEXT:  End
sil @load_next_recursive : $@convention(thin) (@owned LinkedNode) -> @owned LinkedNode {
bb0(%0 : $LinkedNode):
  %1 = ref_element_addr %0 : $LinkedNode, #LinkedNode.next
  %2 = load %1 : $*LinkedNode
  %3 = function_ref @let_escape : $@convention(thin) (@owned LinkedNode) -> @owned LinkedNode
  %4 = apply %3(%2) : $@convention(thin) (@owned LinkedNode) -> @owned LinkedNode
  return %4 : $LinkedNode
}

// CHECK-LABEL: CG of let_escape
// CHECK-NEXT:    Arg %0 Esc: G, R, A0, Succ: (%0.1)
// CHECK-NEXT:    Con %0.1 Esc: G, R, A0, Succ: (%0.1)
// CHECK-NEXT:    Val %1 Esc: G, Succ: (%1.1)
// CHECK-NEXT:    Con %1.1 Esc: G, Succ: %0
// CHECK-NEXT:    Val %4 Esc: R, Succ: (%0.1), %0, %0.1
// CHECK-NEXT:    Ret %5 Esc: R, Succ: %4
// CHECK-NEXT:  End
sil @let_escape : $@convention(thin) (@owned LinkedNode) -> @owned LinkedNode {
bb0(%0 : $LinkedNode):
  %1 = global_addr @global_ln : $*LinkedNode
  store %0 to %1 : $*LinkedNode
  %3 = function_ref @return_same : $@convention(thin) (@owned LinkedNode) -> @owned LinkedNode
  %4 = apply %3(%0) : $@convention(thin) (@owned LinkedNode) -> @owned LinkedNode
  return %4 : $LinkedNode
}

// CHECK-LABEL: CG of return_same
// CHECK-NEXT:    Arg %0 Esc: R, A0, Succ: (%0.1)
// CHECK-NEXT:    Con %0.1 Esc: G, R, A0, Succ: (%0.1)
// CHECK-NEXT:    Val %3 Esc: R, Succ: (%0.1), %0.1
// CHECK-NEXT:    Val %5 Esc: R, Succ: %3, %0
// CHECK-NEXT:    Ret %6 Esc: R, Succ: %5
// CHECK-NEXT:  End
sil @return_same : $@convention(thin) (@owned LinkedNode) -> @owned LinkedNode {
bb0(%0 : $LinkedNode):
  cond_br undef, bb1, bb2(%0 : $LinkedNode)

bb1:
  %2 = function_ref @load_next_recursive : $@convention(thin) (@owned LinkedNode) -> @owned LinkedNode
  %3 = apply %2(%0) : $@convention(thin) (@owned LinkedNode) -> @owned LinkedNode
  br bb2(%3 : $LinkedNode)

bb2(%5 : $LinkedNode):
  return %5 : $LinkedNode
}

// Another recursion test.

// CHECK-LABEL: CG of loadNext2
// CHECK-NEXT:    Arg %0 Esc: A0, Succ: (%0.1)
// CHECK-NEXT:    Con %0.1 Esc: A0, Succ: (%0.2)
// CHECK-NEXT:    Con %0.2 Esc: R, A0, Succ: (%4.1)
// CHECK-NEXT:    Val %4 Esc: R, Succ: %0.2, %4.1
// CHECK-NEXT:    Con %4.1 Esc: R, A0, Succ: (%4.1)
// CHECK-NEXT:    Ret %5 Esc: R, Succ: %4
// CHECK-NEXT:  End
sil @loadNext2 : $@convention(thin) (@owned LinkedNode) -> @owned LinkedNode {
bb0(%0 : $LinkedNode):
  %1 = ref_element_addr %0 : $LinkedNode, #LinkedNode.next
  %2 = load %1 : $*LinkedNode
  %3 = function_ref @returnNext2 : $@convention(thin) (@owned LinkedNode) -> @owned LinkedNode
  %4 = apply %3(%2) : $@convention(thin) (@owned LinkedNode) -> @owned LinkedNode
  return %4 : $LinkedNode
}

// CHECK-LABEL: CG of returnNext2
// CHECK-NEXT:    Arg %0 Esc: A0, Succ: (%0.1)
// CHECK-NEXT:    Con %0.1 Esc: R, A0, Succ: (%0.2)
// CHECK-NEXT:    Con %0.2 Esc: R, A0, Succ: (%0.2)
// CHECK-NEXT:    Val %3 Esc: R, Succ: (%0.2), %0.2
// CHECK-NEXT:    Val %8 Esc: R, Succ: %0.1, %3
// CHECK-NEXT:    Ret %9 Esc: R, Succ: %8
// CHECK-NEXT:  End
sil @returnNext2 : $@convention(thin) (@owned LinkedNode) -> @owned LinkedNode {
bb0(%0 : $LinkedNode):
  cond_br undef, bb1, bb2

bb1:
  %2 = function_ref @loadNext2 : $@convention(thin) (@owned LinkedNode) -> @owned LinkedNode
  %3 = apply %2(%0) : $@convention(thin) (@owned LinkedNode) -> @owned LinkedNode
  br bb3(%3 : $LinkedNode)

bb2:
  %5 = ref_element_addr %0 : $LinkedNode, #LinkedNode.next
  %6 = load %5 : $*LinkedNode
  br bb3(%6 : $LinkedNode)

bb3(%8 : $LinkedNode):
  return %8 : $LinkedNode
}

// Test if a try_apply is repressented correctly in the connection graph.

// CHECK-LABEL: CG of call_throwing_func
// CHECK-NEXT:    Arg %0 Esc: R, A0, Succ: 
// CHECK-NEXT:    Val %3 Esc: R, Succ: %0
// CHECK-NEXT:    Ret %4 Esc: R, Succ: %3
// CHECK-NEXT:  End
sil hidden @call_throwing_func : $@convention(thin) (@owned X) -> (@owned X, @error ErrorType) {
bb0(%0 : $X):
  %1 = function_ref @throwing_func : $@convention(thin) (@owned X) -> (@owned X, @error ErrorType)
  try_apply %1(%0) : $@convention(thin) (@owned X) -> (@owned X, @error ErrorType), normal bb1, error bb2

bb1(%3 : $X):
  return %3 : $X

bb2(%5 : $ErrorType):
  throw %5 : $ErrorType
}

// CHECK-LABEL: CG of throwing_func
// CHECK-NEXT:    Arg %0 Esc: R, A0, Succ: 
// CHECK-NEXT:    Ret %6 Esc: R, Succ: %0
// CHECK-NEXT:  End
sil @throwing_func : $@convention(thin) (@owned X) -> (@owned X, @error ErrorType) {
bb0(%0 : $X):
  cond_br undef, bb1, bb2

bb1:
  %2 = alloc_existential_box $ErrorType, $MyError
  %3 = struct $MyError ()
  store %3 to %2#1 : $*MyError
  throw %2#0 : $ErrorType

bb2:
  return %0 : $X
}

// Test if a try_apply to an unknown function is handled correctly.

// CHECK-LABEL: CG of call_unknown_throwing_func
// CHECK-NEXT:    Arg %0 Esc: G, A0, Succ: 
// CHECK-NEXT:    Val %3 Esc: G, R, Succ: 
// CHECK-NEXT:    Ret %4 Esc: R, Succ: %3
// CHECK-NEXT:  End
sil hidden @call_unknown_throwing_func : $@convention(thin) (@owned X) -> (@owned X, @error ErrorType) {
bb0(%0 : $X):
  %1 = function_ref @unknown_throwing_func : $@convention(thin) (@owned X) -> (@owned X, @error ErrorType)
  try_apply %1(%0) : $@convention(thin) (@owned X) -> (@owned X, @error ErrorType), normal bb1, error bb2

bb1(%3 : $X):
  return %3 : $X

bb2(%5 : $ErrorType):
  throw %5 : $ErrorType
}

sil @unknown_throwing_func : $@convention(thin) (@owned X) -> (@owned X, @error ErrorType)

// Test types which are considered as pointers.

// CHECK-LABEL: CG of pointer_types
// CHECK-NEXT:    Arg %0 Esc: R, A0, Succ: %1
// CHECK-NEXT:    Arg %1 Esc: R, A0, A1, Succ: 
// CHECK-NEXT:    Val %7 Esc: R, Succ: %0
// CHECK-NEXT:    Ret %10 Esc: R, Succ: %7
// CHECK-NEXT:  End
sil @pointer_types : $@convention(thin) (@owned Y, @owned Y) -> @owned Y {
bb0(%0 : $Y, %1 : $Y):
  %2 = struct $Pointer (%0 : $Y)
  %3 = struct $Pointer (%1 : $Y)
  %4 = tuple (%2 : $Pointer, %3 : $Pointer)
  %5 = enum $PointerEnum, #PointerEnum.B!enumelt.1, %4 : $(Pointer, Pointer)
  switch_enum %5 : $PointerEnum, case #PointerEnum.B!enumelt.1: bb1

bb1(%7 : $(Pointer, Pointer)):
  %8 = tuple_extract %7 : $(Pointer, Pointer), 1
  %9 = struct_extract %8 : $Pointer, #Pointer.y
  return %9 : $Y
}

// We don't handle existentials currently.
// Check that we don't crash on this.

// CHECK-LABEL: CG of test_unknown_store
// CHECK-NEXT:    Arg %0 Esc: G, A0, Succ: 
// CHECK-NEXT:  End
sil @test_unknown_store : $@convention(thin) (@owned ErrorClass) -> () {
bb0(%0 : $ErrorClass):
  %2 = alloc_existential_box $ErrorType, $ErrorClass
  store %0 to %2#1 : $*ErrorClass
  %4 = tuple ()
  return %4 : $()
}

