// RUN: %sil-opt %s -memory-promotion -verify | FileCheck %s

import Builtin
import swift


// CHECK-LABEL: sil @simple_reg_promotion
sil @simple_reg_promotion : $[thin] (a : Int64) -> Int64 {
bb0(%0 : $Int64):                         // CHECK: bb0(%0 : $Int64):
  %1 = alloc_box $Int64                   // CHECK: alloc_box
  %2 = store %0 to %1#1 : $*Int64
  %3 = alloc_box $Int64                   // CHECK: alloc_box
  %4 = load %1#1 : $*Int64
  %5 = store %4 to %3#1 : $*Int64         // CHECK-NEXT: store
  %6 = load %3#1 : $*Int64
  release %3#0 : $Builtin.ObjectPointer   // CHECK-NEXT: release
  release %1#0 : $Builtin.ObjectPointer
  %9 = return %6 : $Int64

  // CHECK: return %0 : $Int64
}

// CHECK-LABEL: sil @use_before_init
sil @use_before_init : $[thin] () -> Int64 {
bb0:
  %1 = alloc_box $Int64                   // expected-note {{variable defined here}}
  %4 = load %1#1 : $*Int64                // expected-error {{variable used before being initialized}}
  release %1#0 : $Builtin.ObjectPointer
  %9 = return %4 : $Int64
}


sil @takes_Int_byref : $[thin] (a : [byref] Int64) -> ()

// CHECK-LABEL: @byref_uninit
sil @byref_uninit : $[thin] () -> () {
bb0:
  %1 = alloc_box $Int64

  %5 = function_ref @takes_Int_byref : $[thin] (a : [byref] Int64) -> ()
  %6 = apply %5(%1#1) : $[thin] (a : [byref] Int64) -> ()
  
  %0 = tuple ()                                   // user: %1
  release %1#0 : $Builtin.ObjectPointer
  return %0 : $()
}




// This function shouldn't produce any diagnostics.
//
// func used_by_byref(a : Int) -> (Int, Int) {
//  var t = a
//  takes_Int_byref(&a)
//  return (t,a)
//}
// CHECK-LABEL: sil @used_by_byref
sil @used_by_byref : $[thin] (a : Int64) -> (Int64, Int64) {
bb0(%0 : $Int64):
  // This alloc_stack can't be removed since it is used by a byref call.
  // CHECK: %1 = alloc_box $Int64
  %1 = alloc_box $Int64
  %2 = store %0 to %1#1 : $*Int64
  
  // This load should be eliminated.
  %3 = load %1#1 : $*Int64
  %5 = function_ref @takes_Int_byref : $[thin] (a : [byref] Int64) -> ()
  %6 = apply %5(%1#1) : $[thin] (a : [byref] Int64) -> ()
  
  // This load is needed in case the callee modifies the allocation.
  // CHECK: [[RES:%[0-9]+]] = load %1
  %7 = load %1#1 : $*Int64
  
  // This should use the incoming argument to the function.
  // CHECK: tuple (%0 : $Int64, [[RES]] : $Int64)
  %8 = tuple (%3 : $Int64, %7 : $Int64)
  release %1#0 : $Builtin.ObjectPointer
  %11 = return %8 : $(Int64, Int64)
}

