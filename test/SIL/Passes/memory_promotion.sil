// RUN: %sil-opt %s -memory-promotion -verify | FileCheck %s

import Builtin
import swift


// CHECK-LABEL: sil @simple_reg_promotion
sil @simple_reg_promotion : $[thin] (a : Int64) -> Int64 {
bb0(%0 : $Int64):                         // CHECK: bb0(%0 : $Int64):
  %1 = alloc_box $Int64                   // CHECK: alloc_box
  %2 = store %0 to %1#1 : $*Int64
  %3 = alloc_box $Int64                   // CHECK: alloc_box
  %4 = load %1#1 : $*Int64
  %5 = store %4 to %3#1 : $*Int64         // CHECK-NEXT: store
  %6 = load %3#1 : $*Int64
  release %3#0 : $Builtin.ObjectPointer   // CHECK-NEXT: release
  release %1#0 : $Builtin.ObjectPointer
  %9 = return %6 : $Int64

  // CHECK: return %0 : $Int64
}

// CHECK-LABEL: sil @use_before_init
sil @use_before_init : $[thin] () -> Int64 {
bb0:
  %1 = alloc_box $Int64                   // expected-note {{variable defined here}}
  %4 = load %1#1 : $*Int64                // expected-error {{variable used before being initialized}}
  release %1#0 : $Builtin.ObjectPointer
  %9 = return %4 : $Int64
}


sil @takes_Int_byref : $[thin] (a : [byref] Int64) -> ()

// CHECK-LABEL: @byref_uninit
sil @byref_uninit : $[thin] () -> () {
bb0:
  %1 = alloc_box $Int64                                   // expected-note {{variable defined here}}

  %5 = function_ref @takes_Int_byref : $[thin] (a : [byref] Int64) -> ()
  %6 = apply %5(%1#1) : $[thin] (a : [byref] Int64) -> () // expected-error {{variable passed by reference before being initialized}}
  
  %0 = tuple ()
  release %1#0 : $Builtin.ObjectPointer
  return %0 : $()
}




// This function shouldn't produce any diagnostics.
//
// func used_by_byref(a : Int) -> (Int, Int) {
//  var t = a
//  takes_Int_byref(&a)
//  return (t,a)
//}
// CHECK-LABEL: sil @used_by_byref
sil @used_by_byref : $[thin] (a : Int64) -> (Int64, Int64) {
bb0(%0 : $Int64):
  // This alloc_stack can't be removed since it is used by a byref call.
  // CHECK: %1 = alloc_box $Int64
  %1 = alloc_box $Int64
  %2 = store %0 to %1#1 : $*Int64
  
  // This load should be eliminated.
  %3 = load %1#1 : $*Int64
  %5 = function_ref @takes_Int_byref : $[thin] (a : [byref] Int64) -> ()
  %6 = apply %5(%1#1) : $[thin] (a : [byref] Int64) -> ()
  
  // This load is needed in case the callee modifies the allocation.
  // CHECK: [[RES:%[0-9]+]] = load %1
  %7 = load %1#1 : $*Int64
  
  // This should use the incoming argument to the function.
  // CHECK: tuple (%0 : $Int64, [[RES]] : $Int64)
  %8 = tuple (%3 : $Int64, %7 : $Int64)
  release %1#0 : $Builtin.ObjectPointer
  %11 = return %8 : $(Int64, Int64)
}


struct GenericStruct<T> {
  var a : T
  var b : Int
}

/// returns_generic_struct - This returns a struct by reference.
sil @returns_generic_struct : $[thin] () -> GenericStruct<Int64>

// There should be no error in this function.
// CHECK-LABEL: sil @call_struct_return_function
sil @call_struct_return_function : $[thin] () -> Int64 {
bb0:
  %1 = alloc_box $GenericStruct<Int64>
  %2 = function_ref @returns_generic_struct : $[thin] () -> GenericStruct<Int64>
  %3 = apply %2(%1#1) : $[thin] () -> GenericStruct<Int64>
  %4 = struct_element_addr %1#1 : $*GenericStruct<Int64>, #b
  %5 = load %4 : $*Int64
  release %1#0 : $Builtin.ObjectPointer
  return %5 : $Int64
}


// CHECK-LABEL: sil @tuple_elements1
sil @tuple_elements1 : $[thin] (a : Int64) -> () {
bb0(%0 : $Int64):
  %3 = alloc_box $(Int64, Int64)     // expected-note {{variable defined here}}
  %4 = tuple_element_addr %3#1 : $*(Int64, Int64), 0
  %5 = tuple_element_addr %3#1 : $*(Int64, Int64), 1
  %14 = function_ref @takes_Int_byref : $[thin] (a : [byref] Int64) -> ()
  %15 = tuple_element_addr %3#1 : $*(Int64, Int64), 1
  %16 = apply %14(%15) : $[thin] (a : [byref] Int64) -> ()  // expected-error {{variable passed by reference before being initialized}}

  release %3#0 : $Builtin.ObjectPointer
  %99 = tuple ()
  return %99 : $()
}

// CHECK-LABEL: sil @tuple_elements2
sil @tuple_elements2 : $[thin] (a : Int64) -> (Int64, Int64) {
bb0(%0 : $Int64):
  %3 = alloc_box $(Int64, Int64)     // expected-note {{variable defined here}}
  %18 = tuple_element_addr %3#1 : $*(Int64, Int64), 0
  store %0 to %18 : $*Int64
  %20 = load %3#1 : $*(Int64, Int64) // expected-error {{variable used before being initialized}}
  %21 = tuple_extract %20 : $(Int64, Int64), 0
  %22 = tuple_extract %20 : $(Int64, Int64), 1
  %23 = tuple (%21 : $Int64, %22 : $Int64)
  release %3#0 : $Builtin.ObjectPointer
  return %23 : $(Int64, Int64)
}

struct XYStruct { var x, y : Int }


// CHECK-LABEL: sil @struct_elements
sil @struct_elements : $[thin] (v : Int64) -> Int64 {
bb0(%0 : $Int64):
  %3 = alloc_box $XYStruct    // expected-note {{variable defined here}}
  %9 = struct_element_addr %3#1 : $*XYStruct, #x
  store %0 to %9 : $*Int64
  %11 = struct_element_addr %3#1 : $*XYStruct, #y
  %12 = load %11 : $*Int64    // expected-error {{variable used before being initialized}}
  release %3#0 : $Builtin.ObjectPointer
  return %12 : $Int64
}


// CHECK-LABEL: sil @copy_addr1
sil @copy_addr1 : $[thin] <T> (v : T) -> T {
bb0(%0 : $*T, %1 : $*T):
  %4 = alloc_box $T
  copy_addr [take] %1 to [initialization] %4#1 : $*T
  copy_addr %4#1 to [initialization] %0 : $*T
  release %4#0 : $Builtin.ObjectPointer
  %9 = tuple ()
  return %9 : $()
}

// CHECK-LABEL: sil @copy_addr2
sil @copy_addr2 : $[thin] <T> (v : T) -> T {
bb0(%0 : $*T, %1 : $*T):
  %4 = alloc_box $T         // expected-note {{variable defined here}}
  copy_addr %4#1 to [initialization] %0 : $*T   // expected-error {{variable used before being initialized}}
  release %4#0 : $Builtin.ObjectPointer
  %9 = tuple ()
  return %9 : $()
}


sil @takes_closure : $[thin] (x : () -> ()) -> ()
sil @closure0 : $[thin] ((), (Builtin.ObjectPointer, [byref] Int64)) -> ()

// CHECK-LABEL: sil @closure_test
sil @closure_test : $[thin] () -> () {
bb0:
  %0 = alloc_box $Int64    // expected-note {{variable defined here}}

  %5 = function_ref @takes_closure : $[thin] (x : () -> ()) -> ()
  %6 = function_ref @closure0 : $[thin] ((), (Builtin.ObjectPointer, [byref] Int64)) -> ()
  retain %0#0 : $Builtin.ObjectPointer
  %8 = partial_apply %6(%0#0, %0#1) : $[thin] ((), (Builtin.ObjectPointer, [byref] Int64)) -> ()  // expected-error {{variable captured by a closure before being initialized}}
  %9 = apply %5(%8) : $[thin] (x : () -> ()) -> ()
  release %0#0 : $Builtin.ObjectPointer

  %11 = tuple ()
  return %11 : $()
}


