// RUN: sil-opt %s -verify -module-name WitnessTableWithGP | FileCheck %s
import Swift

public struct mmEnumerateGenerator<
  Base: GeneratorType
> : GeneratorType, SequenceType {
  public typealias Element = (index: Int, element: Base.Element)
  var base: Base
  var count: Int

  public init(_ base: Base)
  public mutating func next() -> Element?
  public typealias Generator = mmEnumerateGenerator<Base>
  public func generate() -> Generator
}

public struct mmEnumerateSequence<
  Base: SequenceType
> : SequenceType {
  var base: Base
  public init(_ base: Base)
  public func generate() -> mmEnumerateGenerator<Base.Generator>
}

// CHECK: sil_witness_table <Base : SequenceType> mmEnumerateSequence<Base>: _Sequence_Type module WitnessTableWithGP {
// CHECK:  base_protocol _SequenceType: <Base : SequenceType> mmEnumerateSequence<Base>: _SequenceType module WitnessTableWithGP
// CHECK:  associated_type Generator: mmEnumerateGenerator<Base.Generator>
// CHECK:  associated_type_protocol (Generator: GeneratorType): mmEnumerateGenerator<Base.Generator>: specialize <Base = Base.Generator, Base.Element = Base.Generator.Element> (<Base : GeneratorType> mmEnumerateGenerator<Base>: GeneratorType module WitnessTableWithGP)
sil_witness_table <Base : SequenceType> mmEnumerateSequence<Base>: _Sequence_Type module WitnessTableWithGP {
  base_protocol _SequenceType: <Base : SequenceType> mmEnumerateSequence<Base>: _SequenceType module WitnessTableWithGP
  associated_type Generator: mmEnumerateGenerator<Base.Generator>
  associated_type_protocol (Generator: GeneratorType): mmEnumerateGenerator<Base.Generator>: specialize <Base = Base.Generator, Base.Element = Base.Generator.Element> (<Base : GeneratorType> mmEnumerateGenerator<Base>: GeneratorType module WitnessTableWithGP)
}
