// RUN: %swift %s -emit-sil | FileCheck %s

import Builtin
import swift

// Linkage types.

// CHECK: sil clang_thunk @clang_thunk : $() -> ()
sil clang_thunk @clang_thunk : $() -> ()

// CHECK: sil internal @internal_fn : $() -> Int
sil internal @internal_fn : $() -> Int

// Type references

// Some cyclic type references between SIL function bodies.
class Class1 { var a : Class2 }
class Class2 { var b : Class1 }

sil @type_ref1 : $(a : Class1, b : Int) -> ()  // CHECK: $(a : Class1, b : Int64)


// Instructions

sil @test1 : $() -> () {              // CHECK: sil @test1 : $() -> ()
bb0:                                  // CHECK: bb0:
  %0 = tuple ()                       // CHECK:   %0 = tuple ()
  %1 = return %0 : $()                // CHECK:   %1 = return %0 : $()
}

// Forward referenced values.
// TODO: Use control flow to avoid building incorrect SSA.
sil @test2 : $() -> () {              // CHECK: sil @test2 : $() -> ()
  %b = return %a : $()                // CHECK:   %0 = return %1 : $()
  %a = tuple ()                       // CHECK:   %1 = tuple ()
}

sil @named_tuple : $() -> (x : Builtin.Int64, Builtin.Int64) {
  %0 = integer_literal $Builtin.Int64, 42      // CHECK: integer_literal $Builtin.Int64, 42
  %9 = tuple $(x : Builtin.Int64, Builtin.Int64) (%0, %0)
  %10 = return %9 : $(x : Builtin.Int64, Builtin.Int64)
}

sil @return_int : $[thin] (a : Int64) -> Int64 { // CHECK: $[thin] (a : Int64) -> Int64 {
bb0(%0 : $Int64):                          // CHECK: bb0(%0 : $Int64):
  %1 = alloc_var stack $Int64              // CHECK: alloc_var stack $Int64
  %2 = store %0 to %1 : $*Int64            // CHECK: %2 = store %0 to %1 : $*Int64
  %3 = load %1 : $*Int64                   // CHECK: load {{.*}} : $*Int64
  %4 = dealloc_var stack %1 : $*Int64      // CHECK: dealloc_var stack {{.*}} : $*Int64
  %5 = return %3 : $Int64                  // CHECK: return {{.*}} : $Int64
}


sil @return_constant : $[thin] () -> Int64 {  // CHECK: @return_constant
bb0:
  %0 = tuple ()
//  %1 = function_ref $[thin] ((val : Builtin.Int64), Int64.metatype) -> Int64, @_TSi25convertFromIntegerLiteralfMSiFT3valBi64__Si // user: %4
  %2 = metatype $Int64.metatype                   // metatype $Int64.metatype
  %3 = integer_literal $Builtin.Int64, 1          // integer_literal $Builtin.Int64, 1
  //%4 = apply %1(%3, %2)                           //
  //%5 = return %4 : $Int64
}

sil @_TSi25convertFromIntegerLiteralfMSiFT3valBi64__Si : $[thin] ((val : Builtin.Int64), Int64.metatype) -> Int64

