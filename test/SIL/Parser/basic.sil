// RUN: %swift %s -emit-sil | FileCheck %s

import Builtin
import swift

// Linkage types.

// CHECK: sil clang_thunk @clang_thunk : $() -> ()
sil clang_thunk @clang_thunk : $() -> ()

// CHECK: sil internal @internal_fn : $() -> Int
sil internal @internal_fn : $() -> Int

// Type references

// Some cyclic type references between SIL function bodies.
class Class1 { var a : Class2 }
class Class2 { var b : Class1 }

sil @type_ref1 : $(a : Class1, b : Int) -> ()  // CHECK: $(a : Class1, b : Int64)


// Instructions

sil @test1 : $() -> () {              // CHECK: sil @test1 : $() -> ()
bb0:                                  // CHECK: bb0:
  %0 = tuple ()                       // CHECK:   %0 = tuple ()
  %a = br bb1                         // CHECK: br bb1
bb1:
  %b = alloc_box $Int64               // CHECK:   %2 = alloc_box $Int64
  %1 = return %0 : $()                // CHECK:   %3 = return %0 : $()
}

// Forward referenced values.
sil @test2 : $(x : Int64) -> () {              // CHECK: sil @test2 : $(x : Int64) -> ()
bb0(%0 : $Int64):
  %1 = br bb2
bb1:
  // Forward reference MRVs.
  %2 = store %0 to %6#1 : $*Int64              // CHECK:   %2 = store %0 to %6#1
  %3 = release %6#0 : $Builtin.ObjectPointer   // CHECK:   %3 = release %6#0

  %4 = return %5 : $()                         // CHECK:   %4 = return %5 : $()
bb2:
  %5 = tuple ()                                // CHECK:   %5 = tuple ()
  %6 = alloc_box $Int64                        // CHECK:   %6 = alloc_box $Int64
  %7 = br bb1                                  // CHECK:   %7 = br bb1
}

sil @named_tuple : $() -> (x : Builtin.Int64, Builtin.Int64) {
  %0 = integer_literal $Builtin.Int64, 42      // CHECK: integer_literal $Builtin.Int64, 42
  %9 = tuple $(x : Builtin.Int64, Builtin.Int64) (%0, %0)
  %10 = return %9 : $(x : Builtin.Int64, Builtin.Int64)
}

sil @return_int : $[thin] (a : Int64) -> Int64 { // CHECK: $[thin] (a : Int64) -> Int64 {
bb0(%0 : $Int64):                          // CHECK: bb0(%0 : $Int64):
  %1 = alloc_stack $Int64                    // CHECK: alloc_stack $Int64
  %2 = store %0 to %1 : $*Int64            // CHECK: %2 = store %0 to %1 : $*Int64
  %3 = load %1 : $*Int64                   // CHECK: load {{.*}} : $*Int64
  %4 = dealloc_stack %1 : $*Int64            // CHECK: dealloc_stack {{.*}} : $*Int64
  %5 = return %3 : $Int64                  // CHECK: return {{.*}} : $Int64
}

sil @call_fn_pointer : $[thin] (a : () -> Int64) -> Int64 {
bb0(%0 : $() -> Int64):
  %1 = alloc_stack $() -> Int64              // CHECK: alloc_stack $() -> Int64
  %2 = store %0 to %1 : $*() -> Int64      // CHECK: store %0 to %1 : $*() -> Int64
  %3 = load %1 : $*() -> Int64             // CHECK: load %1 : $*() -> Int64
  %4 = retain %3 : $() -> Int64            // CHECK: retain %3 : $() -> Int64
  %5 = apply %3() : $() -> Int64           // CHECK: apply %3() : $() -> Int64
  %6 = load %1 : $*() -> Int64             // CHECK: load %1 : $*() -> Int64
  %7 = release %6 : $() -> Int64           // CHECK: release {{.*}} : $() -> Int64
  %8 = dealloc_stack %1 : $*() -> Int64      // CHECK: dealloc_stack %1 : $*() -> Int64
  %9 = return %5 : $Int64                  // CHECK: return %5 : $Int64
}

sil @return_constant : $[thin] () -> Int64 {  // CHECK: @return_constant
bb0:                                         // CHECK: bb0:
  // CHECK: function_ref @_TSi25convertFromIntegerLiteralfMSiFT3valBi64__Si : $[thin] ((val : Builtin.Int64), Int64.metatype) -> Int64
  %1 = function_ref @_TSi25convertFromIntegerLiteralfMSiFT3valBi64__Si : $[thin] ((val : Builtin.Int64), Int64.metatype) -> Int64

  // CHECK: metatype $Int64.metatype
  %2 = metatype $Int64.metatype

  // CHECK: integer_literal $Builtin.Int64, 1
  %3 = integer_literal $Builtin.Int64, 1
  
  // CHECK: apply
  %4 = apply %1(%3, %2) : $[thin] ((val : Builtin.Int64), Int64.metatype) -> Int64
  // CHECK: return
  %5 = return %4 : $Int64
}

sil @_TSi25convertFromIntegerLiteralfMSiFT3valBi64__Si : $[thin] ((val : Builtin.Int64), Int64.metatype) -> Int64

// Parse SIL generated from the following swift program:
// func x(a : Bool) -> Int { if a { return 4 } else {return 5} }
sil @_TSb13getLogicValuefRSbFT_Bi1_ : $[cc(method), thin] ((), [byref] Bool) -> Builtin.Int1
sil @_TSi33_convertFromBuiltinIntegerLiteralfMSiFT3valBi128__Si : $[thin] ((val : Builtin.Int128), Int64.metatype) -> Int64

// CHECK: @_T4test1xFT1aSb_Si
sil @_T4test1xFT1aSb_Si : $[thin] (a : Bool) -> Int64 {
// CHECK: bb0(%0 : $Bool):
bb0(%0 : $Bool):
  // CHECK: alloc_stack $Bool
  %1 = alloc_stack $Bool
  // CHECK: store
  %2 = store %0 to %1 : $*Bool
  // CHECK: function_ref @_TSb13getLogicValuefRSbFT_Bi1_ : $[cc(method), thin] ((), [byref] Bool) -> Builtin.Int1
  %3 = function_ref @_TSb13getLogicValuefRSbFT_Bi1_ : $[cc(method), thin] ((), [byref] Bool) -> Builtin.Int1
  // CHECK: apply
  %4 = apply %3(%1) : $[cc(method), thin] ((), [byref] Bool) -> Builtin.Int1
  // CHECK: condbranch
  %5 = condbranch %4, bb1, bb2

// CHECK: bb1:
bb1:
  // CHECK: function_ref @_TSi33_convertFromBuiltinIntegerLiteralfMSiFT3valBi128__Si : $[thin] ((val : Builtin.Int128), Int64.metatype) -> Int64
  %6 = function_ref @_TSi33_convertFromBuiltinIntegerLiteralfMSiFT3valBi128__Si : $[thin] ((val : Builtin.Int128), Int64.metatype) -> Int64
  // CHECK: metatype $Int64.metatype
  %7 = metatype $Int64.metatype
  // CHECK: integer_literal $Builtin.Int128, 4
  %8 = integer_literal $Builtin.Int128, 4
  // CHECK: apply
  %9 = apply %6(%8, %7) : $[thin] ((val : Builtin.Int128), Int64.metatype) -> Int64
  // CHECK: dealloc_stack
  %10 = dealloc_stack %1 : $*Bool
  // CHECK: return
  %11 = return %9 : $Int64

// CHECK: bb2:
bb2:
  // CHECK: function_ref @_TSi33_convertFromBuiltinIntegerLiteralfMSiFT3valBi128__Si : $[thin] ((val : Builtin.Int128), Int64.metatype) -> Int64
  %12 = function_ref @_TSi33_convertFromBuiltinIntegerLiteralfMSiFT3valBi128__Si : $[thin] ((val : Builtin.Int128), Int64.metatype) -> Int64
  // CHECK: metatype $Int64.metatype
  %13 = metatype $Int64.metatype
  // CHECK: integer_literal $Builtin.Int128, 5
  %14 = integer_literal $Builtin.Int128, 5
  // CHECK: apply
  %15 = apply %12(%14, %13) : $[thin] ((val : Builtin.Int128), Int64.metatype) -> Int64
  // CHECK: dealloc_stack
  %16 = dealloc_stack %1 : $*Bool
  // CHECK: return
  %17 = return %15 : $Int64
}


protocol P {
  func doIt()
}

sil @existentials : $[thin] (n : P) -> () {
bb0(%0 : $*P):
  %1 = project_existential %0 : $*P   // CHECK: project_existential %0

  // CHECK: protocol_method {{.*}} : $*P, #P.doIt!1
  %2 = protocol_method %0 : $*P, #P.doIt!1 : $[cc(method)] ((), Builtin.OpaquePointer) -> ()
  // CHECK: apply
  %3 = apply %2(%1) : $[cc(method)] ((), Builtin.OpaquePointer) -> ()
  %4 = tuple ()                       // CHECK: tuple ()
  %5 = destroy_addr %0 : $*P          // CHECK: destroy_addr %0 : $*P
  %6 = return %4 : $()                // CHECK: return 
}


class C {
  func doIt() {}
}

class D : C {
  func doIt() {
    super.doIt()
  }
}


sil @classes : $[thin] () -> () {
bb0:
  // CHECK: %0 = alloc_ref $C
  %C = alloc_ref $C
  // CHECK: ref_to_object_pointer %0 : $C to $Builtin.ObjectPointer
  %1 = ref_to_object_pointer %C : $C to $Builtin.ObjectPointer

  // CHECK: class_method {{.*}} : $C, #C.doIt!1
  %2 = class_method %C : $C, #C.doIt!1 : $[cc(method), thin] ((), C) -> ()
  
  // CHECK: alloc_ref $D
  %D = alloc_ref $D
  
  // CHECK: upcast {{.*}} : $D to $C
  %a = upcast %D : $D to $C


  %5 = downcast unconditional %C : $C to $D   // CHECK: downcast unconditional {{.*}} : $C to $D
}

// Generated from:
// func archetype_member_ref<T:Runcible>(x:T) {
//   x.free_method()
//   var u = x.associated_method()
//   T.static_method()
// }

protocol Runcible {
  typealias U
  var free:Int
  var associated:U

  func free_method() -> Int
  func associated_method() -> U.metatype
  static func static_method()
}

// CHECK: $[thin] <T : Runcible> (x : T) -> ()
sil @_T4arch20archetype_member_refUS_8Runcible___FT1xQ__T_ : $[thin] <T : Runcible> (x : T) -> () {
bb0(%0 : $*T):
  // CHECK: archetype_method $*T, #Runcible.free_method!1
  %1 = archetype_method $*T, #Runcible.free_method!1 : $[cc(method)] ((), [byref] T) -> Int64
  %2 = apply %1(%0) : $[cc(method)] ((), [byref] T) -> Int64
  %3 = alloc_stack $T.U.metatype
  // CHECK: archetype_method $*T, #Runcible.associated_method!1
  %4 = archetype_method $*T, #Runcible.associated_method!1 : $[cc(method)] ((), [byref] T) -> T.U.metatype
  %5 = apply %4(%0) : $[cc(method)] ((), [byref] T) -> T.U.metatype
  %6 = store %5 to %3 : $*T.U.metatype
  %7 = metatype $T.metatype
  // CHECK: archetype_method [volatile] $*T, #Runcible.static_method!1
  %8 = archetype_method [volatile] $*T, #Runcible.static_method!1 : $((), T.metatype) -> ()
  %9 = apply %8(%7) : $((), T.metatype) -> ()
  %10 = dealloc_stack %3 : $*T.U.metatype
  %11 = tuple ()
  %12 = destroy_addr %0 : $*T
  %13 = return %11 : $()
}

protocol Bendable { }

// CHECK: $[thin] (x : protocol<Bendable, Runcible>) -> Runcible
sil @_T4todo18erasure_from_protoFT1xPS_8RuncibleS_8Bendable__PS0__ : $[thin] (x : protocol<Bendable, Runcible>) -> Runcible {
bb0(%0 : $*Runcible, %1 : $*protocol<Bendable, Runcible>):
  // CHECK: alloc_box
  %2 = alloc_box $protocol<Bendable, Runcible>
  // CHECK: copy_addr [take] {{.*}} to [initialization] {{.*}} : $*protocol<Bendable, Runcible>
  %3 = copy_addr [take] %1 to [initialization] %2#1 : $*protocol<Bendable, Runcible>
  // CHECK: alloc_stack
  %4 = alloc_stack $protocol<Bendable, Runcible>
  // CHECK: copy_addr {{.*}} to [initialization] {{.*}} : $*protocol<Bendable, Runcible>
  %5 = copy_addr %2#1 to [initialization] %4 : $*protocol<Bendable, Runcible>
  // CHECK: upcast_existential [take] {{.*}} : $*protocol<Bendable, Runcible> to {{.*}} : $*Runcible
  %6 = upcast_existential [take] %4 : $*protocol<Bendable, Runcible> to %0 : $*Runcible
  %7 = tuple ()
  // CHECK: destroy_addr
  %8 = destroy_addr %4 : $*protocol<Bendable, Runcible>
  // CHECK: dealloc_stack
  %9 = dealloc_stack %4 : $*protocol<Bendable, Runcible>
  // CHECK: release
  %10 = release %2#0 : $Builtin.ObjectPointer
  // CHECK: return
  %11 = return %7 : $()
}

protocol [class_protocol] ClassBound {
  func classBoundMethod()
}

// CHECK: $[thin] (x : ClassBound) -> ()
sil @_T4todo18class_bound_methodFT1xPS_10ClassBound__T_ : $[thin] (x : ClassBound) -> () {
bb0(%0 : $ClassBound):
  %1 = alloc_box $ClassBound                // CHECK: alloc_box
  %2 = store %0 to %1#1 : $*ClassBound      // CHECK: store
  %3 = load %1#1 : $*ClassBound             // CHECK: load
  %4 = retain %3 : $ClassBound              // CHECK: retain
  // CHECK: project_existential_ref {{%.*}} : $ClassBound
  %5 = project_existential_ref %3 : $ClassBound
  // CHECK: protocol_method
  %6 = protocol_method %3 : $ClassBound, #ClassBound.classBoundMethod!1 : $[cc(method), thin] ((), Builtin.ObjCPointer) -> ()
  %7 = apply %6(%5) : $[cc(method), thin] ((), Builtin.ObjCPointer) -> ()
  %8 = tuple ()
  %9 = release %1#0 : $Builtin.ObjectPointer
  %10 = return %8 : $()
}

struct Val {
}

// CHECK: $[thin] ((), Val.metatype) -> Val
sil @_TV4todo3ValCfMS0_FT_S0_ : $[thin] ((), Val.metatype) -> Val {
bb0(%0 : $Val.metatype):
  %1 = alloc_stack $Val // CHECK: alloc_stack
  // CHECK: initialize_var [no_default_construct] {{%.*}} : $*Val
  %2 = initialize_var [no_default_construct] %1 : $*Val
  %3 = load %1 : $*Val
  %4 = return %3 : $Val
}

class Ref {
}
struct Aleph {
  var a:Ref
  var b:Val
}

// CHECK: $[thin] ((a : Ref, b : Val), Aleph.metatype) -> Aleph
sil @_TV6struct5AlephCfMS0_FT1aCS_3Ref1bVS_3Val_S0_ : $[thin] ((a : Ref, b : Val), Aleph.metatype) -> Aleph {
bb0(%0 : $Ref, %1 : $Val, %2 : $Aleph.metatype):
  // CHECK: struct $Aleph ({{%.*}} : $Ref, {{%.*}} : $Val)
  %3 = struct $Aleph (%0 : $Ref, %1 : $Val)
  %4 = return %3 : $Aleph  // CHECK: return
}

// CHECK: $[thin] ((), Aleph.metatype) -> Aleph
sil @_TV6struct5AlephCfMS0_FT_S0_ : $[thin] ((), Aleph.metatype) -> Aleph {
bb0(%0 : $Aleph.metatype):
  %1 = tuple ()
  %2 = alloc_box $Aleph       // CHECK: alloc_box
  // CHECK: initialize_var [no_default_construct]
  %3 = initialize_var [no_default_construct] %2#1 : $*Aleph
  %4 = builtin_zero $Ref      // CHECK: builtin_zero $Ref
  // CHECK: struct_element_addr {{.*}} : $*Aleph, @a
  %5 = struct_element_addr %2#1 : $*Aleph, @a
  %6 = load %5 : $*Ref
  %7 = store %4 to %5 : $*Ref
  %8 = release %6 : $Ref
  %14 = load %2#1 : $*Aleph
  // CHECK: struct_extract {{%.*}} : $Aleph, @a
  %15 = struct_extract %14 : $Aleph, @a
  %16 = retain %15 : $Ref
  %17 = release %2#0 : $Builtin.ObjectPointer
  %18 = return %14 : $Aleph
}

sil @_T5tuple5floatFT1xSf_T_ : $[thin] (x : Float32) -> ()
sil @_T5tuple5tupleFT_TSiSf_ : $[thin] () -> (Int64, Float32)

// CHECK: $[thin] (x : (Int64, Float32)) -> ()
sil @_T5tuple13tuple_elementFT1xTSiSf__T_ : $[thin] (x : (Int64, Float32)) -> () {
bb0(%0 : $Int64, %1 : $Float32):
  %2 = alloc_box $(Int64, Float32)
  // CHECK: tuple ({{%.*}} : $Int64, {{%.*}} : $Float32)
  %3 = tuple (%0 : $Int64, %1 : $Float32)
  %4 = store %3 to %2#1 : $*(Int64, Float32)
  // CHECK: tuple_element_addr {{%.*}}#{{.*}} : $*(Int64, Float32), 0
  %6 = tuple_element_addr %2#1 : $*(Int64, Float32), 0
  // CHECK: load
  %7 = load %6 : $*Int64
  // CHECK: tuple_element_addr {{%.*}}#{{.*}} : $*(Int64, Float32), 1
  %10 = tuple_element_addr %2#1 : $*(Int64, Float32), 1
  // CHECK: load
  %11 = load %10 : $*Float32
  // CHECK: function_ref
  %14 = function_ref @_T5tuple5tupleFT_TSiSf_ : $[thin] () -> (Int64, Float32)
  // CHECK: apply
  %15 = apply %14() : $[thin] () -> (Int64, Float32)
  // CHECK: function_ref
  %19 = function_ref @_T5tuple5floatFT1xSf_T_ : $[thin] (x : Float32) -> ()
  // CHECK: tuple_extract {{%.*}} : $(Int64, Float32), 1
  %17 = tuple_extract %15 : $(Int64, Float32), 1
  // CHECK: apply
  %24 = apply %19(%17) : $[thin] (x : Float32) -> ()
  %25 = tuple ()
  %26 = release %2#0 : $Builtin.ObjectPointer
  %27 = return %25 : $()
}

class M {
  var member : Int
}

// CHECK: $[cc(method), thin] ((x : Int64), M) -> ()
sil @_TC3ref1C3foofS0_FT1xSi_T_ : $[cc(method), thin] ((x : Int64), M) -> () {
bb0(%0 : $Int64, %1 : $M):
  %2 = alloc_box $Int64     // CHECK: alloc_box $Int64
  %3 = store %0 to %2#1 : $*Int64
  %4 = alloc_box $M         // CHECK: alloc_box $M
  %5 = store %1 to %4#1 : $*M
  %6 = load %2#1 : $*Int64  // CHECK: load {{.*}} : $*Int64
  %7 = load %4#1 : $*M      // CHECK: load {{.*}} : $*M
  %8 = retain %7 : $M
  // CHECK: ref_element_addr {{%.*}} : $M, @member
  %9 = ref_element_addr %7 : $M, @member
  %10 = store %6 to %9 : $*Int64
  %11 = release %7 : $M
  %12 = tuple ()
  %13 = release %4#0 : $Builtin.ObjectPointer
  %14 = release %2#0 : $Builtin.ObjectPointer
  %15 = return %12 : $()
}

class B { }
class E : B { }

// CHECK: $[thin] (b : B) -> Bool
sil @_T4null3isaFT1bCS_1B_Sb : $[thin] (b : B) -> Bool {
bb0(%0 : $B):
  %1 = alloc_box $B                           // CHECK: alloc_box
  %2 = store %0 to %1#1 : $*B
  %3 = load %1#1 : $*B                        // CHECK: load
  %4 = retain %3 : $B
  %5 = downcast conditional %3 : $B to $E     // CHECK: downcast
  %6 = is_nonnull %5 : $E                     // CHECK: is_nonnull {{%.*}} : $E
  %7 = release %3 : $B
  %8 = release %1#0 : $Builtin.ObjectPointer
  %9 = return %6 : $Bool
}

sil @_TSd31_convertFromBuiltinFloatLiteralfMSdFT5valueBf64__Sd : $[thin] ((value : Builtin.FPIEEE64), Float64.metatype) -> Float64
sil @_TSS32_convertFromBuiltinStringLiteralfMSSFT5valueBp8byteSizeBi64_7isASCIIBi1__SS : $[thin] ((value : Builtin.RawPointer, byteSize : Builtin.Int64, isASCII : Builtin.Int1), String.metatype) -> String

// CHECK: $[thin] () -> ()
sil @_T7literal8literalsFT_T_ : $[thin] () -> () {
bb0:
  %0 = tuple ()
  %1 = alloc_stack $Float64                 // CHECK: alloc_stack $Float64
  %2 = function_ref @_TSd31_convertFromBuiltinFloatLiteralfMSdFT5valueBf64__Sd : $[thin] ((value : Builtin.FPIEEE64), Float64.metatype) -> Float64
  %3 = metatype $Float64.metatype
  // CHECK: float_literal $Builtin.FPIEEE64, 1.1
  %4 = float_literal $Builtin.FPIEEE64, 1.1
  %5 = apply %2(%4, %3) : $[thin] ((value : Builtin.FPIEEE64), Float64.metatype) -> Float64
  %6 = store %5 to %1 : $*Float64
  %7 = alloc_stack $String                 // CHECK: alloc_stack $String
  %8 = function_ref @_TSS32_convertFromBuiltinStringLiteralfMSSFT5valueBp8byteSizeBi64_7isASCIIBi1__SS : $[thin] ((value : Builtin.RawPointer, byteSize : Builtin.Int64, isASCII : Builtin.Int1), String.metatype) -> String
  %9 = metatype $String.metatype
  // CHECK: string_literal $(Builtin.RawPointer, Builtin.Int64, Builtin.Int1), "foo"
  %10 = string_literal $(Builtin.RawPointer, Builtin.Int64, Builtin.Int1), "foo"
  %11 = tuple_extract %10 : $(Builtin.RawPointer, Builtin.Int64, Builtin.Int1), 0
  %12 = tuple_extract %10 : $(Builtin.RawPointer, Builtin.Int64, Builtin.Int1), 1
  %13 = tuple_extract %10 : $(Builtin.RawPointer, Builtin.Int64, Builtin.Int1), 2
  %14 = apply %8(%11, %12, %13, %9) : $[thin] ((value : Builtin.RawPointer, byteSize : Builtin.Int64, isASCII : Builtin.Int1), String.metatype) -> String
  %15 = store %14 to %7 : $*String
  %16 = load %7 : $*String                        // CHECK: load {{%.*}} : $*String
  %17 = struct_extract %16 : $String, @str_value  // CHECK: struct_extract
  %18 = struct_extract %17 : $StringByteData, @owner // CHECK: struct_extract
  %19 = release %18 : $Builtin.ObjectPointer
  %20 = dealloc_stack %7 : $*String
  %21 = dealloc_stack %1 : $*Float64
  %22 = tuple ()
  %23 = return %22 : $()
}

sil @_T5index5gep64FT1pBp1iBi64__Bp : $[thin] (p : Builtin.RawPointer, i : Builtin.Int64) -> Builtin.RawPointer {
bb0(%0 : $Builtin.RawPointer, %1 : $Builtin.Int64):
  %2 = alloc_box $Builtin.RawPointer              // CHECK: alloc_box
  %3 = alloc_box $Builtin.Int64                   // CHECK: alloc_box
  %4 = store %0 to %2#1 : $*Builtin.RawPointer
  %5 = store %1 to %3#1 : $*Builtin.Int64
  // %6 = module @Builtin
  %7 = load %2#1 : $*Builtin.RawPointer           // CHECK: load
  %8 = load %3#1 : $*Builtin.Int64                // CHECK: load
  // CHECK: index_raw_pointer {{%.*}} : $Builtin.RawPointer, {{%.*}} : $Builtin.Int64
  %9 = index_raw_pointer %7 : $Builtin.RawPointer, %8 : $Builtin.Int64
  %10 = release %3#0 : $Builtin.ObjectPointer
  %11 = release %2#0 : $Builtin.ObjectPointer
  %12 = return %9 : $Builtin.RawPointer
}

var x : Int = 0
sil @global_callee : $[thin] ((val : Builtin.Int128), Int64.metatype) -> Int64

// CHECK: $() -> ()
sil internal @global_code : $() -> () {
bb0:
  // CHECK: global_addr @x : $*Int64
  %0 = global_addr @x : $*Int64
  %1 = function_ref @global_callee : $[thin] ((val : Builtin.Int128), Int64.metatype) -> Int64
  %2 = metatype $Int64.metatype
  %3 = integer_literal $Builtin.Int128, 0         // CHECK: integer_literal
  %4 = apply %1(%3, %2) : $[thin] ((val : Builtin.Int128), Int64.metatype) -> Int64
  %5 = store %4 to %0 : $*Int64
  %6 = tuple ()
  %7 = return %6 : $()
}

protocol SomeProtocol {
}
class SomeClass : SomeProtocol {
}
class SomeSubclass : SomeClass {}

sil @test_class_metatype : $[thin] (c : SomeClass, s : SomeSubclass) -> (SomeClass.metatype, SomeClass.metatype) {
bb0(%0 : $SomeClass, %1 : $SomeSubclass):
  %2 = alloc_box $SomeClass                       // CHECK: alloc_box
  %3 = alloc_box $SomeSubclass                    // CHECK: alloc_box
  %4 = store %0 to %2#1 : $*SomeClass
  %5 = store %1 to %3#1 : $*SomeSubclass
  %7 = load %2#1 : $*SomeClass                    // CHECK: load
  %8 = retain %7 : $SomeClass
  // CHECK: class_metatype $SomeClass.metatype, {{%.*}} : $SomeClass
  %9 = class_metatype $SomeClass.metatype, %7 : $SomeClass
  %11 = load %3#1 : $*SomeSubclass                // CHECK: load
  %12 = retain %11 : $SomeSubclass
  // CHECK: class_metatype $SomeSubclass.metatype, {{%.*}} : $SomeSubclass
  %13 = class_metatype $SomeSubclass.metatype, %11 : $SomeSubclass
  %14 = upcast %13 : $SomeSubclass.metatype to $SomeClass.metatype  // CHECK: upcast
  %15 = tuple (%9 : $SomeClass.metatype, %14 : $SomeClass.metatype) // CHECK: tuple
  %16 = release %11 : $SomeSubclass
  %17 = release %7 : $SomeClass
  %18 = release %3#0 : $Builtin.ObjectPointer
  %19 = release %2#0 : $Builtin.ObjectPointer
  %20 = return %15 : $(SomeClass.metatype, SomeClass.metatype)
}

sil @test_archetype_metatype : $[thin] <T> (t : T) -> (T.metatype, T.metatype) {
bb0(%0 : $*T):
  %1 = alloc_box $T                               // CHECK: alloc_box
  %2 = copy_addr [take] %0 to [initialization] %1#1 : $*T
  %3 = metatype $T.metatype                       // CHECK: metatype
  %5 = alloc_stack $T                               // CHECK: alloc_stack
  %6 = copy_addr %1#1 to [initialization] %5 : $*T
  // CHECK: archetype_metatype $T.metatype, {{%.*}} : $*T
  %7 = archetype_metatype $T.metatype, %5 : $*T
  %8 = tuple (%3 : $T.metatype, %7 : $T.metatype) // CHECK: tuple
  %9 = destroy_addr %5 : $*T
  %10 = dealloc_stack %5 : $*T
  %11 = release %1#0 : $Builtin.ObjectPointer
  %12 = return %8 : $(T.metatype, T.metatype)
}

sil @test_protocol_metatype : $[thin] (p : SomeProtocol) -> SomeProtocol.metatype {
bb0(%0 : $*SomeProtocol):
  %1 = alloc_box $SomeProtocol                    // CHECK: alloc_box
  %2 = copy_addr [take] %0 to [initialization] %1#1 : $*SomeProtocol
  %4 = alloc_stack $SomeProtocol                    // CHECK: alloc_stack
  %5 = copy_addr %1#1 to [initialization] %4 : $*SomeProtocol
  // CHECK: protocol_metatype $SomeProtocol.metatype, {{%.*}} : $*SomeProtocol
  %6 = protocol_metatype $SomeProtocol.metatype, %4 : $*SomeProtocol
  %7 = destroy_addr %4 : $*SomeProtocol
  %8 = dealloc_stack %4 : $*SomeProtocol
  %9 = release %1#0 : $Builtin.ObjectPointer
  %10 = return %6 : $SomeProtocol.metatype
}
