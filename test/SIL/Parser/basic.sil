// RUN: %swift %s -emit-silgen | FileCheck %s

sil_stage raw // CHECK: sil_stage raw

import Builtin
import swift

// CHECK: sil_global internal @globalinit_token0 : $Builtin.Word
sil_global internal @globalinit_token0 : $Builtin.Word

// Linkage types.

// CHECK-LABEL: sil thunk @clang_thunk : $() -> ()
sil thunk @clang_thunk : $() -> ()

// CHECK-LABEL: sil internal @internal_fn : $() -> ()
sil internal @internal_fn : $() -> () {
bb0:
  %0 = tuple ()
  return %0 : $()
}

// Type references

// Some cyclic type references between SIL function bodies.
class Class1 { var a : Class2 }
class Class2 { var b : Class1 }

sil @type_ref1 : $(Class1, Int) -> ()  // CHECK: $(Class1, Int64)


// Instructions

sil @test1 : $() -> () {              // CHECK-LABEL: sil @test1 : $() -> ()
bb0:                                  // CHECK: bb0:
  %0 = tuple ()                       // CHECK:   %0 = tuple ()
  br bb1                              // CHECK:   br bb1
bb1:
  %b = alloc_box $Int64               // CHECK:   %2 = alloc_box $Int64
  %c = integer_literal $Builtin.Int64, 1
  // CHECK: alloc_array $String, %{{.*}} : $Builtin.Int64
  %d = alloc_array $String, %c : $Builtin.Int64
  // CHECK: integer_literal $Builtin.Int64, -1
  %e = integer_literal $Builtin.Int64, -1
  return %0 : $()                     // CHECK:   return %0 : $()
}

// Forward referenced values.
sil @test2 : $(Int64) -> () {               // CHECK-LABEL: sil @test2 : $(Int64) -> ()
bb0(%0 : $Int64):
  br bb2
bb1:
  // Forward reference MRVs.
  store %0 to %6#1 : $*Int64                   // CHECK:   store %0 to %6#1
  strong_release %6#0 : $Builtin.ObjectPointer        // CHECK:   strong_release %6#0

  return %5 : $()                              // CHECK:   return %5 : $()
bb2:
  %5 = tuple ()                                // CHECK:   %5 = tuple ()
  %6 = alloc_box $Int64                        // CHECK:   %6 = alloc_box $Int64
  br bb1                                       // CHECK:   br bb1
}

sil @named_tuple : $() -> (x: Builtin.Int64, Builtin.Int64) {
  %0 = integer_literal $Builtin.Int64, 42      // CHECK: integer_literal $Builtin.Int64, 42
  %9 = tuple $(x: Builtin.Int64, Builtin.Int64) (%0, %0)
  %10 = return %9 : $(x: Builtin.Int64, Builtin.Int64)
}

sil @return_int : $@thin (Int64) -> Int64 { // CHECK: $@thin (Int64) -> Int64 {
bb0(%0 : $Int64):                          // CHECK: bb0(%0 : $Int64):
  %1 = alloc_stack $Int64                  // CHECK: alloc_stack $Int64
  store %0 to %1#1 : $*Int64               // CHECK: store %0 to %1#1 : $*Int64
  %3 = load %1#1 : $*Int64                 // CHECK: load {{.*}} : $*Int64
  dealloc_stack %1#0 : $*@local_storage Int64 // CHECK: dealloc_stack {{.*}} : $*@local_storage Int64
  return %3 : $Int64                       // CHECK: return {{.*}} : $Int64
}

sil @call_fn_pointer : $@thin (() -> Int64) -> Int64 {
bb0(%0 : $() -> Int64):
  %1 = alloc_stack $() -> Int64            // CHECK: alloc_stack $() -> Int64
  store %0 to %1#1 : $*() -> Int64         // CHECK: store %0 to %1#1 : $*() -> Int64
  %3 = load %1#1 : $*() -> Int64             // CHECK: load %1#1 : $*() -> Int64
  strong_retain %3 : $() -> Int64                 // CHECK: strong_retain %3 : $() -> Int64
  %5 = apply %3() : $() -> Int64           // CHECK: apply %3() : $() -> Int64
  %6 = load %1#1 : $*() -> Int64             // CHECK: load %1#1 : $*() -> Int64
  strong_release %3 : $() -> Int64                // CHECK: release {{.*}} : $() -> Int64
  dealloc_stack %1#0 : $*@local_storage () -> Int64 // CHECK: dealloc_stack %1#0 : $*@local_storage () -> Int64
  return %5 : $Int64                       // CHECK: return %5 : $Int64
}

sil @return_constant : $@thin () -> Int64 {  // CHECK-LABEL: @return_constant
bb0:                                         // CHECK: bb0:
  // CHECK: function_ref @_TSi25convertFromIntegerLiteralfMSiFT3valBi64__Si : $@thin (Builtin.Int64, @thin Int64.metatype) -> Int64
  %1 = function_ref @_TSi25convertFromIntegerLiteralfMSiFT3valBi64__Si : $@thin (Builtin.Int64, @thin Int64.metatype) -> Int64

  // CHECK: metatype $@thin Int64.metatype
  %2 = metatype $@thin Int64.metatype

  // CHECK: integer_literal $Builtin.Int64, 1
  %3 = integer_literal $Builtin.Int64, 1
  
  // CHECK: apply
  %4 = apply %1(%3, %2) : $@thin (Builtin.Int64, @thin Int64.metatype) -> Int64
  // CHECK: return
  %5 = return %4 : $Int64
}

sil @_TSi25convertFromIntegerLiteralfMSiFT3valBi64__Si : $@thin (Builtin.Int64, @thin Int64.metatype) -> Int64

// Parse SIL generated from the following swift program:
// func x(a : Bool) -> Int { if a { return 4 } else {return 5} }
sil @_TSb13getLogicValuefRSbFT_Bi1_ : $@cc(method) @thin (@inout Bool) -> Builtin.Int1
sil @_TSi33_convertFromBuiltinIntegerLiteralfMSiFT3valBi128__Si : $@thin (Builtin.Int128, @thin Int64.metatype) -> Int64

// CHECK-LABEL: @_T4test1xFT1aSb_Si
sil @_T4test1xFT1aSb_Si : $@thin (Bool) -> Int64 {
// CHECK: bb0(%0 : $Bool):
bb0(%0 : $Bool):
  // CHECK: alloc_stack $Bool
  %1 = alloc_stack $Bool
  // CHECK: store
  %2 = store %0 to %1#1 : $*Bool
  // CHECK: function_ref @_TSb13getLogicValuefRSbFT_Bi1_ : $@cc(method) @thin (@inout Bool) -> Builtin.Int1
  %3 = function_ref @_TSb13getLogicValuefRSbFT_Bi1_ : $@cc(method) @thin (@inout Bool) -> Builtin.Int1
  // CHECK: apply
  %4 = apply %3(%1#1) : $@cc(method) @thin (@inout Bool) -> Builtin.Int1
  // CHECK: cond_br
  %5 = cond_br %4, bb1, bb2

// CHECK: bb1:
bb1:
  // CHECK: function_ref @_TSi33_convertFromBuiltinIntegerLiteralfMSiFT3valBi128__Si : $@thin (Builtin.Int128, @thin Int64.metatype) -> Int64
  %6 = function_ref @_TSi33_convertFromBuiltinIntegerLiteralfMSiFT3valBi128__Si : $@thin (Builtin.Int128, @thin Int64.metatype) -> Int64
  // CHECK: metatype $@thin Int64.metatype
  %7 = metatype $@thin Int64.metatype
  // CHECK: integer_literal $Builtin.Int128, 4
  %8 = integer_literal $Builtin.Int128, 4
  // CHECK: apply
  %9 = apply %6(%8, %7) : $@thin (Builtin.Int128, @thin Int64.metatype) -> Int64
  // CHECK: dealloc_stack
  %10 = dealloc_stack %1#0 : $*@local_storage Bool
  // CHECK: br
  br bb3(%9 : $Int64)

// CHECK: bb2:
bb2:
  // CHECK: function_ref @_TSi33_convertFromBuiltinIntegerLiteralfMSiFT3valBi128__Si : $@thin (Builtin.Int128, @thin Int64.metatype) -> Int64
  %12 = function_ref @_TSi33_convertFromBuiltinIntegerLiteralfMSiFT3valBi128__Si : $@thin (Builtin.Int128, @thin Int64.metatype) -> Int64
  // CHECK: metatype $@thin Int64.metatype
  %13 = metatype $@thin Int64.metatype
  // CHECK: integer_literal $Builtin.Int128, 5
  %14 = integer_literal $Builtin.Int128, 5
  // CHECK: apply
  %15 = apply %12(%14, %13) : $@thin (Builtin.Int128, @thin Int64.metatype) -> Int64
  // CHECK: dealloc_stack
  %16 = dealloc_stack %1#0 : $*@local_storage Bool
  // CHECK: br
  br bb3(%15 : $Int64)

bb3(%17 : $Int64):
  // CHECK: return
  return %17 : $Int64
}


protocol P {
  func doIt()
}

sil @existentials : $@thin (@in P) -> () {
bb0(%0 : $*P):
  %1 = project_existential %0 : $*P to $*@sil_self P // CHECK: project_existential %0

  // CHECK: protocol_method {{.*}} : $*P, #P.doIt!1
  %2 = protocol_method %0 : $*P, #P.doIt!1 : $@cc(witness_method) (@inout @sil_self P) -> ()
  // CHECK: apply
  %3 = apply %2(%1) : $@cc(witness_method) (@inout @sil_self P) -> ()
  %4 = tuple ()                       // CHECK: tuple ()
  %5 = destroy_addr %0 : $*P          // CHECK: destroy_addr %0 : $*P
  %6 = return %4 : $()                // CHECK: return 
}


class C {
  func doIt() {}
}

class D : C {
  func doIt() {
    super.doIt()
  }
}


sil @classes : $@thin () -> () {
bb0:
  // CHECK: %0 = alloc_ref $C
  %C = alloc_ref $C
  // CHECK: ref_to_object_pointer %0 : $C to $Builtin.ObjectPointer
  %1 = ref_to_object_pointer %C : $C to $Builtin.ObjectPointer
  // CHECK: ref_to_object_pointer %0 : $C to $Builtin.ObjCPointer
  %O = ref_to_object_pointer %C : $C to $Builtin.ObjCPointer

  // CHECK: class_method {{.*}} : $C, #C.doIt!1
  %2 = class_method %C : $C, #C.doIt!1 : $@cc(method) @thin (@owned C) -> ()
  
  // CHECK: alloc_ref $D
  %D = alloc_ref $D
  
  // CHECK: upcast {{.*}} : $D to $C
  %a = upcast %D : $D to $C


  %5 = unconditional_checked_cast downcast %C : $C to $D   // CHECK: unconditional_checked_cast downcast
  %6 = tuple ()
  %7 = return %6 : $()
}

// Generated from:
// func archetype_member_ref<T:Runcible>(x:T) {
//   x.free_method()
//   var u = x.associated_method()
//   T.static_method()
// }

protocol Runcible {
  typealias U
  var free:Int
  var associated:U

  func free_method() -> Int
  func associated_method() -> U.metatype
  static func static_method()
}

/* SIL parsing of substitutions in apply insts is totally busted.
// C/HECK: $@thin <T : Runcible> (@in T) -> ()
sil @_T4arch20archetype_member_refUS_8Runcible___FT1xQ__T_ : $@thin <T : Runcible> (@in T) -> () {
bb0(%0 : $*T):
  // C/HECK: archetype_method $*T, #Runcible.free_method!1
  %1 = archetype_method $*T, #Runcible.free_method!1 : $@cc(method) (@inout T) -> Int64
  %2 = apply %1(%0) : $@cc(method) (@inout T) -> Int64
  %3 = alloc_stack $@thick T.U.metatype
  // C/HECK: archetype_method $*T, #Runcible.associated_method!1
  %4 = archetype_method $*T, #Runcible.associated_method!1 : $@cc(method) (@inout T) -> @thick T.U.metatype
  %5 = apply %4(%0) : $@cc(method) (@inout T) -> @thick T.U.metatype
  %6 = store %5 to %3#1 : $*@thick T.U.metatype
  %7 = metatype $@thick T.metatype
  // C/HECK: archetype_method [volatile] $*T, #Runcible.static_method!1
  %8 = archetype_method [volatile] $*T, #Runcible.static_method!1 : $(@thick T.metatype) -> ()
  %9 = apply %8(%7) : $(@thick T.metatype) -> ()
  %10 = dealloc_stack %3#0 : $*@local_storage @thick T.U.metatype
  %11 = tuple ()
  %12 = destroy_addr %0 : $*T
  %13 = return %11 : $()
}
*/

protocol Bendable { }

// CHECK: $@thin (@out Runcible, @in protocol<Bendable, Runcible>) -> ()
sil @_T4todo18erasure_from_protoFT1xPS_8RuncibleS_8Bendable__PS0__ : $@thin (@out Runcible, @in protocol<Bendable, Runcible>) -> () {
bb0(%0 : $*Runcible, %1 : $*protocol<Bendable, Runcible>):
  // CHECK: alloc_box
  %2 = alloc_box $protocol<Bendable, Runcible>
  // CHECK: copy_addr [take] {{.*}} to [initialization] {{.*}} : $*protocol<Bendable, Runcible>
  %3 = copy_addr [take] %1 to [initialization] %2#1 : $*protocol<Bendable, Runcible>
  // CHECK: alloc_stack
  %4 = alloc_stack $protocol<Bendable, Runcible>
  // CHECK: copy_addr {{.*}} to [initialization] {{.*}} : $*protocol<Bendable, Runcible>
  %5 = copy_addr %2#1 to [initialization] %4#1 : $*protocol<Bendable, Runcible>
  // CHECK: upcast_existential [take] {{.*}} : $*protocol<Bendable, Runcible> to {{.*}} : $*Runcible
  %6 = upcast_existential [take] %4#1 : $*protocol<Bendable, Runcible> to %0 : $*Runcible
  %7 = tuple ()
  // CHECK: destroy_addr
  %8 = destroy_addr %4#1 : $*protocol<Bendable, Runcible>
  // CHECK: dealloc_stack
  %9 = dealloc_stack %4#0 : $*@local_storage protocol<Bendable, Runcible>
  // CHECK: release
  %10 = strong_release %2#0 : $Builtin.ObjectPointer
  // CHECK: return
  %11 = return %7 : $()
}

@class_protocol protocol ClassBound {
  func classBoundMethod()
}

// CHECK: $@thin (ClassBound) -> ()
sil @_T4todo18class_bound_methodFT1xPS_10ClassBound__T_ : $@thin (ClassBound) -> () {
bb0(%0 : $ClassBound):
  %1 = alloc_box $ClassBound                // CHECK: alloc_box
  %2 = store %0 to %1#1 : $*ClassBound      // CHECK: store
  %3 = load %1#1 : $*ClassBound             // CHECK: load
  %4 = strong_retain %3 : $ClassBound              // CHECK: strong_retain
  // CHECK: project_existential_ref {{%.*}} : $ClassBound to $@sil_self ClassBound
  %5 = project_existential_ref %3 : $ClassBound to $@sil_self ClassBound
  // CHECK: protocol_method
  %6 = protocol_method %3 : $ClassBound, #ClassBound.classBoundMethod!1 : $@cc(witness_method) (@sil_self ClassBound) -> ()
  %7 = apply %6(%5) : $@cc(witness_method) (@sil_self ClassBound) -> ()
  %8 = tuple ()
  %9 = strong_release %1#0 : $Builtin.ObjectPointer
  %10 = return %8 : $()
}

struct Val {
}

// CHECK: $@thin (@thin Val.metatype) -> Val
sil @_TV4todo3ValCfMS0_FT_S0_ : $@thin (@thin Val.metatype) -> Val {
bb0(%0 : $@thin Val.metatype):
  %1 = alloc_stack $Val // CHECK: alloc_stack
  %3 = load %1#1 : $*Val
  dealloc_stack %1#0 : $*@local_storage Val
  %4 = return %3 : $Val
}

class Ref {
}
struct Aleph {
  var a:Ref
  var b:Val
}

// CHECK: $@thin (Ref, Val, @thin Aleph.metatype) -> Aleph
sil @_TV6struct5AlephCfMS0_FT1aCS_3Ref1bVS_3Val_S0_ : $@thin (Ref, Val, @thin Aleph.metatype) -> Aleph {
bb0(%0 : $Ref, %1 : $Val, %2 : $@thin Aleph.metatype):
  // CHECK: struct $Aleph ({{%.*}} : $Ref, {{%.*}} : $Val)
  %3 = struct $Aleph (%0 : $Ref, %1 : $Val)
  %4 = return %3 : $Aleph  // CHECK: return
}

// CHECK: $@thin (@thin Aleph.metatype) -> Aleph
sil @_TV6struct5AlephCfMS0_FT_S0_ : $@thin (@thin Aleph.metatype) -> Aleph {
bb0(%0 : $@thin Aleph.metatype):
  %1 = tuple ()
  %2 = alloc_box $Aleph       // CHECK: alloc_box
  // CHECK: struct_element_addr {{.*}} : $*Aleph, #a
  %5 = struct_element_addr %2#1 : $*Aleph, #a
  %6 = load %5 : $*Ref
  %8 = strong_release %6 : $Ref
  %14 = load %2#1 : $*Aleph
  // CHECK: struct_extract {{%.*}} : $Aleph, #a
  %15 = struct_extract %14 : $Aleph, #a
  %16 = strong_retain %15 : $Ref
  %17 = strong_release %2#0 : $Builtin.ObjectPointer
  %18 = return %14 : $Aleph
}

enum Beth {
  case EmptyCase
  case DataCase(Int)
}

// CHECK: sil @test_union_empty_case : $() -> Beth {
sil @test_union_empty_case : $() -> Beth {
bb0:
  // CHECK: %0 = enum $Beth, #Beth.EmptyCase!enumelt
  %0 = enum $Beth, #Beth.EmptyCase!enumelt
  return %0 : $Beth
}

// CHECK: sil @test_union_data_case : $(Int64) -> Beth {
sil @test_union_data_case : $Int64 -> Beth {
bb0(%0 : $Int):
  // CHECK: %1 = enum $Beth, #Beth.DataCase!enumelt.1, %0 : $Int64
  %1 = enum $Beth, #Beth.DataCase!enumelt.1, %0 : $Int64
  return %1 : $Beth
}

protocol Q {}

enum Gimel {
  case EmptyCase
  case DataCase(Q)
}

sil @test_union_addr_empty_case : $(@out Gimel) -> () {
bb0(%0 : $*Gimel):
  // CHECK: inject_enum_addr {{%.*}} : $*Gimel, #Gimel.EmptyCase!enumelt
  inject_enum_addr %0 : $*Gimel, #Gimel.EmptyCase!enumelt
  %t = tuple ()
  return %t : $()
}

sil @test_union_addr_data_case : $(@out Gimel, @in Q) -> () {
bb0(%0 : $*Gimel, %1 : $*Q):
  // CHECK: {{%.*}} = enum_data_addr {{%.*}} : $*Gimel, #Gimel.DataCase!enumelt.1
  %p = enum_data_addr %0 : $*Gimel, #Gimel.DataCase!enumelt.1
  copy_addr [take] %1 to [initialization] %p : $*Q
  inject_enum_addr %0 : $*Gimel, #Gimel.DataCase!enumelt.1
  %t = tuple ()
  return %t : $()
}

sil @_T5tuple5floatFT1xSf_T_ : $@thin (Float32) -> ()
sil @_T5tuple5tupleFT_TSiSf_ : $@thin () -> (Int64, Float32)

// CHECK: $@thin (Int64, Float32) -> ()
sil @_T5tuple13tuple_elementFT1xTSiSf__T_ : $@thin (Int64, Float32) -> () {
bb0(%0 : $Int64, %1 : $Float32):
  %2 = alloc_box $(Int64, Float32)
  // CHECK: tuple ({{%.*}} : $Int64, {{%.*}} : $Float32)
  %3 = tuple (%0 : $Int64, %1 : $Float32)
  %4 = store %3 to %2#1 : $*(Int64, Float32)
  // CHECK: tuple_element_addr {{%.*}}#{{.*}} : $*(Int64, Float32), 0
  %6 = tuple_element_addr %2#1 : $*(Int64, Float32), 0
  // CHECK: load
  %7 = load %6 : $*Int64
  // CHECK: tuple_element_addr {{%.*}}#{{.*}} : $*(Int64, Float32), 1
  %10 = tuple_element_addr %2#1 : $*(Int64, Float32), 1
  // CHECK: load
  %11 = load %10 : $*Float32
  // CHECK: function_ref
  %14 = function_ref @_T5tuple5tupleFT_TSiSf_ : $@thin () -> (Int64, Float32)
  // CHECK: apply
  %15 = apply %14() : $@thin () -> (Int64, Float32)
  // CHECK: function_ref
  %19 = function_ref @_T5tuple5floatFT1xSf_T_ : $@thin (Float32) -> ()
  // CHECK: tuple_extract {{%.*}} : $(Int64, Float32), 1
  %17 = tuple_extract %15 : $(Int64, Float32), 1
  // CHECK: apply
  %24 = apply %19(%17) : $@thin (Float32) -> ()
  %25 = tuple ()
  %26 = strong_release %2#0 : $Builtin.ObjectPointer
  %27 = return %25 : $()
}

class M {
  var member: Int
}

// CHECK: $@cc(method) @thin (Int64, M) -> ()
sil @_TC3ref1C3foofS0_FT1xSi_T_ : $@cc(method) @thin (Int64, M) -> () {
bb0(%0 : $Int64, %1 : $M):
  %2 = alloc_box $Int64     // CHECK: alloc_box $Int64
  %3 = store %0 to %2#1 : $*Int64
  %4 = alloc_box $M         // CHECK: alloc_box $M
  %5 = store %1 to %4#1 : $*M
  %6 = load %2#1 : $*Int64  // CHECK: load {{.*}} : $*Int64
  %7 = load %4#1 : $*M      // CHECK: load {{.*}} : $*M
  %8 = strong_retain %7 : $M
  // CHECK: ref_element_addr {{%.*}} : $M, #member
  %9 = ref_element_addr %7 : $M, #member
  %10 = store %6 to %9 : $*Int64
  %11 = strong_release %7 : $M
  %12 = tuple ()
  %13 = strong_release %4#0 : $Builtin.ObjectPointer
  %14 = strong_release %2#0 : $Builtin.ObjectPointer
  %15 = return %12 : $()
}

class GenericClass<Q> {
  var member: Q
}

// CHECK: sil @bound_generic_class_ref_element_addr : $@thin (GenericClass<Int64>) -> Int64 {
sil @bound_generic_class_ref_element_addr : $@thin GenericClass<Int64> -> Int64 {
entry(%0 : $GenericClass<Int64>):
  // CHECK: %1 = ref_element_addr %0 : $GenericClass<Int64>, #member
  %1 = ref_element_addr %0 : $GenericClass<Int64>, #member
  // CHECK: %2 = load %1 : $*Int64
  %2 = load %1 : $*Int64
  return %2 : $Int64
}

class B { }
class E : B { }

// CHECK: $@thin (B) -> Builtin.Int1
sil @_T4null3isaFT1bCS_1B_Sb : $@thin (B) -> Builtin.Int1 {
bb0(%0 : $B):
  %1 = alloc_box $B                           // CHECK: alloc_box
  %2 = store %0 to %1#1 : $*B
  %3 = load %1#1 : $*B                        // CHECK: load
  %4 = strong_retain %3 : $B
  checked_cast_br downcast %3 : $B to $E, yes, no     // CHECK: checked_cast_br downcast
yes(%5 : $E):
  %y = integer_literal $Builtin.Int1, 1
  br isa(%y : $Builtin.Int1)
no:
  %n = integer_literal $Builtin.Int1, 0
  br isa(%n : $Builtin.Int1)
isa(%6 : $Builtin.Int1):
  %7 = strong_release %3 : $B
  %8 = strong_release %1#0 : $Builtin.ObjectPointer
  %9 = return %6 : $Builtin.Int1
}

sil @_TSd31_convertFromBuiltinFloatLiteralfMSdFT5valueBf64__Sd : $@thin (Builtin.FPIEEE64, @thin Float64.metatype) -> Float64
sil @_TSS32_convertFromBuiltinStringLiteralfMSSFT5valueBp8byteSizeBi64_7isASCIIBi1__SS : $@thin (Builtin.RawPointer, Builtin.Int64, Builtin.Int1, @thin String.metatype) -> String


sil @_T5index5gep64FT1pBp1iBi64__Bp : $@thin (Builtin.RawPointer, Builtin.Int64) -> Builtin.RawPointer {
bb0(%0 : $Builtin.RawPointer, %1 : $Builtin.Int64):
  %2 = alloc_box $Builtin.RawPointer              // CHECK: alloc_box
  %3 = alloc_box $Builtin.Int64                   // CHECK: alloc_box
  %4 = store %0 to %2#1 : $*Builtin.RawPointer
  %5 = store %1 to %3#1 : $*Builtin.Int64
  %7 = load %2#1 : $*Builtin.RawPointer           // CHECK: load
  %8 = load %3#1 : $*Builtin.Int64                // CHECK: load
  // CHECK: index_raw_pointer {{%.*}} : $Builtin.RawPointer, {{%.*}} : $Builtin.Int64
  %9 = index_raw_pointer %7 : $Builtin.RawPointer, %8 : $Builtin.Int64
  %10 = strong_release %3#0 : $Builtin.ObjectPointer
  %11 = strong_release %2#0 : $Builtin.ObjectPointer
  %12 = return %9 : $Builtin.RawPointer
}

var x: Int = 0
sil @global_callee : $@thin (Builtin.Int128, @thin Int64.metatype) -> Int64

// CHECK: $() -> ()
sil internal @global_code : $() -> () {
bb0:
  // CHECK: global_addr #x : $*Int64
  %0 = global_addr #x : $*Int64
  %1 = function_ref @global_callee : $@thin (Builtin.Int128, @thin Int64.metatype) -> Int64
  %2 = metatype $@thin Int64.metatype
  %3 = integer_literal $Builtin.Int128, 0 // CHECK: integer_literal $Builtin.Int128, 0
  %4 = apply %1(%3, %2) : $@thin (Builtin.Int128, @thin Int64.metatype) -> Int64
  %5 = store %4 to %0 : $*Int64
  %6 = tuple ()
  %7 = return %6 : $()
}

protocol SomeProtocol {
}
class SomeClass : SomeProtocol {
}
class SomeSubclass : SomeClass {}

sil @test_class_metatype : $@thin (SomeClass, SomeSubclass) -> (@thick SomeClass.metatype, @thick SomeClass.metatype) {
bb0(%0 : $SomeClass, %1 : $SomeSubclass):
  %2 = alloc_box $SomeClass                       // CHECK: alloc_box
  %3 = alloc_box $SomeSubclass                    // CHECK: alloc_box
  %4 = store %0 to %2#1 : $*SomeClass
  %5 = store %1 to %3#1 : $*SomeSubclass
  %7 = load %2#1 : $*SomeClass                    // CHECK: load
  %8 = strong_retain %7 : $SomeClass
  // CHECK: class_metatype $@thick SomeClass.metatype, {{%.*}} : $SomeClass
  %9 = class_metatype $@thick SomeClass.metatype, %7 : $SomeClass
  %11 = load %3#1 : $*SomeSubclass                // CHECK: load
  %12 = strong_retain %11 : $SomeSubclass
  // CHECK: class_metatype $@thick SomeSubclass.metatype, {{%.*}} : $SomeSubclass
  %13 = class_metatype $@thick SomeSubclass.metatype, %11 : $SomeSubclass
  %14 = upcast %13 : $@thick SomeSubclass.metatype to $@thick SomeClass.metatype  // CHECK: upcast
  %15 = tuple (%9 : $@thick SomeClass.metatype, %14 : $@thick SomeClass.metatype) // CHECK: tuple
  %16 = strong_release %11 : $SomeSubclass
  %17 = strong_release %7 : $SomeClass
  %18 = strong_release %3#0 : $Builtin.ObjectPointer
  %19 = strong_release %2#0 : $Builtin.ObjectPointer
  %20 = return %15 : $(@thick SomeClass.metatype, @thick SomeClass.metatype)
}

sil @test_archetype_metatype : $@thin <T> (@in T) -> (@thick T.metatype, @thick T.metatype) {
bb0(%0 : $*T):
  %1 = alloc_box $T                               // CHECK: alloc_box
  %2 = copy_addr [take] %0 to [initialization] %1#1 : $*T
  %3 = metatype $@thick T.metatype                       // CHECK: metatype
  %5 = alloc_stack $T                               // CHECK: alloc_stack
  %6 = copy_addr %1#1 to [initialization] %5#1 : $*T
  // CHECK: archetype_metatype $@thick T.metatype, {{%.*}} : $*T
  %7 = archetype_metatype $@thick T.metatype, %5#1 : $*T
  %8 = tuple (%3 : $@thick T.metatype, %7 : $@thick T.metatype) // CHECK: tuple
  %9 = destroy_addr %5#1 : $*T
  %10 = dealloc_stack %5#0 : $*@local_storage T
  %11 = strong_release %1#0 : $Builtin.ObjectPointer
  %12 = return %8 : $(@thick T.metatype, @thick T.metatype)
}

sil @test_protocol_metatype : $@thin (@in SomeProtocol) -> @thick SomeProtocol.metatype {
bb0(%0 : $*SomeProtocol):
  %1 = alloc_box $SomeProtocol                    // CHECK: alloc_box
  %2 = copy_addr [take] %0 to [initialization] %1#1 : $*SomeProtocol
  %4 = alloc_stack $SomeProtocol                    // CHECK: alloc_stack
  %5 = copy_addr %1#1 to [initialization] %4#1 : $*SomeProtocol
  // CHECK: protocol_metatype $@thick SomeProtocol.metatype, {{%.*}} : $*SomeProtocol
  %6 = protocol_metatype $@thick SomeProtocol.metatype, %4#1 : $*SomeProtocol
  %7 = destroy_addr %4#1 : $*SomeProtocol
  %8 = dealloc_stack %4#0 : $*@local_storage SomeProtocol
  %9 = strong_release %1#0 : $Builtin.ObjectPointer
  %10 = return %6 : $@thick SomeProtocol.metatype
}

// CHECK-LABEL: sil @test_unreachable
sil @test_unreachable : $() -> () {
bb0:
  unreachable
// CHECK: unreachable
}

sil @test_unowned_retain : $@thin (SomeClass) -> () {
bb0(%0 : $SomeClass):
  %1 = ref_to_unowned %0 : $SomeClass to $@sil_unowned SomeClass
// CHECK: ref_to_unowned %0 : $SomeClass to $@sil_unowned SomeClass
  %2 = unowned_retain %1 : $@sil_unowned SomeClass
// CHECK: unowned_retain %1 : $@sil_unowned SomeClass
  %3 = unowned_release %1 : $@sil_unowned SomeClass
// CHECK: unowned_release %1 : $@sil_unowned SomeClass
  %4 = unowned_to_ref %1 : $@sil_unowned SomeClass to $SomeClass
// CHECK: unowned_to_ref %1 : $@sil_unowned SomeClass to $SomeClass
  %5 = tuple ()
  %6 = return %5 : $()
}

// CHECK-LABEL: sil @test_basic_block_arguments
sil @test_basic_block_arguments : $@thin (Builtin.Int1) -> Builtin.Int64 {
bb0(%0 : $Builtin.Int1):
  cond_br %0, bb1, bb2
bb1:                                        
  %2 = integer_literal $Builtin.Int64, 5       
  br bb3(%2 : $Builtin.Int64)
//CHECK: br bb3(%2 : $Builtin.Int64)
bb2:                                            
  %4 = integer_literal $Builtin.Int64, 6        
  br bb3(%4 : $Builtin.Int64)
//CHECK: br bb3(%4 : $Builtin.Int64)
bb3(%6 : $Builtin.Int64):                               
//CHECK: bb3(%6 : $Builtin.Int64)
  return %6 : $Builtin.Int64
}

// CHECK-LABEL: sil @test_cond_branch_basic_block_args
sil @test_cond_branch_basic_block_args : $@thin (Int64, Builtin.Int1) -> Int64 {
bb0(%0 : $Int64, %1 : $Builtin.Int1):
  cond_br %1, bb1(%0 : $Int64), bb2(%0 : $Int64)
// CHECK: cond_br %1, bb1(%0 : $Int64), bb2(%0 : $Int64)
bb1(%3 : $Int64):
  br bb3 (%3 : $Int64)
bb2(%2 : $Int64):
  br bb3(%2 : $Int64)
bb3(%4 : $Int64):
  return %4 : $Int64
}

// CHECK-LABEL: sil @test_builtin_func_ref
sil @test_builtin_func_ref : $@thin (Builtin.Int1, Builtin.Int1) -> Builtin.Int1 {
bb0(%0 : $Builtin.Int1, %1 : $Builtin.Int1):
  %2 = alloc_box $Builtin.Int1
  %3 = alloc_box $Builtin.Int1
  store %0 to %2#1 : $*Builtin.Int1
  store %1 to %3#1 : $*Builtin.Int1
  // CHECK: builtin_function_ref "cmp_eq_Int1" : $@thin (Builtin.Int1, Builtin.Int1) -> Builtin.Int1
  %7 = builtin_function_ref "cmp_eq_Int1" : $@thin (Builtin.Int1, Builtin.Int1) -> Builtin.Int1
  %8 = load %2#1 : $*Builtin.Int1
  %9 = load %3#1 : $*Builtin.Int1
  %10 = apply %7(%8, %9) : $@thin (Builtin.Int1, Builtin.Int1) -> Builtin.Int1
  strong_release %3#0 : $Builtin.ObjectPointer
  strong_release %2#0 : $Builtin.ObjectPointer
  return %10 : $Builtin.Int1
}

// CHECK-LABEL: sil @test_dealloc_ref
sil @test_dealloc_ref : $@thin () -> () {
bb0:
  %0 = alloc_ref $Class1
  dealloc_ref %0 : $Class1
  %2 = tuple ()
  return %2 : $()
}

// CHECK-LABEL: sil @test_dealloc_box
sil @test_dealloc_box : $@thin () -> () {
bb0:
  %0 = alloc_box $Class1
  dealloc_box $Class1, %0#0 : $Builtin.ObjectPointer
  %2 = tuple ()
  return %2 : $()
}



// CHECK-LABEL: closure_test
sil @takes_closure : $@thin (@callee_owned () -> ()) -> ()
sil @closure0 : $@thin (Builtin.ObjectPointer, @inout Int64) -> ()

sil @closure_test : $@thin () -> () {
bb0:
  %0 = alloc_box $Int64                           // users: %10, %8, %8, %7, %4

  %5 = function_ref @takes_closure : $@thin (@callee_owned () -> ()) -> ()
  %6 = function_ref @closure0 : $@thin (Builtin.ObjectPointer, @inout Int64) -> ()
  strong_retain %0#0 : $Builtin.ObjectPointer
  %8 = partial_apply %6(%0#0, %0#1) : $@thin (Builtin.ObjectPointer, @inout Int64) -> ()
  %9 = apply %5(%8) : $@thin (@callee_owned () -> ()) -> ()
  strong_release %0#0 : $Builtin.ObjectPointer

  %11 = tuple ()
  return %11 : $()
}

sil @test_super_to_archetype_ref : $@thin <T : Class1> (Class1) -> T {
bb0(%c : $Class1):
  %0 = unconditional_checked_cast super_to_archetype %c : $Class1 to $T
  return %0 : $T
}

sil @test_downcast_archetype_addr : $@thin <T, U> (@in T) -> () {
bb0(%t : $*T):
  %0 = unconditional_checked_cast archetype_to_archetype %t : $*T to $*U
  %1 = tuple ()
  return %1 : $()
}

sil @test_downcast_archetype_ref : $@thin <T:Class1, U:Class1> (T) -> () {
bb0(%t : $T):
  %0 = unconditional_checked_cast archetype_to_archetype %t : $T to $U
  %1 = tuple ()
  return %1 : $()
}

sil @test_project_downcast_existential_addr : $@thin <U> (@in P) -> () {
bb0(%t : $*P):
  %0 = unconditional_checked_cast existential_to_archetype %t : $*P to $*U
  %1 = tuple ()
  return %1 : $()
}

@class_protocol protocol ClassP {}

sil @test_downcast_existential_ref : $@thin <U : ClassP> (ClassP) -> () {
bb0(%t : $ClassP):
  %0 = unconditional_checked_cast existential_to_archetype %t : $ClassP to $U
  %1 = tuple ()
  return %1 : $()
}

enum MaybePair {
  case Neither
  case Left(Int)
}

sil @_T6switch1aFT_T_ : $@thin () -> ()
sil @_T6switch1bFT_T_ : $@thin () -> ()
sil @_T6switch1cFT_T_ : $@thin () -> ()

// CHECK-LABEL: sil @test_switch_union : $@thin (MaybePair) -> ()
sil @test_switch_union : $@thin (MaybePair) -> () {
bb0(%0 : $MaybePair):
  %1 = alloc_box $MaybePair
  store %0 to %1#1 : $*MaybePair
  %3 = load %1#1 : $*MaybePair
  %4 = tuple ()
  // CHECK: switch_enum %{{.*}} : $MaybePair, case #MaybePair.Neither!enumelt: bb{{.*}}, case #MaybePair.Left!enumelt.1: bb
  switch_enum %3 : $MaybePair, case #MaybePair.Neither!enumelt: bb1, case #MaybePair.Left!enumelt.1: bb3

bb1:
  br bb2

bb2:
  %7 = function_ref @_T6switch1aFT_T_ : $@thin () -> () // CHECK: function_ref
  %8 = apply %7() : $@thin () -> ()
  br bb5                                                 // CHECK: br

bb3(%10 : $Int64):
  br bb4

bb4:
  %12 = function_ref @_T6switch1bFT_T_ : $@thin () -> () // CHECK: function_ref
  %13 = apply %12() : $@thin () -> ()
  br bb5                                                  // CHECK: br

bb5:
  %15 = function_ref @_T6switch1cFT_T_ : $@thin () -> () // CHECK: function_ref
  %16 = apply %15() : $@thin () -> ()
  strong_release %1#0 : $Builtin.ObjectPointer                   // CHECK: release
  %18 = tuple ()
  return %18 : $()                                        // CHECK: return
}

enum MaybeAddressOnlyPair {
  case Neither
  case Left(Q)
}

// CHECK-LABEL: sil @test_switch_union_addr : $@thin (@in MaybeAddressOnlyPair) -> ()
sil @test_switch_union_addr : $@thin (@in MaybeAddressOnlyPair) -> () {
bb0(%0 : $*MaybeAddressOnlyPair):
  // CHECK: destructive_switch_enum_addr %{{.*}} : $*MaybeAddressOnlyPair, case #MaybeAddressOnlyPair.Neither!enumelt: bb{{.*}}, case #MaybeAddressOnlyPair.Left!enumelt.1: bb
  destructive_switch_enum_addr %0 : $*MaybeAddressOnlyPair, case #MaybeAddressOnlyPair.Neither!enumelt: bb1, case #MaybeAddressOnlyPair.Left!enumelt.1: bb2

bb1:
  br bb3

bb2(%q : $*Q):
  br bb3

bb3:
  %t = tuple ()
  return %t : $()
}

// CHECK-LABEL: sil @test_switch_int : $@thin (Builtin.Int64) -> ()
sil @test_switch_int : $@thin (Builtin.Int64) -> () {
bb0(%0 : $Builtin.Int64):
  // CHECK: switch_int %{{.*}} : $Builtin.Int64, case 1: bb1, case 2: bb2
  switch_int %0 : $Builtin.Int64, case 1: bb1, case 2: bb2

bb1:
  %7 = function_ref @_T6switch1aFT_T_ : $@thin () -> () // CHECK: function_ref
  %8 = apply %7() : $@thin () -> ()
  br bb3

bb2:
  %12 = function_ref @_T6switch1bFT_T_ : $@thin () -> () // CHECK: function_ref
  %13 = apply %12() : $@thin () -> ()
  br bb3

bb3:
  %18 = tuple ()
  return %18 : $()                                        // CHECK: return
}

class ConcreteClass : ClassP {
}
struct Spoon : Bendable {
}

// CHECK-LABEL: sil @test_init_existential : $@thin (@out Bendable, Spoon) -> ()
sil @test_init_existential : $@thin (@out Bendable, Spoon) -> () {
bb0(%0 : $*Bendable, %1 : $Spoon):
  %2 = alloc_box $Spoon
  store %1 to %2#1 : $*Spoon
  // CHECK: init_existential %{{.*}} : $*Bendable, $*Spoon
  %4 = init_existential %0 : $*Bendable, $*Spoon
  // CHECK: deinit_existential %{{.*}} : $*Bendable
  deinit_existential %0 : $*Bendable
  %5 = load %2#1 : $*Spoon
  store %5 to %4 : $*Spoon
  strong_release %2#0 : $Builtin.ObjectPointer
  %8 = tuple ()
  return %8 : $()
}

// CHECK-LABEL: sil @test_existential_ref : $@thin (ConcreteClass) -> ClassP
sil @test_existential_ref : $@thin (ConcreteClass) -> ClassP {
bb0(%0 : $ConcreteClass):
  %1 = alloc_box $ConcreteClass
  store %0 to %1#1 : $*ConcreteClass
  %3 = load %1#1 : $*ConcreteClass
  strong_retain %3 : $ConcreteClass
  // CHECK: init_existential_ref %{{.*}} : $ConcreteClass, $ClassP
  %5 = init_existential_ref %3 : $ConcreteClass, $ClassP
  strong_release %1#0 : $Builtin.ObjectPointer
  return %5 : $ClassP
}

sil @test_assign : $(Int64, @inout Int64) -> () {    // CHECK-LABEL: sil @test_assign
bb0(%0 : $Int64, %1 : $*Int64):
  assign %0 to %1 : $*Int64                   // CHECK:   assign %0 to %1
  unreachable
}

// CHECK-LABEL: sil @test_transparent : $@thin () -> () {
sil @test_transparent : $@thin () -> () {
bb0:
  %0 = function_ref @classes : $@thin () -> ()
  // CHECK: apply [transparent] %{{.*}}() : $@thin () -> ()
  %1 = apply [transparent] %0() : $@thin () -> ()
  %2 = tuple ()
  %3 = return %2 : $()
}

// CHECK-LABEL: sil @takes_unnamed_closure : $@thin (@callee_owned () -> Int64) -> () -> () -> Int64
sil @takes_unnamed_closure : $@thin (@callee_owned () -> Int64) -> () -> () -> Int64

sil @takes_int64_float32 : $@thin (Int64, Float32) -> ()

// CHECK-LABEL: sil @test_partial_apply : $@thin (Float32) -> @callee_owned (Int64) -> () {
sil @test_partial_apply : $@thin Float32 -> @callee_owned Int64 -> () {
bb0(%0 : $Float32):
  %1 = function_ref @takes_int64_float32 : $@thin (Int64, Float32) -> ()
  // CHECK: partial_apply %{{.*}}(%{{.*}}) : $@thin (Int64, Float32) -> ()
  %2 = partial_apply %1(%0) : $@thin (Int64, Float32) -> ()
  %3 = return %2 : $@callee_owned Int64 -> ()
}

class X {
  @objc func f() { }
}

// CHECK-LABEL: sil @test_dynamic_lookup_br : $@thin (DynamicLookup) -> ()
sil @test_dynamic_lookup_br : $@thin (DynamicLookup) -> () {
bb0(%0 : $DynamicLookup):
  %1 = alloc_box $DynamicLookup
  store %0 to %1#1 : $*DynamicLookup
  %3 = alloc_box $Optional<() -> ()>
  %4 = load %1#1 : $*DynamicLookup
  strong_retain %4 : $DynamicLookup
  %6 = project_existential_ref %4 : $DynamicLookup to $@sil_self DynamicLookup
  %7 = ref_to_object_pointer %6 : $@sil_self DynamicLookup to $Builtin.ObjCPointer
  dynamic_method_br %7 : $Builtin.ObjCPointer, #X.f!1, bb1, bb2
bb1:
  br bb3

bb2:
  br bb3

bb3:
  %28 = tuple ()
  return %28 : $()
}

// CHECK-LABEL: sil @test_mark_fn_escape
sil @test_mark_fn_escape : $() -> () {
  %b = alloc_box $Int64
  %c = alloc_box $Int64

  // CHECK: mark_function_escape {{.*}}#1 : $*Int64
  mark_function_escape %b#1 : $*Int64
  // CHECK: mark_function_escape {{.*}}#1 : $*Int64, {{.*}}#1 : $*Int64
  mark_function_escape %b#1 : $*Int64, %c#1 : $*Int64

  %28 = tuple ()
  return %28 : $()
}

// CHECK-LABEL: sil @test_copy_destroy_value
sil @test_copy_destroy_value : $(Val) -> (Val) {
bb0(%0 : $Val):
  %1 = copy_value %0 : $Val
  destroy_value %0 : $Val
  return %1 : $Val
// CHECK:      [[T1:%.*]] = copy_value [[T0:%.*]] : $Val
// CHECK-NEXT: destroy_value [[T0]] : $Val
// CHECK-NEXT: return [[T1]] : $Val
}

struct GenericStruct<T> {
  var x : T
}

// CHECK-LABEL: sil @extract_generic_struct
sil @extract_generic_struct : $GenericStruct<Int64> -> Int64 {
entry(%0 : $GenericStruct<Int64>):
  // CHECK: %1 = struct_extract %0 : $GenericStruct<Int64>, #x
  %1 = struct_extract %0 : $GenericStruct<Int64>, #x
  // CHECK: return %1 : $Int64
  return %1 : $Int64
}

class Foo {
  subscript (x: Int, y: Int) -> Int
  var x: Int
  var y: Int
}

sil @_TC3tmp3Foo9subscriptFT1xSi1ySi_Sig : $@cc(method) @thin (Int64, Int64, Foo) -> Int64 {
bb0(%0 : $Int64, %1 : $Int64, %2 : $Foo):
  %3 = tuple ()
  %4 = alloc_stack $Int64  // var x               // users: %17, %6
  %5 = alloc_stack $Int64  // var y               // users: %16, %7
  store %0 to %4#1 : $*Int64
  store %1 to %5#1 : $*Int64
  %8 = alloc_stack $Foo  // var self              // users: %15, %14, %9
  store %2 to %8#1 : $*Foo
  %10 = metatype $@thin Int64.metatype
  %12 = integer_literal $Builtin.Int64, 0         // user: %13
  %13 = struct $Int64 (%12 : $Builtin.Int64)      // user: %18
  destroy_addr %8#1 : $*Foo
  dealloc_stack %8#0 : $*@local_storage Foo
  dealloc_stack %5#0 : $*@local_storage Int64
  dealloc_stack %4#0 : $*@local_storage Int64
  return %13 : $Int64
}

sil @_TC3tmp3Foo9subscriptFT1xSi1ySi_Sis : $@cc(method) @thin (Int64, Int64, Int64, Foo) -> () {
bb0(%0 : $Int64, %1 : $Int64, %2 : $Int64, %3 : $Foo):
  %4 = alloc_stack $Int64  // var value           // users: %16, %5
  store %0 to %4#1 : $*Int64
  %6 = alloc_stack $Int64  // var x               // users: %15, %8
  %7 = alloc_stack $Int64  // var y               // users: %14, %9
  store %1 to %6#1 : $*Int64
  store %2 to %7#1 : $*Int64
  %10 = alloc_stack $Foo  // var self             // users: %13, %12, %11
  store %3 to %10#1 : $*Foo
  destroy_addr %10#1 : $*Foo
  dealloc_stack %10#0 : $*@local_storage Foo
  dealloc_stack %7#0 : $*@local_storage Int64
  dealloc_stack %6#0 : $*@local_storage Int64
  dealloc_stack %4#0 : $*@local_storage Int64
  %17 = tuple ()                                  // user: %18
  return %17 : $()
}

// CHECK: sil @cond_fail_test : $(Builtin.Int1) -> () {
sil @cond_fail_test : $Builtin.Int1 -> () {
entry(%0 : $Builtin.Int1):
  // CHECK: cond_fail %0 : $Builtin.Int1
  cond_fail %0 : $Builtin.Int1
  %1 = tuple ()
  return %1 : $()
}

var staticProp: Int64 = 0

// CHECK-LABEL: sil internal @globalinit_func0 : $@thin () -> () {
sil internal @globalinit_func0 : $@thin () -> () {
bb0:
  %0 = global_addr #staticProp : $*Int64
  %1 = mark_uninitialized [globalvar] %0 : $*Int64
  %7 = tuple ()
  return %7 : $()
}

// CHECK-LABEL: sil @_TV18lazy_global_access4Type10staticPropSia : $@thin () -> Builtin.RawPointer {
sil @_TV18lazy_global_access4Type10staticPropSia : $@thin () -> Builtin.RawPointer {
bb0:
  %0 = builtin_function_ref "once" : $@thin (Builtin.RawPointer, @owned @callee_owned () -> ()) -> ()
  // CHECK: sil_global_addr @globalinit_token0 : $*Builtin.Word
  %1 = sil_global_addr @globalinit_token0 : $*Builtin.Word
  %2 = address_to_pointer %1 : $*Builtin.Word to $Builtin.RawPointer
  %3 = function_ref @globalinit_func0 : $@thin () -> ()
  %4 = thin_to_thick_function %3 : $@thin () -> () to $@callee_owned () -> ()
  %5 = apply %0(%2, %4) : $@thin (Builtin.RawPointer, @owned @callee_owned () -> ()) -> ()
  %6 = global_addr #staticProp : $*Int64
  %7 = address_to_pointer %6 : $*Int64 to $Builtin.RawPointer
  return %7 : $Builtin.RawPointer
}

// CHECK-LABEL: sil @thin_metatype : $@thin (@thin Int64.metatype) -> @thick Int64.metatype
sil @thin_metatype : $@thin (@thin Int64.metatype) -> @thick Int64.metatype

// CHECK-LABEL: sil_vtable Foo {
// CHECK: #Foo.subscript!getter.2: _TC3tmp3Foo9subscriptFT1xSi1ySi_Sig
// CHECK: #Foo.subscript!setter.2: _TC3tmp3Foo9subscriptFT1xSi1ySi_Sis
// CHECK: } 
sil_vtable Foo {
  #Foo.subscript!getter.2: _TC3tmp3Foo9subscriptFT1xSi1ySi_Sig
  #Foo.subscript!setter.2: _TC3tmp3Foo9subscriptFT1xSi1ySi_Sis
}

sil @undef_value : $() -> () {
bb0:
  store undef to undef : $*Builtin.Int1
  unreachable
}

