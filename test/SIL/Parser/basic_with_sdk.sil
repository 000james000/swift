// RUN: rm -rf %t
// RUN: mkdir -p %t
// RUN: %swift %s -module-cache-path=%t/clang-module-cache -sdk=%sdk -emit-silgen | FileCheck %s
// REQUIRES: sdk

sil_stage raw // CHECK: sil_stage raw

import Builtin
import swift
import Foundation

class Bas : NSObject {
  var strRealProp : String
}

// Generated from
// class Bas : NSObject {
//   var strRealProp : String
//   init() {
//     super.init()
//   }
// }
// CHECK-LABEL: sil @test_autorelease_return
sil @test_autorelease_return : $@cc(objc_method) @thin (Bas) -> @autoreleased NSString {
bb0(%0 : $Bas):
  strong_retain %0 : $Bas
  %2 = ref_element_addr %0 : $Bas, #strRealProp
  %3 = load %2 : $*String
  strong_release %0 : $Bas
  %5 = struct_extract %3 : $String, #str_value
  %6 = struct_extract %5 : $StringByteData, #owner
  strong_retain %6 : $Builtin.ObjectPointer
  %8 = function_ref @swift_StringToNSString : $@thin (@inout String) -> @owned NSString
  %9 = alloc_stack $String
  store %3 to %9#1 : $*String
  %11 = apply %8(%9#1) : $@thin (@inout String) -> @owned NSString
  dealloc_stack %9#0 : $*@local_storage String
  %13 = struct_extract %3 : $String, #str_value
  %14 = struct_extract %13 : $StringByteData, #owner
  strong_release %14 : $Builtin.ObjectPointer
  // CHECK: autorelease_return %11 : $NSString
  autorelease_return %11 : $NSString
}
sil @swift_StringToNSString : $@thin (@inout String) -> @owned NSString

// CHECK-LABEL: sil @test_super_method
sil @test_super_method : $@cc(method) @thin (Bas) -> Bas {
bb0(%0 : $Bas):
  %1 = tuple ()
  %2 = alloc_box $Bas
  store %0 to %2#1 : $*Bas
  %4 = function_ref @_TSSCfMSSFT_SS : $@thin (@thin String.metatype) -> String
  %5 = metatype $@thin String.metatype
  %6 = apply %4(%5) : $@thin (@thin String.metatype) -> String
  %7 = load %2#1 : $*Bas
  strong_retain %7 : $Bas
  %9 = ref_element_addr %7 : $Bas, #strRealProp
  %10 = load %9 : $*String
  store %6 to %9 : $*String
  %12 = struct_extract %10 : $String, #str_value
  %13 = struct_extract %12 : $StringByteData, #owner
  strong_release %13 : $Builtin.ObjectPointer
  strong_release %7 : $Bas
  %16 = load %2#1 : $*Bas
  strong_retain %16 : $Bas
  %18 = upcast %16 : $Bas to $NSObject
  // CHECK: super_method [volatile] %16 : $Bas, #NSObject.init!initializer.1.foreign :
  %19 = super_method [volatile] %16 : $Bas, #NSObject.init!initializer.1.foreign : $@cc(objc_method) @thin (@owned NSObject) -> @owned NSObject
  %20 = apply %19(%18) : $@cc(objc_method) @thin (@owned NSObject) -> @owned NSObject
  strong_retain_autoreleased %20 : $NSObject
  %22 = unconditional_checked_cast downcast %20 : $NSObject to $Bas
  %23 = load %2#1 : $*Bas
  store %22 to %2#1 : $*Bas
  strong_release %23 : $Bas
  strong_release %16 : $Bas
  %27 = load %2#1 : $*Bas
  strong_retain %27 : $Bas
  strong_release %2#0 : $Builtin.ObjectPointer
  return %27 : $Bas
}
sil @_TSSCfMSSFT_SS : $@thin (@thin String.metatype) -> String

