import Swift
import CoreFoundation

@asmname("inlineMe") public func inlineMe() -> Bool


sil public_external @_TFSsoi2neUSs9Equatable__FTQ_Q__Sb : $@thin <τ_0_0 where τ_0_0 : Equatable> (@in τ_0_0, @in τ_0_0) -> Bool

// main.test (C.CFComparisonResult) -> Swift.Bool
sil public [fragile] @inlineMe : $@thin () -> Bool {
bb0:
  // function_ref Swift.!= infix <A : Swift.Equatable>(A, A) -> Swift.Bool
  %0 = function_ref @_TFSsoi2neUSs9Equatable__FTQ_Q__Sb : $@thin <τ_0_0 where τ_0_0 : Equatable> (@in τ_0_0, @in τ_0_0) -> Bool // user: %7
  %1 = alloc_stack $CFComparisonResult            // users: %3, %7, %9
  %2 = enum $CFComparisonResult, #CFComparisonResult.CompareEqualTo!enumelt // user: %3
  store %2 to %1#1 : $*CFComparisonResult         // id: %3
  %4 = alloc_stack $CFComparisonResult            // users: %6, %7, %8
  %5 = enum $CFComparisonResult, #CFComparisonResult.CompareEqualTo!enumelt // user: %6
  store %5 to %4#1 : $*CFComparisonResult         // id: %6
  %7 = apply %0<CFComparisonResult>(%1#1, %4#1) : $@thin <τ_0_0 where τ_0_0 : Equatable> (@in τ_0_0, @in τ_0_0) -> Bool // user: %10
  dealloc_stack %4#0 : $*@local_storage CFComparisonResult // id: %8
  dealloc_stack %1#0 : $*@local_storage CFComparisonResult // id: %9
  return %7 : $Bool                               // id: %10
}