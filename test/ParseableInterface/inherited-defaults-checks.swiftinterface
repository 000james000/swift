// swift-interface-format-version: 1.0
// swift-module-flags: -module-name InheritedDefaults

// RUN: %empty-directory(%t)
// RUN: %target-typecheck-verify-swift
// BUN: %target-swift-frontend -typecheck -verify -module-cache-path %t/MCP -o %t/InheritedDefaults.swiftmodule -module-name InheritedDefaults %s

import Swift

public class Bar {
  public init(x: Int = 24, y: Int)
}

public class Foo: Bar {
  public override init(x: Int = super, y: Int)
  public subscript(k: Int = super) -> Int { get } // expected-error {{default value inheritance via 'super' is only valid for initializer parameters}}
  public func foo(z: Int = super) // expected-error {{default value inheritance via 'super' is only valid for initializer parameters}}
}

public class Baz: Bar {
  public override init(x: Int = super, y: Int = super) // expected-error {{default value inheritance via 'super' requires that the corresponding parameter of the overridden initializer has a default value}}
}

public class Direct: Bar {
  public override init(x: Int = super, y: Int)
  public override init(other: Int = super, value: Int) // expected-error {{argument labels for initializer 'init(other:value:)' do not match those of overridden initializer 'init(x:y:)'}}
  // expected-error@-1 {{default value inheritance via 'super' can only be used on the parameters of overriding initializers}}
}

public class Indirect: Direct {
  public override init(x: Int = super, y: Int)
  public override init(other: Int = super, value: Int)
}

public enum Bob {
  case bar(p: Int)
  public init(foo: String = super /*comment*/) // expected-error {{default value inheritance via 'super' can only be used on the parameters of overriding initializers}}
}
