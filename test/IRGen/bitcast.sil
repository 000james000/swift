// RUN: %swift -target x86_64-apple-macosx10.9 -emit-ir %s | FileCheck %s
// XFAIL: linux

sil_stage canonical

import Swift

class C {}

// CHECK-LABEL: define i64 @bitcast_trivial(%C7bitcast1C*) {
// CHECK:         [[BUF:%.*]] = alloca %C7bitcast1C*, align 8
// CHECK:         store %C7bitcast1C* %0, %C7bitcast1C** [[BUF]]
// CHECK:         [[OUT_BUF:%.*]] = bitcast %C7bitcast1C** [[BUF]] to %Si*
// CHECK:         [[VALUE_BUF:%.*]] = getelementptr inbounds %Si* [[OUT_BUF]], i32 0, i32 0
// CHECK:         [[VALUE:%.*]] = load i64* [[VALUE_BUF]], align 8
// CHECK:         ret i64 [[VALUE]]
// CHECK:       }
sil @bitcast_trivial: $@thin (C) -> Int {
entry(%c : $C):
  %i = unchecked_trivial_bit_cast %c : $C to $Int
  return %i : $Int
}

// CHECK-LABEL: define i64 @bitcast_ref(%C7bitcast1C*) {
// CHECK:         [[BUF:%.*]] = alloca %C7bitcast1C*, align 8
// CHECK:         store %C7bitcast1C* %0, %C7bitcast1C** [[BUF]]
// CHECK:         [[OUT_BUF:%.*]] = bitcast %C7bitcast1C** [[BUF]] to %Sq*
// CHECK:         [[VALUE_BUF:%.*]] = bitcast %Sq* [[OUT_BUF]] to i64*
// CHECK:         [[VALUE:%.*]] = load i64* [[VALUE_BUF]], align 8
// CHECK:         ret i64 [[VALUE]]
// CHECK:       }
sil @bitcast_ref: $@thin (C) -> Optional<C> {
entry(%c : $C):
  %o = unchecked_ref_bit_cast %c : $C to $Optional<C>
  return %o : $Optional<C>
}
