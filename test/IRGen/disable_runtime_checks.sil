// RUN: %swift -triple x86_64-apple-darwin10 -disable-all-runtime-checks -emit-llvm %s | FileCheck %s

sil_stage canonical
import Builtin


// CHECK-LABEL: define i1 @sadd_overflow(i64, i64) {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    %2 = add i64 %0, %1
// CHECK-NEXT:    ret i1 false
// CHECK-NEXT:  }
sil @sadd_overflow : $@thin (Builtin.Int64, Builtin.Int64) -> Builtin.Int1 {
entry(%x : $Builtin.Int64, %y : $Builtin.Int64):
  %f = builtin_function_ref "sadd_with_overflow_Int64" : $@thin (Builtin.Int64, Builtin.Int64, Builtin.Int1) -> (Builtin.Int64, Builtin.Int1)
  %o = integer_literal $Builtin.Int1, 0
  %r = apply %f(%x, %y, %o) : $@thin (Builtin.Int64, Builtin.Int64, Builtin.Int1) -> (Builtin.Int64, Builtin.Int1) 
  %z = tuple_extract %r : $(Builtin.Int64, Builtin.Int1), 1
  return %z : $Builtin.Int1
}

// CHECK-LABEL: define i1 @trunc_checked(i64) {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    %1 = trunc i64 %0 to i32
// CHECK-NEXT:    ret i1 false
// CHECK-NEXT:  }
sil @trunc_checked : $@thin (Builtin.Int64) -> Builtin.Int1 {
entry(%x : $Builtin.Int64):
  %f = builtin_function_ref "s_to_s_checked_trunc_Int64_Int32" : $@thin (Builtin.Int64) -> (Builtin.Int32, Builtin.Int1)
  %r = apply %f(%x) : $@thin (Builtin.Int64) -> (Builtin.Int32, Builtin.Int1) 
  %z = tuple_extract %r : $(Builtin.Int32, Builtin.Int1), 1
  return %z : $Builtin.Int1
}

// CHECK-LABEL: define i1 @convert_checked(i64) {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    ret i1 false
// CHECK-NEXT:  }

sil @convert_checked : $@thin (Builtin.Int64) -> Builtin.Int1 {
entry(%x : $Builtin.Int64):
  %f = builtin_function_ref "s_to_u_checked_conversion_Int64" : $@thin (Builtin.Int64) -> (Builtin.Int64, Builtin.Int1)
  %r = apply %f(%x) : $@thin (Builtin.Int64) -> (Builtin.Int64, Builtin.Int1) 
  %z = tuple_extract %r : $(Builtin.Int64, Builtin.Int1), 1
  return %z : $Builtin.Int1
}

