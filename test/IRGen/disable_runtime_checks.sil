// RUN: %swift -target x86_64-apple-darwin10 -disable-all-runtime-checks -emit-ir %s | FileCheck %s

sil_stage canonical
import Builtin


// CHECK-LABEL: define i1 @sadd_overflow(i64, i64) {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    %2 = add i64 %0, %1
// CHECK-NEXT:    ret i1 false
// CHECK-NEXT:  }
sil @sadd_overflow : $@thin (Builtin.Int64, Builtin.Int64) -> Builtin.Int1 {
entry(%x : $Builtin.Int64, %y : $Builtin.Int64):
  %f = builtin_function_ref "sadd_with_overflow_Int64" : $@thin (Builtin.Int64, Builtin.Int64, Builtin.Int1) -> (Builtin.Int64, Builtin.Int1)
  %o = integer_literal $Builtin.Int1, 0
  %r = apply %f(%x, %y, %o) : $@thin (Builtin.Int64, Builtin.Int64, Builtin.Int1) -> (Builtin.Int64, Builtin.Int1) 
  %z = tuple_extract %r : $(Builtin.Int64, Builtin.Int1), 1
  return %z : $Builtin.Int1
}

// CHECK-LABEL: define i1 @s_to_s_trunc_checked(i64) {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    %1 = trunc i64 %0 to i32
// CHECK-NEXT:    ret i1 false
// CHECK-NEXT:  }
sil @s_to_s_trunc_checked : $@thin (Builtin.Int64) -> Builtin.Int1 {
entry(%x : $Builtin.Int64):
  %f = builtin_function_ref "s_to_s_checked_trunc_Int64_Int32" : $@thin (Builtin.Int64) -> (Builtin.Int32, Builtin.Int1)
  %r = apply %f(%x) : $@thin (Builtin.Int64) -> (Builtin.Int32, Builtin.Int1) 
  %z = tuple_extract %r : $(Builtin.Int32, Builtin.Int1), 1
  return %z : $Builtin.Int1
}

// CHECK-LABEL: define i1 @u_to_s_trunc_checked(i64) {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    %1 = trunc i64 %0 to i32
// CHECK-NEXT:    ret i1 false
// CHECK-NEXT:  }
sil @u_to_s_trunc_checked : $@thin (Builtin.Int64) -> Builtin.Int1 {
entry(%x : $Builtin.Int64):
  %f = builtin_function_ref "u_to_s_checked_trunc_Int64_Int32" : $@thin (Builtin.Int64) -> (Builtin.Int32, Builtin.Int1)
  %r = apply %f(%x) : $@thin (Builtin.Int64) -> (Builtin.Int32, Builtin.Int1) 
  %z = tuple_extract %r : $(Builtin.Int32, Builtin.Int1), 1
  return %z : $Builtin.Int1
}

// CHECK-LABEL: define i1 @convert_checked(i64) {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    ret i1 false
// CHECK-NEXT:  }

sil @convert_checked : $@thin (Builtin.Int64) -> Builtin.Int1 {
entry(%x : $Builtin.Int64):
  %f = builtin_function_ref "s_to_u_checked_conversion_Int64" : $@thin (Builtin.Int64) -> (Builtin.Int64, Builtin.Int1)
  %r = apply %f(%x) : $@thin (Builtin.Int64) -> (Builtin.Int64, Builtin.Int1) 
  %z = tuple_extract %r : $(Builtin.Int64, Builtin.Int1), 1
  return %z : $Builtin.Int1
}

class B {}
class D : B {}

sil @_TFC22disable_runtime_checks1BD : $@thin B -> Builtin.NativeObject
sil @_TFC22disable_runtime_checks1DD : $@thin D -> Builtin.NativeObject

protocol P {}
struct X : P { var x : Builtin.Int8 }

// CHECK-LABEL: define %C22disable_runtime_checks1D* @unconditional_cast_class(%C22disable_runtime_checks1B*) {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    %1 = bitcast %C22disable_runtime_checks1B* %0 to %C22disable_runtime_checks1D*
// CHECK-NEXT:    ret %C22disable_runtime_checks1D* %1
// CHECK-NEXT:  }
sil @unconditional_cast_class : $@thin B -> D {
entry(%b : $B):
  %d = unconditional_checked_cast %b : $B to $D
  return %d : $D
}

// CHECK-LABEL: define i8 @unconditional_cast_existential(%P22disable_runtime_checks1P_* noalias) {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    %1 = bitcast %P22disable_runtime_checks1P_* %0 to %V22disable_runtime_checks1X*
// CHECK-NEXT:    %.x = getelementptr inbounds %V22disable_runtime_checks1X* %1, i32 0, i32 0
// CHECK-NEXT:    %2 = load i8* %.x, align 8
// CHECK-NEXT:    ret i8 %2
// CHECK-NEXT:  }
sil @unconditional_cast_existential : $@thin (@in P) -> X {
entry(%p : $*P):
  %x = unconditional_checked_cast %p : $*P to $*X
  %y = load %x : $*X
  return %y : $X
}
