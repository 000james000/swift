// RUN: %target-swift-frontend %s -emit-ir | FileCheck %s --check-prefix=CHECK --check-prefix=CHECK-%target-ptrsize

import Swift

// CHECK-LABEL: define void @retain_release_boxed_existential(%swift.error*)
sil @retain_release_boxed_existential : $@thin (_ErrorType) -> () {
entry(%e : $_ErrorType):
  // CHECK: @objc_retain
  strong_retain %e : $_ErrorType
  // CHECK: @objc_release
  strong_release %e : $_ErrorType
  return undef : $()
}

// CHECK-LABEL: define %swift.error* @alloc_boxed_existential(%swift.opaque*, %swift.type* %T, i8** %T._ErrorType)
sil @alloc_boxed_existential : $@thin <T: _ErrorType> (@in T) -> @owned _ErrorType {
entry(%x : $*T):
  // CHECK: [[BOX_PAIR:%.*]] = call { %swift.error*, %swift.opaque* } @swift_allocError(%swift.type* %T, i8** %T._ErrorType)
  // CHECK: [[BOX:%.*]] = extractvalue { %swift.error*, %swift.opaque* } %1, 0
  // CHECK: [[ADDR:%.*]] = extractvalue { %swift.error*, %swift.opaque* } %1, 1
  %b = alloc_existential_box $_ErrorType, $T
  // CHECK: call %swift.opaque* %initializeWithTake(%swift.opaque* [[ADDR]], %swift.opaque* %0, %swift.type* %T)
  copy_addr [take] %x to [initialization] %b#1 : $*T
  // CHECK: ret %swift.error* [[BOX]]
  return %b#0 : $_ErrorType
}

// CHECK-LABEL: define void @dealloc_boxed_existential(%swift.error*, %swift.type* %T, i8** %T._ErrorType)
sil @dealloc_boxed_existential : $@thin <T: _ErrorType> (@owned _ErrorType) -> () {
entry(%b : $_ErrorType):
  // CHECK: call void @swift_deallocError(%swift.error* %0, %swift.type* %T)
  dealloc_existential_box %b : $_ErrorType, $T
  return undef : $()
}

// CHECK-LABEL: define {{i[0-9]+}} @open_boxed_existential(%swift.error*)
sil @open_boxed_existential : $@thin (@owned _ErrorType) -> Int {
entry(%b : $_ErrorType):
  // CHECK: call void @swift_getErrorValue(%swift.error* %0, i8** {{%.*}}, [[TRIPLE:{ %swift.opaque\*, %swift.type\*, i8\*\* }]]* [[OUT:%.*]])
  // CHECK: [[OUT_ADDR:%.*]] = getelementptr inbounds {{.*}} [[OUT]], i32 0, i32 0
  // CHECK: [[ADDR:%.*]] = load {{.*}} [[OUT_ADDR]]
  // CHECK: [[OUT_TYPE:%.*]] = getelementptr inbounds {{.*}} [[OUT]], i32 0, i32 1
  // CHECK: [[TYPE:%.*]] = load {{.*}} [[OUT_TYPE]]
  // CHECK: [[OUT_WITNESS:%.*]] = getelementptr inbounds {{.*}} [[OUT]], i32 0, i32 2
  // CHECK: [[WITNESS:%.*]] = load {{.*}} [[OUT_WITNESS]]
  %o = open_existential_box %b : $_ErrorType to $*@opened("01234567-89AB-CDEF-0123-000000000000") _ErrorType
  // CHECK: [[CODE_ADDR:%.*]] = getelementptr {{.*}} [[WITNESS]], i32 1
  // CHECK: [[CODE:%.*]] = load {{.*}} [[CODE_ADDR]]
  %m = witness_method $@opened("01234567-89AB-CDEF-0123-000000000000") _ErrorType, #_ErrorType.code!getter.1, %o : $*@opened("01234567-89AB-CDEF-0123-000000000000") _ErrorType : $@thin @cc(witness_method) <Self: _ErrorType> (@in_guaranteed Self) -> Int
  // CHECK: [[CODE_FN:%.*]] = bitcast i8* [[CODE]] to [[INT:i[0-9]+]] (%swift.opaque*, %swift.type*)*
  // CHECK: [[RESULT:%.*]] = call [[INT]] [[CODE_FN]](%swift.opaque* [[ADDR]], %swift.type* [[TYPE]])
  %c = apply %m<@opened("01234567-89AB-CDEF-0123-000000000000") _ErrorType>(%o) : $@thin @cc(witness_method) <Self: _ErrorType> (@in_guaranteed Self) -> Int
  // CHECK: ret [[INT]] [[RESULT]]
  return %c : $Int
}
