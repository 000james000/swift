// RUN: rm -rf %t && mkdir %t
// RUN: %build-irgen-test-overlays
// RUN: %target-swift-frontend -sdk %S/Inputs -I %t %s -emit-ir | FileCheck %s

// REQUIRES: CPU=x86_64
// REQUIRES: objc_interop

sil_stage canonical

import gizmo

// rdar://16621578

sil @init_opaque_existential : $@thin <T where T : Gizmo> (@out protocol<>, @owned T) -> () {
bb0(%0 : $*protocol<>, %1 : $T):
  %2 = init_existential_addr %0 : $*protocol<>, $T
  store %1 to %2 : $*T
  %3 = tuple ()
  return %3 : $()
}
// CHECK-DAG:   define void @init_opaque_existential([[ANY:%"protocol<>"]]* noalias sret, [[GIZMO:%.*]]*, [[TYPE:%.*]]* %T)
// CHECK:         [[T0:%.*]] = getelementptr inbounds [[ANY]], [[ANY]]* %0, i32 0, i32 1
// CHECK-NEXT:    store [[TYPE]]* %T, [[TYPE]]** [[T0]], align 8
// CHECK-NEXT:    [[T0:%.*]] = getelementptr inbounds [[ANY]], [[ANY]]* %0, i32 0, i32 0
// CHECK-NEXT:    [[T1:%.*]] = bitcast [24 x i8]* [[T0]] to [[GIZMO]]**
// CHECK-NEXT:    store [[GIZMO]]* %1, [[GIZMO]]** [[T1]], align 8
// CHECK-NEXT:    ret void

sil @take_opaque_existential : $@thin (@out protocol<>, @in protocol <>) -> () {
bb0(%0 : $*protocol<>, %1 : $*protocol<>):
  copy_addr [take] %1 to [initialization] %0 : $*protocol<>
  %3 = tuple ()
  return %3 : $()
}

// CHECK-DAG:   define void @take_opaque_existential([[ANY:%"protocol<>"]]* noalias sret, %"protocol<>"*) {
// CHECK:         [[T0:%.*]] = getelementptr inbounds [[ANY]], [[ANY]]* [[SRC:%1]], i32 0, i32 1
// CHECK-NEXT:    [[TYPE:%.*]] = load %swift.type*, %swift.type** [[T0]], align 8
// CHECK-NEXT:    [[T0:%.*]] = getelementptr inbounds [[ANY]], [[ANY]]* [[DEST:%0]], i32 0, i32 1
// CHECK-NEXT:    store %swift.type* [[TYPE]], %swift.type** [[T0]], align 8
// CHECK-NEXT:    [[SRC_BUF:%.*]] = getelementptr inbounds [[ANY]], [[ANY]]* [[SRC]], i32 0, i32 0
// CHECK-NEXT:    [[DEST_BUF:%.*]] = getelementptr inbounds [[ANY]], [[ANY]]* [[DEST]], i32 0, i32 0
// CHECK-NEXT:    [[T0:%.*]] = bitcast %swift.type* [[TYPE]] to i8***
// CHECK-NEXT:    [[T1:%.*]] = getelementptr inbounds i8**, i8*** [[T0]], i64 -1
// CHECK-NEXT:    [[VWTABLE:%.*]] = load i8**, i8*** [[T1]], align 8
// CHECK-NEXT:    [[T0:%.*]] = getelementptr inbounds i8*, i8** [[VWTABLE]], i32 12
// CHECK-NEXT:    [[T1:%.*]] = load i8*, i8** [[T0]], align 8
// CHECK-NEXT:    [[INIT:%.*]] = bitcast i8* [[T1]] to %swift.opaque* ([24 x i8]*, [24 x i8]*, %swift.type*)*
// CHECK-NEXT:    call %swift.opaque* [[INIT]]([24 x i8]* noalias [[DEST_BUF]], [24 x i8]* [[SRC_BUF]], %swift.type* [[TYPE]])
// CHECK-NEXT:    ret void

// rdar://problem/19035529
@objc protocol OP {}
@objc protocol OP2: OP {}

// CHECK-DAG: define %objc_object* @init_existential_objc_to_objc(%objc_object*) {
// CHECK:       ret %objc_object* %0
sil @init_existential_objc_to_objc : $@thin (@owned OP2) -> @owned OP {
entry(%o : $OP2):
  %a = init_existential_ref %o : $OP2 : $OP2, $OP
  return %a : $OP
}

protocol CP: class {}

// CHECK-DAG: define { %objc_object*, i8** } @class_existential_unowned(%objc_object*, i8**) {
sil @class_existential_unowned : $@thin (@owned CP) -> @owned CP {
entry(%s : $CP):
  %u = ref_to_unowned %s : $CP to $@sil_unowned CP
  // CHECK: call void bitcast (void (%swift.refcounted*)* @swift_unknownWeakRetain to void (%objc_object*)*)(%objc_object* %0)
  unowned_retain %u : $@sil_unowned CP
  // CHECK: call void bitcast (void (%swift.refcounted*)* @swift_unknownWeakRelease to void (%objc_object*)*)(%objc_object* %0)
  unowned_release %u : $@sil_unowned CP

  // CHECK: call void bitcast (void (%swift.refcounted*)* @swift_unknownRetainUnowned to void (%objc_object*)*)(%objc_object* %0)
  strong_retain_unowned %u : $@sil_unowned CP
  %t = unowned_to_ref %u : $@sil_unowned CP to $CP
  // CHECK: call void bitcast (void (%swift.refcounted*)* @swift_unknownRelease to void (%objc_object*)*)(%objc_object* %0)
  strong_release %t : $CP

  %v = ref_to_unmanaged %s : $CP to $@sil_unmanaged CP
  %z = unmanaged_to_ref %v : $@sil_unmanaged CP to $CP

  // CHECK: [[RESULT_A:%.*]] = insertvalue { %objc_object*, i8** } undef, %objc_object* %0, 0
  // CHECK: [[RESULT_B:%.*]] = insertvalue { %objc_object*, i8** } [[RESULT_A]], i8** %1, 1
  // CHECK: ret { %objc_object*, i8** } [[RESULT_B]]

  return %z : $CP
}
