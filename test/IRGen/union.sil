// RUN: %swift -triple x86_64-apple-darwin10 %s -emit-llvm | FileCheck %s

import Builtin

// -- Singleton union. The representation is just the singleton payload.
// CHECK: %O5union9Singleton = type { { i64, i64 } }

// -- No-payload unions. The representation is just an enum tag.
// CHECK: %O5union10NoPayloads = type { i2 }
// CHECK: %O5union11NoPayloads2 = type { i3 }

// -- Single-payload union, no extra inhabitants in the payload type. The
//    representation adds a tag bit to distinguish payload from enum tag:
//      case x(i64): X0 X1 X2 ... X63 | 0, where X0...X63 are the payload bits
//      case y:      0  0  0  ... 0   | 1
//      case z:      1  0  0  ... 0   | 1
// CHECK: %O5union17SinglePayloadNoXI = type { i64, i1 }
// CHECK: %O5union18SinglePayloadNoXI2 = type { i64, i1 }

// -- Single-payload union, spare bits. The representation uses a tag bit
//    out of the payload to distinguish payload from enum tag:
//      case x(i3): X0 X1 X2 0 0 0 0 0
//      case y:     0  0  0  1 0 0 0 0
//      case z:     1  0  0  1 0 0 0 0
// CHECK: %O5union21SinglePayloadSpareBit = type { i64 }

// -- Multi-payload union, no spare bits. The representation adds tag bits
//    to discriminate payloads. No-payload cases all share a tag.
//      case x(i8): X0 X1 X2 ... X7 X8 | 0 0
//      case y(i7): Y0 Y1 Y2 ... Y7 0  | 1 0
//      case z(i2): Z0 Z1 0  ... 0  0  | 0 1
//      case a:     0  0  0  ... 0  0  | 1 1
//      case b:     1  0  0  ... 0  0  | 1 1
//      case c:     0  1  0  ... 0  0  | 1 1
// CHECK: %O5union23MultiPayloadNoSpareBits = type { i64, i2 }

// -- Multi-payload union, one spare bit. The representation uses spare bits
//    common to all payloads to partially discriminate payloads, with added
//    tag bits to cover the gap. No-payload cases all share a tag.
//      case x(i7): X0 X1 X2 X3 X4 X5 X6 0 | 0
//      case y(i1): Y  0  0  0  0  0  0  1 | 0
//      case z(i5): Z0 Z1 Z2 Z3 Z4 0  0  0 | 1
//      case a:     0  0  0  0  0  0  0  1 | 1
//      case b:     1  0  0  0  0  0  0  1 | 1
//      case c:     0  1  0  0  0  0  0  1 | 1
// CHECK: %O5union23MultiPayloadOneSpareBit = type { i64, i1 }

// -- Multi-payload union, two spare bits. Same as above, except we have enough
//    spare bits not to require any added tag bits.
//      case x(i6): X0 X1 X2 X3 X4 X5 0  0
//      case y(i1): Y  0  0  0  0  0  1  0
//      case z(i5): Z0 Z1 Z2 Z3 Z4 0  0  1
//      case a:     0  0  0  0  0  0  1  1
//      case b:     1  0  0  0  0  0  1  1
//      case c:     0  1  0  0  0  0  1  1
// CHECK: %O5union24MultiPayloadTwoSpareBits = type { i64 }


// -- switch_union lowering --

union Singleton {
  case val(Builtin.Int64, Builtin.Int64)
}

// CHECK: define void @singleton_switch(i64, i64) {
sil @singleton_switch : $(Singleton) -> () {
// CHECK: entry:
entry(%u : $Singleton):
// CHECK:   br label %[[DEST:[0-9]+]]
  switch_union %u : $Singleton, case #Singleton.val!unionelt.1: dest

// CHECK: ; <label>:[[DEST]]
dest:
// CHECK:   ret void
  %x = tuple ()
  return %x : $()
}


union NoPayloads {
  case x
  case y
  case z
}

sil @a : $[thin] () -> ()
sil @b : $[thin] () -> ()
sil @c : $[thin] () -> ()


// CHECK: define void @no_payload_switch(i2) {
sil @no_payload_switch : $[thin] (NoPayloads) -> () {
// CHECK: entry:
entry(%u : $NoPayloads):
// CHECK:   switch i2 %0, label %[[DFLT:[0-9]+]] [
// CHECK:     i2 0, label %[[X_DEST:[0-9]+]]
// CHECK:     i2 1, label %[[Y_DEST:[0-9]+]]
// CHECK:     i2 -2, label %[[Z_DEST:[0-9]+]]
// CHECK:   ]
// CHECK: ; <label>:[[DFLT]]
// CHECK:   unreachable
  switch_union %u : $NoPayloads, case #NoPayloads.x!unionelt: x_dest, case #NoPayloads.y!unionelt: y_dest, case #NoPayloads.z!unionelt: z_dest

// CHECK: ; <label>:[[X_DEST]]
x_dest:
// CHECK:   call void @a()
  %a = function_ref @a : $[thin] () -> ()
  apply %a() : $[thin] () -> ()
// CHECK:   br label %[[END:[0-9]+]]
  br end
// CHECK: ; <label>:[[Y_DEST]]
y_dest:
// CHECK:   call void @b()
  %b = function_ref @b : $[thin] () -> ()
  apply %b() : $[thin] () -> ()
// CHECK:   br label %[[END]]
  br end
// CHECK: ; <label>:[[Z_DEST]]
z_dest:
// CHECK:   call void @c()
  %c = function_ref @c : $[thin] () -> ()
  apply %c() : $[thin] () -> ()
// CHECK:   br label %[[END]]
  br end

// CHECK: ; <label>:[[END]]
end:
// CHECK:   ret void
  %x = tuple ()
  return %x : $()
}


union NoPayloads2 {
  case a
  case e
  case i
  case o
  case u
  case y
}

// CHECK: define void @no_payload_switch_2(i3) {
sil @no_payload_switch_2 : $[thin] (NoPayloads2) -> () {
// CHECK: entry:
entry(%u : $NoPayloads2):
// CHECK:   switch i3 %0, label %[[DEFAULT_DEST:[0-9]+]] [
// CHECK:     i3 -4, label %[[U_DEST:[0-9]+]]
// CHECK:   ]
  switch_union %u : $NoPayloads2, case #NoPayloads2.u!unionelt: u_dest, default default_dest

// CHECK: ; <label>:[[U_DEST]]
u_dest:
// CHECK:   call void @a()
  %a = function_ref @a : $[thin] () -> ()
  apply %a() : $[thin] () -> ()
// CHECK:   br label %[[END:[0-9]+]]
  br end

// CHECK: ; <label>:[[DEFAULT_DEST]]
default_dest:
// CHECK:   call void @b()
  %b = function_ref @b : $[thin] () -> ()
  apply %b() : $[thin] () -> ()
// CHECK:   br label %[[END]]
  br end

// CHECK: ; <label>:[[END]]
end:
// CHECK:   ret void
  %x = tuple ()
  return %x : $()
}


union SinglePayloadNoXI {
  case x(Builtin.Int64)
  case y
}

union SinglePayloadNoXI2 {
  case x(Builtin.Int64)
  case y
  case z
}

// CHECK: define void @single_payload_no_xi_switch(i64, i1) {
sil @single_payload_no_xi_switch : $[thin] (SinglePayloadNoXI2) -> () {
// CHECK: entry:
entry(%u : $SinglePayloadNoXI2):
// CHECK:   switch i1 %1, label %[[DFLT:[0-9]+]] [
// CHECK:     i1 false, label %[[X_DEST:[0-9]+]]
// CHECK:     i1 true, label %[[TAGS:[0-9]+]]
// CHECK:   ]
// CHECK: ; <label>:[[TAGS]]
// CHECK:   switch i64 %0, label %[[DFLT]] [
// CHECK:     i64 0, label %[[Y_DEST:[0-9]+]]
// CHECK:     i64 1, label %[[Z_DEST:[0-9]+]]
// CHECK:   ]
// CHECK: ; <label>:[[DFLT]]
// CHECK:   unreachable
  switch_union %u : $SinglePayloadNoXI2, case #SinglePayloadNoXI2.x!unionelt.1: x_dest, case #SinglePayloadNoXI2.y!unionelt: y_dest, case #SinglePayloadNoXI2.z!unionelt: z_dest

// CHECK: ; <label>:[[X_DEST]]
// CHECK:   call void @a()
// CHECK:   br label %[[END:[0-9]+]]
x_dest:
  %a = function_ref @a : $[thin] () -> ()
  apply %a() : $[thin] () -> ()
  br end

// CHECK: ; <label>:[[Y_DEST]]
// CHECK:   call void @b()
// CHECK:   br label %[[END]]
y_dest:
  %b = function_ref @b : $[thin] () -> ()
  apply %b() : $[thin] () -> ()
  br end

// CHECK: ; <label>:[[Z_DEST]]
// CHECK:   call void @c()
// CHECK:   br label %[[END]]
z_dest:
  %c = function_ref @c : $[thin] () -> ()
  apply %c() : $[thin] () -> ()
  br end

// CHECK: ; <label>:[[END]]
// CHECK:   ret void
end:
  %x = tuple ()
  return %x : $()
}


union SinglePayloadSpareBit {
  case x(Builtin.Int63)
  case y
  case z
}

// CHECK: define void @single_payload_spare_bit_switch(i64) {
sil @single_payload_spare_bit_switch : $[thin] (SinglePayloadSpareBit) -> () {
// CHECK: entry:
entry(%u : $SinglePayloadSpareBit):
// CHECK:  switch i64 %0, label %[[X_DEST:[0-9]+]] [
// --           0x8000_0000_0000_0000
// CHECK:    i64 -9223372036854775808, label %[[Y_DEST:[0-9]+]]
// --           0x8000_0000_0000_0001
// CHECK:    i64 -9223372036854775807, label %[[Z_DEST:[0-9]+]]
// CHECK:  ]
  switch_union %u : $SinglePayloadSpareBit, case #SinglePayloadSpareBit.x!unionelt.1: x_dest, case #SinglePayloadSpareBit.y!unionelt: y_dest, case #SinglePayloadSpareBit.z!unionelt: z_dest

// CHECK: ; <label>:[[X_DEST]]
x_dest:
// CHECK:   call void @a()
  %a = function_ref @a : $[thin] () -> ()
  apply %a() : $[thin] () -> ()
// CHECK:   br label %[[END:[0-9]+]]
  br end

// CHECK: ; <label>:[[Y_DEST]]
y_dest:
// CHECK:   call void @b()
  %b = function_ref @b : $[thin] () -> ()
  apply %b() : $[thin] () -> ()
// CHECK:   br label %[[END]]
  br end

// CHECK: ; <label>:[[Z_DEST]]
z_dest:
// CHECK:   call void @c()
  %c = function_ref @c : $[thin] () -> ()
  apply %c() : $[thin] () -> ()
// CHECK:   br label %[[END]]
  br end

// CHECK: ; <label>:[[END]]
end:
// CHECK:   ret void
  %x = tuple ()
  return %x : $()
}


// -- injection functions for unions --

// CHECK: define { i64, i64 } @_TO5union9Singleton3valfMS0_FTBi64_Bi64__S0_(i64, i64) {
// CHECK: entry:
// CHECK:   [[A:%.*]] = insertvalue { i64, i64 } undef, i64 %0, 0
// CHECK:   [[B:%.*]] = insertvalue { i64, i64 } [[A]], i64 %1, 1
// CHECK:   ret { i64, i64 } [[B]]
// CHECK: }


// CHECK: define i2 @_TO5union10NoPayloads1xFMS0_S0_() {
// CHECK: entry:
// CHECK:   ret i2 0
// CHECK: }

// CHECK: define i2 @_TO5union10NoPayloads1yFMS0_S0_() {
// CHECK: entry:
// CHECK:   ret i2 1
// CHECK: }

// CHECK: define i2 @_TO5union10NoPayloads1zFMS0_S0_() {
// CHECK: entry:
// CHECK:   ret i2 -2
// CHECK: }


// CHECK: define i3 @_TO5union11NoPayloads21aFMS0_S0_() {
// CHECK: entry:
// CHECK:   ret i3 0
// CHECK: }

// CHECK: define i3 @_TO5union11NoPayloads21eFMS0_S0_() {
// CHECK: entry:
// CHECK:   ret i3 1
// CHECK: }

// CHECK: define i3 @_TO5union11NoPayloads21iFMS0_S0_() {
// CHECK: entry:
// CHECK:   ret i3 2
// CHECK: }

// CHECK: define i3 @_TO5union11NoPayloads21oFMS0_S0_() {
// CHECK: entry:
// CHECK:   ret i3 3
// CHECK: }

// CHECK: define i3 @_TO5union11NoPayloads21uFMS0_S0_() {
// CHECK: entry:
// CHECK:   ret i3 -4
// CHECK: }

// CHECK: define i3 @_TO5union11NoPayloads21yFMS0_S0_() {
// CHECK: entry:
// CHECK:   ret i3 -3
// CHECK: }


// CHECK: define { i64, i1 } @_TO5union17SinglePayloadNoXI1xfMS0_FBi64_S0_(i64) {
// CHECK: entry:
// CHECK:   [[A:%.*]] = insertvalue { i64, i1 } undef, i64 %0, 0
// CHECK:   [[B:%.*]] = insertvalue { i64, i1 } [[A]], i1 false, 1
// CHECK:   ret { i64, i1 } [[B]]
// CHECK: }

// CHECK: define { i64, i1 } @_TO5union17SinglePayloadNoXI1yFMS0_S0_() {
// CHECK: entry:
// CHECK:   ret { i64, i1 } { i64 0, i1 true }
// CHECK: }


// CHECK: define { i64, i1 } @_TO5union18SinglePayloadNoXI21xfMS0_FBi64_S0_(i64) {
// CHECK: entry:
// CHECK:   [[A:%.*]] = insertvalue { i64, i1 } undef, i64 %0, 0
// CHECK:   [[B:%.*]] = insertvalue { i64, i1 } [[A]], i1 false, 1
// CHECK:   ret { i64, i1 } [[B]]
// CHECK: }

// CHECK: define { i64, i1 } @_TO5union18SinglePayloadNoXI21yFMS0_S0_() {
// CHECK: entry:
// CHECK:   ret { i64, i1 } { i64 0, i1 true }
// CHECK: }

// CHECK: define { i64, i1 } @_TO5union18SinglePayloadNoXI21zFMS0_S0_() {
// CHECK: entry:
// CHECK:   ret { i64, i1 } { i64 1, i1 true }
// CHECK: }


// CHECK: define i64 @_TO5union21SinglePayloadSpareBit1xfMS0_FBi63_S0_(i63) {
// CHECK: entry:
// CHECK:   [[A:%.*]] = zext i63 %0 to i64
// CHECK:   ret i64 [[A]]
// CHECK: }

// CHECK: define i64 @_TO5union21SinglePayloadSpareBit1yFMS0_S0_() {
// CHECK: entry:
//                 0x8000_0000_0000_0000
// CHECK:   ret i64 -9223372036854775808
// CHECK: }

// CHECK: define i64 @_TO5union21SinglePayloadSpareBit1zFMS0_S0_() {
// CHECK: entry:
//                 0x8000_0000_0000_0001
// CHECK:   ret i64 -9223372036854775807
// CHECK: }


union MultiPayloadNoSpareBits {
  case x(Builtin.Int64)
  case y(Builtin.Int32)
  case z(Builtin.Int63)
  case a
  case b
  case c
}

union MultiPayloadOneSpareBit {
  case x(Builtin.Int62)
  case y(Builtin.Int63)
  case z(Builtin.Int61)
  case a
  case b
  case c
}

union MultiPayloadTwoSpareBits {
  case x(Builtin.Int62)
  case y(Builtin.Int60)
  case z(Builtin.Int61)
  case a
  case b
  case c
}

// Force the storage types to all be generated.
typealias AllTestUnions = (
  Singleton,
  NoPayloads,
  NoPayloads2,
  SinglePayloadNoXI,
  SinglePayloadNoXI2,
  SinglePayloadSpareBit,
  MultiPayloadNoSpareBits,
  MultiPayloadOneSpareBit,
  MultiPayloadTwoSpareBits)

var x : AllTestUnions

sil @top_level_code : $() -> () {
entry:
  // Force the global variables to materialize.
  %x = global_addr #x : $*AllTestUnions
  initialize_var %x : $*AllTestUnions
  %z = tuple ()
  return %z : $()
}
