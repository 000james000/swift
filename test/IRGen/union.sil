// RUN: %swift -triple x86_64-apple-darwin10 %s -emit-llvm | FileCheck %s

import Builtin

// -- Singleton union. The representation is just the singleton payload.
// CHECK: %O5union9Singleton = type { { i64, i64 } }

// -- No-payload unions. The representation is just an enum tag.
// CHECK: %O5union10NoPayloads = type { i2 }
// CHECK: %O5union11NoPayloads2 = type { i3 }

// -- Single-payload union, no extra inhabitants in the payload type. The
//    representation adds a tag bit to distinguish payload from enum tag:
//      case x(i64): X0 X1 X2 ... X63 | 0, where X0...X63 are the payload bits
//      case y:      0  0  0  ... 0   | 1
//      case z:      1  0  0  ... 0   | 1
// CHECK: %O5union17SinglePayloadNoXI = type { i64, i1 }
// CHECK: %O5union18SinglePayloadNoXI2 = type { i64, i1 }

// -- Single-payload union, spare bits. The representation uses a tag bit
//    out of the payload to distinguish payload from enum tag:
//      case x(i3): X0 X1 X2 0 0 0 0 0
//      case y:     0  0  0  1 0 0 0 0
//      case z:     1  0  0  1 0 0 0 0
// CHECK: %O5union21SinglePayloadSpareBit = type { i64 }

// -- Multi-payload union, no spare bits. The representation adds tag bits
//    to discriminate payloads. No-payload cases all share a tag.
//      case x(i8): X0 X1 X2 ... X7 X8 | 0 0
//      case y(i7): Y0 Y1 Y2 ... Y7 0  | 1 0
//      case z(i2): Z0 Z1 0  ... 0  0  | 0 1
//      case a:     0  0  0  ... 0  0  | 1 1
//      case b:     1  0  0  ... 0  0  | 1 1
//      case c:     0  1  0  ... 0  0  | 1 1
// CHECK: %O5union23MultiPayloadNoSpareBits = type { i64, i2 }

// -- Multi-payload union, one spare bit. The representation uses spare bits
//    common to all payloads to partially discriminate payloads, with added
//    tag bits to cover the gap. No-payload cases all share a tag.
//      case x(i7): X0 X1 X2 X3 X4 X5 X6 0 | 0
//      case y(i1): Y  0  0  0  0  0  0  1 | 0
//      case z(i5): Z0 Z1 Z2 Z3 Z4 0  0  0 | 1
//      case a:     0  0  0  0  0  0  0  1 | 1
//      case b:     1  0  0  0  0  0  0  1 | 1
//      case c:     0  1  0  0  0  0  0  1 | 1
// CHECK: %O5union23MultiPayloadOneSpareBit = type { i64, i1 }

// -- Multi-payload union, two spare bits. Same as above, except we have enough
//    spare bits not to require any added tag bits.
//      case x(i6): X0 X1 X2 X3 X4 X5 0  0
//      case y(i1): Y  0  0  0  0  0  1  0
//      case z(i5): Z0 Z1 Z2 Z3 Z4 0  0  1
//      case a:     0  0  0  0  0  0  1  1
//      case b:     1  0  0  0  0  0  1  1
//      case c:     0  1  0  0  0  0  1  1
// CHECK: %O5union24MultiPayloadTwoSpareBits = type { i64 }

// -- No-payload unions have spare bits, and therefore extra inhabitants, in
//    their value witness table.
// CHECK: @_TWVO5union10NoPayloads = constant [19 x i8*] [
// -- ...
// -- size
// CHECK:   i8* inttoptr (i64 1 to i8*),
// -- flags                 0x4_0000 - alignment 1, has extra inhabitants
// CHECK:   i8* inttoptr (i64 262144 to i8*),
// -- stride
// CHECK:   i8* inttoptr (i64 1 to i8*),
// -- storeExtraInhabitant
// CHECK:   i8* bitcast (void (%swift.opaque*, i32, %swift.type*)* @_TwxsO5union10NoPayloads to i8*),
// -- getExtraInhabitantIndex
// CHECK:   i8* bitcast (i32 (%swift.opaque*, %swift.type*)* @_TwxgO5union10NoPayloads to i8*),
// -- num extra inhabitants (256 - 4 valid states)
// CHECK:   i8* inttoptr (i64 252 to i8*)
// CHECK: ] 
union Singleton {
  case val(Builtin.Int64, Builtin.Int64)
}

// CHECK: define void @singleton_switch(i64, i64) {
sil @singleton_switch : $(Singleton) -> () {
// CHECK: entry:
entry(%u : $Singleton):
// CHECK:   br label %[[DEST:[0-9]+]]
  switch_union %u : $Singleton, case #Singleton.val!unionelt.1: dest

// CHECK: ; <label>:[[DEST]]
dest:
// CHECK:   ret void
  %x = tuple ()
  return %x : $()
}

// CHECK: define void @singleton_switch_arg(i64, i64) {
sil @singleton_switch_arg : $(Singleton) -> () {
// CHECK: entry:
entry(%u : $Singleton):
// CHECK:   br label %[[PREDEST:[0-9]+]]
  switch_union %u : $Singleton, case #Singleton.val!unionelt.1: dest

// CHECK: ; <label>:[[PREDEST]]
// CHECK:   br label %[[DEST:[0-9]+]]
// CHECK: ; <label>:[[DEST]]
dest(%u2 : $(Builtin.Int64, Builtin.Int64)):
// CHECK:   {{%.*}} = phi i64 [ %0, %[[PREDEST]] ]
// CHECK:   {{%.*}} = phi i64 [ %1, %[[PREDEST]] ]
// CHECK:   ret void
  %x = tuple ()
  return %x : $()
}

// CHECK: define void @singleton_switch_indirect(%O5union9Singleton*) {
// CHECK: entry:
// CHECK:   br label %[[PREDEST:[0-9]+]]
// CHECK: ; <label>:[[PREDEST]]
// CHECK:   [[ADDR:%.*]] = getelementptr inbounds %O5union9Singleton* %0, i32 0, i32 0
// CHECK:   br label %[[DEST:[0-9]+]]
// CHECK: ; <label>:[[DEST]]
// CHECK:   phi { i64, i64 }* [ [[ADDR]], %[[PREDEST]] ]
// CHECK:   ret void
// CHECK: }
sil @singleton_switch_indirect : $([byref] Singleton) -> () {
entry(%u : $*Singleton):
  destructive_switch_union_addr %u : $*Singleton, case #Singleton.val!unionelt.1: dest
dest(%u2 : $*(Builtin.Int64, Builtin.Int64)):
  %x = tuple ()
  return %x : $()
}

// CHECK: define { i64, i64 } @singleton_inject(i64, i64) {
// CHECK: entry:
// CHECK:   [[A:%.*]] = insertvalue { i64, i64 } undef, i64 %0, 0
// CHECK:   [[B:%.*]] = insertvalue { i64, i64 } [[A]], i64 %1, 1
// CHECK:   ret { i64, i64 } [[B]]
// CHECK: }
sil @singleton_inject : $(Builtin.Int64, Builtin.Int64) -> Singleton {
entry(%0 : $Builtin.Int64, %1 : $Builtin.Int64):
  %t = tuple (%0 : $Builtin.Int64, %1 : $Builtin.Int64)
  %u = union $Singleton, #Singleton.val!unionelt.1, %t : $(Builtin.Int64, Builtin.Int64)
  return %u : $Singleton
}

// CHECK: define void @singleton_inject_indirect(i64, i64, %O5union9Singleton*) {
// CHECK: entry:
// CHECK:   [[DATA_ADDR:%.*]] = getelementptr inbounds %O5union9Singleton* %2, i32 0, i32 0
// CHECK:   [[DATA_0_ADDR:%.*]] = getelementptr inbounds { i64, i64 }* [[DATA_ADDR]], i32 0, i32 0
// CHECK:   store i64 %0, i64* [[DATA_0_ADDR]], align 8
// CHECK:   [[DATA_1_ADDR:%.*]] = getelementptr inbounds { i64, i64 }* [[DATA_ADDR]], i32 0, i32 1
// CHECK:   store i64 %1, i64* [[DATA_1_ADDR]], align 8
// CHECK:   ret void
// CHECK: }
sil @singleton_inject_indirect : $(Builtin.Int64, Builtin.Int64, [byref] Singleton) -> () {
entry(%0 : $Builtin.Int64, %1 : $Builtin.Int64, %2 : $*Singleton):
  %t = tuple (%0 : $Builtin.Int64, %1 : $Builtin.Int64)
  %a = union_data_addr %2 : $*Singleton, #Singleton.val!unionelt.1
  store %t to %a : $*(Builtin.Int64, Builtin.Int64)
  inject_union_addr %2 : $*Singleton, #Singleton.val!unionelt.1
  %v = tuple ()
  return %v : $()
}


union NoPayloads {
  case x
  case y
  case z
}

sil @a : $[thin] () -> ()
sil @b : $[thin] () -> ()
sil @c : $[thin] () -> ()
sil @d : $[thin] () -> ()
sil @e : $[thin] () -> ()
sil @f : $[thin] () -> ()


// CHECK: define void @no_payload_switch(i2) {
sil @no_payload_switch : $[thin] (NoPayloads) -> () {
// CHECK: entry:
entry(%u : $NoPayloads):
// CHECK:   switch i2 %0, label %[[DFLT:[0-9]+]] [
// CHECK:     i2 0, label %[[X_DEST:[0-9]+]]
// CHECK:     i2 1, label %[[Y_DEST:[0-9]+]]
// CHECK:     i2 -2, label %[[Z_DEST:[0-9]+]]
// CHECK:   ]
// CHECK: ; <label>:[[DFLT]]
// CHECK:   unreachable
  switch_union %u : $NoPayloads, case #NoPayloads.x!unionelt: x_dest, case #NoPayloads.y!unionelt: y_dest, case #NoPayloads.z!unionelt: z_dest

// CHECK: ; <label>:[[X_DEST]]
// CHECK:   call void @a()
// CHECK:   br label %[[END:[0-9]+]]
x_dest:
  %a = function_ref @a : $[thin] () -> ()
  apply %a() : $[thin] () -> ()
  br end
// CHECK: ; <label>:[[Y_DEST]]
// CHECK:   call void @b()
// CHECK:   br label %[[END]]
y_dest:
  %b = function_ref @b : $[thin] () -> ()
  apply %b() : $[thin] () -> ()
  br end
// CHECK: ; <label>:[[Z_DEST]]
// CHECK:   call void @c()
// CHECK:   br label %[[END]]
z_dest:
  %c = function_ref @c : $[thin] () -> ()
  apply %c() : $[thin] () -> ()
  br end

// CHECK: ; <label>:[[END]]
// CHECK:   ret void
end:
  %x = tuple ()
  return %x : $()
}

// CHECK: define void @no_payload_switch_indirect(%O5union10NoPayloads*) {
sil @no_payload_switch_indirect : $[thin] ([byref] NoPayloads) -> () {
entry(%u : $*NoPayloads):
// CHECK:   [[TAG_ADDR:%.*]] = getelementptr inbounds %O5union10NoPayloads* %0, i32 0, i32 0
// CHECK:   [[TAG:%.*]] = load i2* [[TAG_ADDR]]
// CHECK:   switch i2 [[TAG]]
  destructive_switch_union_addr %u : $*NoPayloads, case #NoPayloads.x!unionelt: x_dest, case #NoPayloads.y!unionelt: y_dest, case #NoPayloads.z!unionelt: z_dest

x_dest:
  br end
y_dest:
  br end
z_dest:
  br end
end:
  %x = tuple ()
  return %x : $()
}

// CHECK: define i2 @no_payload_inject_x() {
// CHECK: entry:
// CHECK:   ret i2 0
// CHECK: }
sil @no_payload_inject_x : $() -> NoPayloads {
entry:
  %u = union $NoPayloads, #NoPayloads.x!unionelt
  return %u : $NoPayloads
}

// CHECK: define i2 @no_payload_inject_y() {
// CHECK: entry:
// CHECK:   ret i2 1
// CHECK: }
sil @no_payload_inject_y : $() -> NoPayloads {
entry:
  %u = union $NoPayloads, #NoPayloads.y!unionelt
  return %u : $NoPayloads
}

// CHECK: define i2 @no_payload_inject_z() {
// CHECK: entry:
// CHECK:   ret i2 -2
// CHECK: }
sil @no_payload_inject_z : $() -> NoPayloads {
entry:
  %u = union $NoPayloads, #NoPayloads.z!unionelt
  return %u : $NoPayloads
}

// CHECK: define void @no_payload_inject_z_indirect(%O5union10NoPayloads*) {
// CHECK: entry:
// CHECK:   [[TAG_ADDR:%.*]] = getelementptr inbounds %O5union10NoPayloads* %0, i32 0, i32 0
// CHECK:   store i2 -2, i2* [[TAG_ADDR]], align 1
// CHECK:   ret void
// CHECK: }
sil @no_payload_inject_z_indirect : $([byref] NoPayloads) -> () {
entry(%0 : $*NoPayloads):
  inject_union_addr %0 : $*NoPayloads, #NoPayloads.z!unionelt
  %v = tuple ()
  return %v : $()
}


union NoPayloads2 {
  case a
  case e
  case i
  case o
  case u
  case y
}

// CHECK: define void @no_payload_switch_2(i3) {
sil @no_payload_switch_2 : $[thin] (NoPayloads2) -> () {
// CHECK: entry:
entry(%u : $NoPayloads2):
// CHECK:   switch i3 %0, label %[[DEFAULT_DEST:[0-9]+]] [
// CHECK:     i3 -4, label %[[U_DEST:[0-9]+]]
// CHECK:   ]
  switch_union %u : $NoPayloads2, case #NoPayloads2.u!unionelt: u_dest, default default_dest

// CHECK: ; <label>:[[U_DEST]]
u_dest:
// CHECK:   call void @a()
  %a = function_ref @a : $[thin] () -> ()
  apply %a() : $[thin] () -> ()
// CHECK:   br label %[[END:[0-9]+]]
  br end

// CHECK: ; <label>:[[DEFAULT_DEST]]
default_dest:
// CHECK:   call void @b()
  %b = function_ref @b : $[thin] () -> ()
  apply %b() : $[thin] () -> ()
// CHECK:   br label %[[END]]
  br end

// CHECK: ; <label>:[[END]]
end:
// CHECK:   ret void
  %x = tuple ()
  return %x : $()
}


union SinglePayloadNoXI {
  case x(Builtin.Int64)
  case y
}

union SinglePayloadNoXI2 {
  case x(Builtin.Int64)
  case y
  case z
}

// CHECK: define void @single_payload_no_xi_switch(i64, i1) {
sil @single_payload_no_xi_switch : $[thin] (SinglePayloadNoXI2) -> () {
// CHECK: entry:
entry(%u : $SinglePayloadNoXI2):
// CHECK:   switch i1 %1, label %[[DFLT:[0-9]+]] [
// CHECK:     i1 false, label %[[X_DEST:[0-9]+]]
// CHECK:     i1 true, label %[[TAGS:[0-9]+]]
// CHECK:   ]
// CHECK: ; <label>:[[TAGS]]
// CHECK:   switch i64 %0, label %[[DFLT]] [
// CHECK:     i64 0, label %[[Y_DEST:[0-9]+]]
// CHECK:     i64 1, label %[[Z_DEST:[0-9]+]]
// CHECK:   ]
// CHECK: ; <label>:[[DFLT]]
// CHECK:   unreachable
  switch_union %u : $SinglePayloadNoXI2, case #SinglePayloadNoXI2.x!unionelt.1: x_dest, case #SinglePayloadNoXI2.y!unionelt: y_dest, case #SinglePayloadNoXI2.z!unionelt: z_dest

// CHECK: ; <label>:[[X_DEST]]
// CHECK:   call void @a()
// CHECK:   br label %[[END:[0-9]+]]
x_dest:
  %a = function_ref @a : $[thin] () -> ()
  apply %a() : $[thin] () -> ()
  br end

// CHECK: ; <label>:[[Y_DEST]]
// CHECK:   call void @b()
// CHECK:   br label %[[END]]
y_dest:
  %b = function_ref @b : $[thin] () -> ()
  apply %b() : $[thin] () -> ()
  br end

// CHECK: ; <label>:[[Z_DEST]]
// CHECK:   call void @c()
// CHECK:   br label %[[END]]
z_dest:
  %c = function_ref @c : $[thin] () -> ()
  apply %c() : $[thin] () -> ()
  br end

// CHECK: ; <label>:[[END]]
// CHECK:   ret void
end:
  %x = tuple ()
  return %x : $()
}

// CHECK: define void @single_payload_no_xi_switch_arg(i64, i1) {
sil @single_payload_no_xi_switch_arg : $[thin] (SinglePayloadNoXI2) -> () {
// CHECK: entry:
entry(%u : $SinglePayloadNoXI2):
// CHECK:   switch i1 %1, label %[[DFLT:[0-9]+]] [
// CHECK:     i1 false, label %[[X_PREDEST:[0-9]+]]
// CHECK:     i1 true, label %[[TAGS:[0-9]+]]
// CHECK:   ]
// CHECK: ; <label>:[[TAGS]]
// CHECK:   switch i64 %0, label %[[DFLT]] [
// CHECK:     i64 0, label %[[Y_DEST:[0-9]+]]
// CHECK:     i64 1, label %[[Z_DEST:[0-9]+]]
// CHECK:   ]
// CHECK: ; <label>:[[DFLT]]
// CHECK:   unreachable
  switch_union %u : $SinglePayloadNoXI2, case #SinglePayloadNoXI2.x!unionelt.1: x_dest, case #SinglePayloadNoXI2.y!unionelt: y_dest, case #SinglePayloadNoXI2.z!unionelt: z_dest

// CHECK: ; <label>:[[X_PREDEST]]
// CHECK:   br label %[[X_DEST:[0-9]+]]
// CHECK: ; <label>:[[X_DEST]]
// CHECK:   {{%.*}} = phi i64 [ %0, %[[X_PREDEST]] ]
x_dest(%u2 : $Builtin.Int64):
// CHECK:   call void @a()
// CHECK:   br label %[[END:[0-9]+]]
  %a = function_ref @a : $[thin] () -> ()
  apply %a() : $[thin] () -> ()
  br end

// CHECK: ; <label>:[[Y_DEST]]
y_dest:
// CHECK:   call void @b()
// CHECK:   br label %[[END]]
  %b = function_ref @b : $[thin] () -> ()
  apply %b() : $[thin] () -> ()
  br end

// CHECK: ; <label>:[[Z_DEST]]
z_dest:
// CHECK:   call void @c()
// CHECK:   br label %[[END]]
  %c = function_ref @c : $[thin] () -> ()
  apply %c() : $[thin] () -> ()
  br end

// CHECK: ; <label>:[[END]]
// CHECK:   ret void
end:
  %x = tuple ()
  return %x : $()
}

// CHECK: define { i64, i1 } @single_payload_no_xi_inject_x(i64) {
// CHECK: entry:
// CHECK:   [[A:%.*]] = insertvalue { i64, i1 } undef, i64 %0, 0
// CHECK:   [[B:%.*]] = insertvalue { i64, i1 } [[A]], i1 false, 1
// CHECK:   ret { i64, i1 } [[B]]
// CHECK: }
sil @single_payload_no_xi_inject_x : $(Builtin.Int64) -> SinglePayloadNoXI2 {
entry(%0 : $Builtin.Int64):
  %u = union $SinglePayloadNoXI2, #SinglePayloadNoXI2.x!unionelt.1, %0 : $Builtin.Int64
  return %u : $SinglePayloadNoXI2
}

// CHECK: define void @single_payload_no_xi_inject_x_indirect(i64, %O5union18SinglePayloadNoXI2*) {
// CHECK: entry:
// CHECK:   [[DATA_ADDR:%.*]] = bitcast %O5union18SinglePayloadNoXI2* %1 to i64*
// CHECK:   store i64 %0, i64* [[DATA_ADDR]], align 8
// CHECK:   [[TAG_ADDR:%.*]] = getelementptr inbounds %O5union18SinglePayloadNoXI2* %1, i32 0, i32 1
// CHECK:   store i1 false, i1* [[TAG_ADDR]], align 8
// CHECK:   ret void
// CHECK: }
sil @single_payload_no_xi_inject_x_indirect : $(Builtin.Int64, [byref] SinglePayloadNoXI2) -> () {
entry(%0 : $Builtin.Int64, %1 : $*SinglePayloadNoXI2):
  %a = union_data_addr %1 : $*SinglePayloadNoXI2, #SinglePayloadNoXI2.x!unionelt.1
  store %0 to %a : $*Builtin.Int64
  inject_union_addr %1 : $*SinglePayloadNoXI2, #SinglePayloadNoXI2.x!unionelt.1
  %v = tuple ()
  return %v : $()
}

// CHECK: define { i64, i1 } @single_payload_no_xi_inject_y() {
// CHECK: entry:
// CHECK:   ret { i64, i1 } { i64 0, i1 true }
// CHECK: }
sil @single_payload_no_xi_inject_y : $() -> SinglePayloadNoXI2 {
entry:
  %u = union $SinglePayloadNoXI2, #SinglePayloadNoXI2.y!unionelt
  return %u : $SinglePayloadNoXI2
}

// CHECK: define void @single_payload_no_xi_inject_y_indirect(%O5union18SinglePayloadNoXI2*) {
// CHECK: entry:
// CHECK:   [[PAYLOAD_ADDR:%.*]] = getelementptr inbounds %O5union18SinglePayloadNoXI2* %0, i32 0, i32 0
// CHECK:   store i64 0, i64* [[PAYLOAD_ADDR]], align 8
// CHECK:   [[TAG_ADDR:%.*]] = getelementptr inbounds %O5union18SinglePayloadNoXI2* %0, i32 0, i32 1
// CHECK:   store i1 true, i1* [[TAG_ADDR]], align 8
// CHECK:   ret void
// CHECK: }
sil @single_payload_no_xi_inject_y_indirect : $([byref] SinglePayloadNoXI2) -> () {
entry(%0 : $*SinglePayloadNoXI2):
  inject_union_addr %0 : $*SinglePayloadNoXI2, #SinglePayloadNoXI2.y!unionelt
  %v = tuple ()
  return %v : $()
}

// CHECK: define { i64, i1 } @single_payload_no_xi_inject_z() {
// CHECK: entry:
// CHECK:   ret { i64, i1 } { i64 1, i1 true }
// CHECK: }
sil @single_payload_no_xi_inject_z : $() -> SinglePayloadNoXI2 {
entry:
  %u = union $SinglePayloadNoXI2, #SinglePayloadNoXI2.z!unionelt
  return %u : $SinglePayloadNoXI2
}


// -- Test packing and unpacking aggregates.

union AggregateSinglePayload {
  case x(Builtin.Int21, Builtin.Int64)
  case y
  case z
}

// CHECK: define void @aggregate_single_payload_unpack(i128, i1) {
sil @aggregate_single_payload_unpack : $[thin] (AggregateSinglePayload) -> () {
entry(%u : $AggregateSinglePayload):
  switch_union %u : $AggregateSinglePayload, case #AggregateSinglePayload.x!unionelt.1: x_dest, default end

// CHECK:   {{%.*}} = trunc i128 %0 to i21
// CHECK:   [[SHIFT_1:%.*]] = lshr i128 %0, 64
// CHECK:   {{%.*}} = trunc i128 [[SHIFT_1]] to i64
x_dest(%v : $(Builtin.Int21, Builtin.Int64)):
  br end

end:
  %x = tuple ()
  return %x : $()
}

// CHECK: define { i128, i1 } @aggregate_single_payload_inject(i21, i64) {
// CHECK: entry:
// CHECK:   [[ZEXT_0:%.*]] = zext i21 %0 to i128
// CHECK:   [[ZEXT_1:%.*]] = zext i64 %1 to i128
// CHECK:   [[SHIFT_1:%.*]] = shl i128 [[ZEXT_1]], 64
// CHECK:   [[PAYLOAD:%.*]] = or i128 [[ZEXT_0]], [[SHIFT_1]]
// CHECK:   [[RES_0:%.*]] = insertvalue { i128, i1 } undef, i128 [[PAYLOAD]], 0
// CHECK:   [[RES:%.*]] = insertvalue { i128, i1 } [[RES_0]], i1 false, 1
// CHECK:   ret { i128, i1 } [[RES]]
// CHECK: }
sil @aggregate_single_payload_inject : $(Builtin.Int21, Builtin.Int64) -> AggregateSinglePayload {
entry(%0 : $Builtin.Int21, %1 : $Builtin.Int64):
  %t = tuple (%0 : $Builtin.Int21, %1 : $Builtin.Int64)
  %u = union $AggregateSinglePayload, #AggregateSinglePayload.x!unionelt.1, %t : $(Builtin.Int21, Builtin.Int64)
  return %u : $AggregateSinglePayload
}

struct CharLike { var value : Builtin.Int21 }
struct IntLike { var value : Builtin.Int64 }
struct RangeLike { var from, to : Builtin.Int64 }

union AggregateSinglePayload2 {
  case x(CharLike, IntLike, RangeLike)
  case y
  case z
}

// CHECK: define void @aggregate_single_payload_unpack_2(i256, i1) {
sil @aggregate_single_payload_unpack_2 : $[thin] (AggregateSinglePayload2) -> () {
entry(%u : $AggregateSinglePayload2):
  switch_union %u : $AggregateSinglePayload2, case #AggregateSinglePayload2.x!unionelt.1: x_dest, default end

// CHECK:   {{%.*}} = trunc i256 %0 to i21
// CHECK:   [[SHIFT_1:%.*]] = lshr i256 %0, 64
// CHECK:   {{%.*}} = trunc i256 [[SHIFT_1]] to i64
// CHECK:   [[SHIFT_2_FROM:%.*]] = lshr i256 %0, 128
// CHECK:   {{%.*}} = trunc i256 [[SHIFT_2_FROM]] to i64
// CHECK:   [[SHIFT_2_TO:%.*]] = lshr i256 %0, 192
// CHECK:   {{%.*}} = trunc i256 [[SHIFT_2_TO]] to i64
x_dest(%v : $(CharLike, IntLike, RangeLike)):
  br end

end:
  %x = tuple ()
  return %x : $()
}

// CHECK: define { i256, i1 } @aggregate_single_payload_2_inject(i21, i64, i64, i64) {
// CHECK: entry:
// CHECK:   [[ZEXT_0:%.*]] = zext i21 %0 to i256
// CHECK:   [[ZEXT_1:%.*]] = zext i64 %1 to i256
// CHECK:   [[SHIFT_1:%.*]] = shl i256 [[ZEXT_1]], 64
// CHECK:   [[PAYLOAD_0_1:%.*]] = or i256 [[ZEXT_0]], [[SHIFT_1]]
// CHECK:   [[ZEXT_2_FROM:%.*]] = zext i64 %2 to i256
// CHECK:   [[SHIFT_2_FROM:%.*]] = shl i256 [[ZEXT_2_FROM]], 128
// CHECK:   [[ZEXT_2_TO:%.*]] = zext i64 %3 to i256
// CHECK:   [[SHIFT_2_TO:%.*]] = shl i256 [[ZEXT_2_TO]], 192
// CHECK:   [[PAYLOAD_2:%.*]] = or i256 [[SHIFT_2_FROM]], [[SHIFT_2_TO]]
// CHECK:   [[PAYLOAD:%.*]] = or i256 [[PAYLOAD_0_1]], [[PAYLOAD_2]]
// CHECK:   [[RES_0:%.*]] = insertvalue { i256, i1 } undef, i256 [[PAYLOAD]], 0
// CHECK:   [[RES:%.*]] = insertvalue { i256, i1 } [[RES_0]], i1 false, 1
// CHECK:   ret { i256, i1 } [[RES]]
// CHECK: }
sil @aggregate_single_payload_2_inject : $(CharLike, IntLike, RangeLike) -> AggregateSinglePayload2 {
entry(%0 : $CharLike, %1 : $IntLike, %2 : $RangeLike):
  %t = tuple (%0 : $CharLike, %1 : $IntLike, %2 : $RangeLike)
  %u = union $AggregateSinglePayload2, #AggregateSinglePayload2.x!unionelt.1, %t : $(CharLike, IntLike, RangeLike)
  return %u : $AggregateSinglePayload2
}


union SinglePayloadSpareBit {
  case x(Builtin.Int63)
  case y
  case z
}

// CHECK: define void @single_payload_spare_bit_switch(i64) {
sil @single_payload_spare_bit_switch : $[thin] (SinglePayloadSpareBit) -> () {
// CHECK: entry:
entry(%u : $SinglePayloadSpareBit):
// CHECK:  switch i64 %0, label %[[X_DEST:[0-9]+]] [
// --           0x8000_0000_0000_0000
// CHECK:    i64 -9223372036854775808, label %[[Y_DEST:[0-9]+]]
// --           0x8000_0000_0000_0001
// CHECK:    i64 -9223372036854775807, label %[[Z_DEST:[0-9]+]]
// CHECK:  ]
  switch_union %u : $SinglePayloadSpareBit, case #SinglePayloadSpareBit.x!unionelt.1: x_dest, case #SinglePayloadSpareBit.y!unionelt: y_dest, case #SinglePayloadSpareBit.z!unionelt: z_dest

// CHECK: ; <label>:[[X_DEST]]
x_dest:
// CHECK:   call void @a()
  %a = function_ref @a : $[thin] () -> ()
  apply %a() : $[thin] () -> ()
// CHECK:   br label %[[END:[0-9]+]]
  br end

// CHECK: ; <label>:[[Y_DEST]]
y_dest:
// CHECK:   call void @b()
  %b = function_ref @b : $[thin] () -> ()
  apply %b() : $[thin] () -> ()
// CHECK:   br label %[[END]]
  br end

// CHECK: ; <label>:[[Z_DEST]]
z_dest:
// CHECK:   call void @c()
  %c = function_ref @c : $[thin] () -> ()
  apply %c() : $[thin] () -> ()
// CHECK:   br label %[[END]]
  br end

// CHECK: ; <label>:[[END]]
end:
// CHECK:   ret void
  %x = tuple ()
  return %x : $()
}

// CHECK: define void @single_payload_spare_bit_switch_arg(i64) {
sil @single_payload_spare_bit_switch_arg : $[thin] (SinglePayloadSpareBit) -> () {
// CHECK: entry:
entry(%u : $SinglePayloadSpareBit):
// CHECK:  switch i64 %0, label %[[X_PREDEST:[0-9]+]] [
// --           0x8000_0000_0000_0000
// CHECK:    i64 -9223372036854775808, label %[[Y_DEST:[0-9]+]]
// --           0x8000_0000_0000_0001
// CHECK:    i64 -9223372036854775807, label %[[Z_DEST:[0-9]+]]
// CHECK:  ]
  switch_union %u : $SinglePayloadSpareBit, case #SinglePayloadSpareBit.x!unionelt.1: x_dest, case #SinglePayloadSpareBit.y!unionelt: y_dest, case #SinglePayloadSpareBit.z!unionelt: z_dest

// CHECK: ; <label>:[[X_PREDEST]]
// CHECK:   [[TRUNC_PAYLOAD:%.*]] = trunc i64 %0 to i63
// CHECK:   br label %[[X_DEST:[0-9]+]]
// CHECK: ; <label>:[[X_DEST]]
// CHECK:   {{%.*}} = phi i63 [ [[TRUNC_PAYLOAD]], %[[X_PREDEST]] ]
x_dest(%u2 : $Builtin.Int63):
// CHECK:   call void @a()
  %a = function_ref @a : $[thin] () -> ()
  apply %a() : $[thin] () -> ()
// CHECK:   br label %[[END:[0-9]+]]
  br end

// CHECK: ; <label>:[[Y_DEST]]
y_dest:
// CHECK:   call void @b()
  %b = function_ref @b : $[thin] () -> ()
  apply %b() : $[thin] () -> ()
// CHECK:   br label %[[END]]
  br end

// CHECK: ; <label>:[[Z_DEST]]
z_dest:
// CHECK:   call void @c()
  %c = function_ref @c : $[thin] () -> ()
  apply %c() : $[thin] () -> ()
// CHECK:   br label %[[END]]
  br end

// CHECK: ; <label>:[[END]]
end:
// CHECK:   ret void
  %x = tuple ()
  return %x : $()
}

sil @single_payload_spare_bit_switch_indirect : $[thin] ([byref] SinglePayloadSpareBit) -> () {
entry(%u : $*SinglePayloadSpareBit):
// CHECK:  [[PAYLOAD_ADDR:%.*]] = getelementptr inbounds %O5union21SinglePayloadSpareBit* %0, i32 0, i32 0
// CHECK:  [[PAYLOAD:%.*]] = load i64* [[PAYLOAD_ADDR]]
// CHECK:  switch i64 [[PAYLOAD]]
  destructive_switch_union_addr %u : $*SinglePayloadSpareBit, case #SinglePayloadSpareBit.x!unionelt.1: x_dest, case #SinglePayloadSpareBit.y!unionelt: y_dest, case #SinglePayloadSpareBit.z!unionelt: z_dest

// CHECK: ; <label>:[[X_PREDEST:[0-9]+]]
// CHECK:   [[DATA_ADDR:%.*]] = bitcast %O5union21SinglePayloadSpareBit* %0 to i63*
// CHECK:   br label %[[X_DEST:[0-9]+]]
// CHECK: ; <label>:[[X_DEST]]
// CHECK:   phi i63* [ [[DATA_ADDR]], %[[X_PREDEST]] ]
x_dest(%u2 : $*Builtin.Int63):
  %a = function_ref @a : $[thin] () -> ()
  apply %a() : $[thin] () -> ()
  br end

y_dest:
  br end

z_dest:
  br end

end:
  %x = tuple ()
  return %x : $()
}

// CHECK: define i64 @single_payload_spare_bit_inject_x(i63) {
// CHECK: entry:
// CHECK:   [[A:%.*]] = zext i63 %0 to i64
// CHECK:   ret i64 [[A]]
// CHECK: }
sil @single_payload_spare_bit_inject_x : $(Builtin.Int63) -> SinglePayloadSpareBit {
entry(%0 : $Builtin.Int63):
  %u = union $SinglePayloadSpareBit, #SinglePayloadSpareBit.x!unionelt.1, %0 : $Builtin.Int63
  return %u : $SinglePayloadSpareBit
}

// CHECK: define void @single_payload_spare_bit_inject_x_indirect(i63, %O5union21SinglePayloadSpareBit*) {
// CHECK: entry:
// CHECK:   [[DATA_ADDR:%.*]] = bitcast %O5union21SinglePayloadSpareBit* %1 to i63*
// CHECK:   store i63 %0, i63* [[DATA_ADDR]], align 8
// CHECK:   ret void
// CHECK: }
sil @single_payload_spare_bit_inject_x_indirect : $(Builtin.Int63, [byref] SinglePayloadSpareBit) -> () {
entry(%0 : $Builtin.Int63, %1 : $*SinglePayloadSpareBit):
  %a = union_data_addr %1 : $*SinglePayloadSpareBit, #SinglePayloadSpareBit.x!unionelt.1
  store %0 to %a : $*Builtin.Int63
  inject_union_addr %1 : $*SinglePayloadSpareBit, #SinglePayloadSpareBit.x!unionelt.1
  %v = tuple ()
  return %v : $()
}

// CHECK: define i64 @single_payload_spare_bit_inject_y() {
// CHECK: entry:
// --              0x8000_0000_0000_0000
// CHECK:   ret i64 -9223372036854775808
// CHECK: }
sil @single_payload_spare_bit_inject_y : $() -> SinglePayloadSpareBit {
entry:
  %u = union $SinglePayloadSpareBit, #SinglePayloadSpareBit.y!unionelt
  return %u : $SinglePayloadSpareBit
}

// CHECK: define void @single_payload_spare_bit_inject_y_indirect(%O5union21SinglePayloadSpareBit*) {
// CHECK: entry:
// CHECK:   [[PAYLOAD_ADDR:%.*]] = getelementptr inbounds %O5union21SinglePayloadSpareBit* %0, i32 0, i32 0
// --                0x8000_0000_0000_0000
// CHECK:   store i64 -9223372036854775808, i64* [[PAYLOAD_ADDR]], align 8
// CHECK:   ret void
// CHECK: }
sil @single_payload_spare_bit_inject_y_indirect : $([byref] SinglePayloadSpareBit) -> () {
entry(%0 : $*SinglePayloadSpareBit):
  inject_union_addr %0 : $*SinglePayloadSpareBit, #SinglePayloadSpareBit.y!unionelt
  %v = tuple ()
  return %v : $()
}

// CHECK: define i64 @single_payload_spare_bit_inject_z() {
// CHECK: entry:
//                 0x8000_0000_0000_0001
// CHECK:   ret i64 -9223372036854775807
// CHECK: }
sil @single_payload_spare_bit_inject_z : $() -> SinglePayloadSpareBit {
entry:
  %u = union $SinglePayloadSpareBit, #SinglePayloadSpareBit.z!unionelt
  return %u : $SinglePayloadSpareBit
}


union MultiPayloadNoSpareBits {
  case x(Builtin.Int64)
  case y(Builtin.Int32)
  case z(Builtin.Int63)
  case a
  case b
  case c
}

// CHECK: define void @multi_payload_no_spare_bits_switch(i64, i2) {
sil @multi_payload_no_spare_bits_switch : $(MultiPayloadNoSpareBits) -> () {
entry(%u : $MultiPayloadNoSpareBits):
// CHECK:   switch i2 %1, label %[[UNREACHABLE:[0-9]+]] [
// CHECK:     i2 0, label %[[X_PREDEST:[0-9]+]]
// CHECK:     i2 1, label %[[Y_PREDEST:[0-9]+]]
// CHECK:     i2 -2, label %[[Z_PREDEST:[0-9]+]]
// CHECK:     i2 -1, label %[[EMPTY:[0-9]+]]
// CHECK:   ]
// CHECK: ; <label>:[[EMPTY]]
// CHECK:   switch i64 %0, label %[[UNREACHABLE]] [
// CHECK:     i64 0, label %[[A_DEST:[0-9]+]]
// CHECK:     i64 1, label %[[B_DEST:[0-9]+]]
// CHECK:     i64 2, label %[[C_DEST:[0-9]+]]
// CHECK:   ]
// CHECK: ; <label>:[[UNREACHABLE]]
// CHECK:   unreachable
  switch_union %u : $MultiPayloadNoSpareBits, case #MultiPayloadNoSpareBits.x!unionelt.1: x_dest, case #MultiPayloadNoSpareBits.y!unionelt.1: y_dest, case #MultiPayloadNoSpareBits.z!unionelt.1: z_dest, case #MultiPayloadNoSpareBits.a!unionelt: a_dest, case #MultiPayloadNoSpareBits.b!unionelt: b_dest, case #MultiPayloadNoSpareBits.c!unionelt: c_dest

// CHECK: ; <label>:[[X_PREDEST]]
// CHECK:   br label %[[X_DEST:[0-9]+]]
// CHECK: ; <label>:[[Y_PREDEST]]
// CHECK:   [[Y_VALUE:%.*]] = trunc i64 %0 to i32
// CHECK:   br label %[[Y_DEST:[0-9]+]]
// CHECK: ; <label>:[[Z_PREDEST]]
// CHECK:   [[Z_VALUE:%.*]] = trunc i64 %0 to i63
// CHECK:   br label %[[Z_DEST:[0-9]+]]

// CHECK: ; <label>:[[X_DEST]]
// CHECK:   phi i64 [ %0, %[[X_PREDEST]] ]
x_dest(%x : $Builtin.Int64):
  %a = function_ref @a : $[thin] () -> ()
  apply %a() : $[thin] () -> ()
  br end

// CHECK: ; <label>:[[Y_DEST]]
// CHECK:   phi i32 [ [[Y_VALUE]], %[[Y_PREDEST]] ]
y_dest(%y : $Builtin.Int32):
  %b = function_ref @b : $[thin] () -> ()
  apply %b() : $[thin] () -> ()
  br end

// CHECK: ; <label>:[[Z_DEST]]
// CHECK:   phi i63 [ [[Z_VALUE]], %[[Z_PREDEST]] ]
z_dest(%z : $Builtin.Int63):
  %c = function_ref @c : $[thin] () -> ()
  apply %c() : $[thin] () -> ()
  br end

// CHECK: ; <label>:[[A_DEST]]
a_dest:
  %d = function_ref @d : $[thin] () -> ()
  apply %d() : $[thin] () -> ()
  br end

// CHECK: ; <label>:[[B_DEST]]
b_dest:
  %e = function_ref @e : $[thin] () -> ()
  apply %e() : $[thin] () -> ()
  br end

// CHECK: ; <label>:[[C_DEST]]
c_dest:
  %f = function_ref @f : $[thin] () -> ()
  apply %f() : $[thin] () -> ()
  br end

end:
  %v = tuple ()
  return %v : $()
}

// CHECK: define void @multi_payload_no_spare_bits_switch_indirect(%O5union23MultiPayloadNoSpareBits*) {
sil @multi_payload_no_spare_bits_switch_indirect : $([byref] MultiPayloadNoSpareBits) -> () {
entry(%u : $*MultiPayloadNoSpareBits):
// CHECK:   [[PAYLOAD_ADDR:%.*]] = getelementptr inbounds %O5union23MultiPayloadNoSpareBits* %0, i32 0, i32 0
// CHECK:   [[PAYLOAD:%.*]] = load i64* [[PAYLOAD_ADDR]], align 8
// CHECK:   [[TAG_ADDR:%.*]] = getelementptr inbounds %O5union23MultiPayloadNoSpareBits* %0, i32 0, i32 1
// CHECK:   [[TAG:%.*]] = load i2* [[TAG_ADDR]], align 8
// CHECK:   switch i2 [[TAG]]
// CHECK:   switch i64 [[PAYLOAD]]
// CHECK: ; <label>:
// CHECK:   unreachable
  destructive_switch_union_addr %u : $*MultiPayloadNoSpareBits, case #MultiPayloadNoSpareBits.x!unionelt.1: x_dest, case #MultiPayloadNoSpareBits.y!unionelt.1: y_dest, case #MultiPayloadNoSpareBits.z!unionelt.1: z_dest, case #MultiPayloadNoSpareBits.a!unionelt: a_dest, case #MultiPayloadNoSpareBits.b!unionelt: b_dest, case #MultiPayloadNoSpareBits.c!unionelt: c_dest

// CHECK: ; <label>:[[X_PREDEST:[0-9]+]]
// CHECK:   bitcast %O5union23MultiPayloadNoSpareBits* %0 to i64*
// CHECK: ; <label>:[[Y_PREDEST:[0-9]+]]
// CHECK:   bitcast %O5union23MultiPayloadNoSpareBits* %0 to i32*
// CHECK: ; <label>:[[Z_PREDEST:[0-9]+]]
// CHECK:   bitcast %O5union23MultiPayloadNoSpareBits* %0 to i63*

x_dest(%x : $*Builtin.Int64):
  br end

y_dest(%y : $*Builtin.Int32):
  br end

z_dest(%z : $*Builtin.Int63):
  br end

a_dest:
  br end

b_dest:
  br end

c_dest:
  br end

end:
  %v = tuple ()
  return %v : $()
}

// CHECK: define { i64, i2 } @multi_payload_no_spare_bit_inject_x(i64) {
// CHECK: entry:
// CHECK:   [[RES_0:%.*]] = insertvalue { i64, i2 } undef, i64 %0, 0
// CHECK:   [[RES:%.*]] = insertvalue { i64, i2 } [[RES_0]], i2 0, 1
// CHECK:   ret { i64, i2 } [[RES]]
// CHECK: }
sil @multi_payload_no_spare_bit_inject_x : $(Builtin.Int64) -> MultiPayloadNoSpareBits {
entry(%0 : $Builtin.Int64):
  %u = union $MultiPayloadNoSpareBits, #MultiPayloadNoSpareBits.x!unionelt.1, %0 : $Builtin.Int64
  return %u : $MultiPayloadNoSpareBits
}

// CHECK: define void @multi_payload_no_spare_bit_inject_x_indirect(i64, %O5union23MultiPayloadNoSpareBits*) {
// CHECK: entry:
// CHECK:   [[DATA_ADDR:%.*]] = bitcast %O5union23MultiPayloadNoSpareBits* %1 to i64*
// CHECK:   store i64 %0, i64* [[DATA_ADDR]], align 8
// CHECK:   [[TAG_ADDR:%.*]] = getelementptr inbounds %O5union23MultiPayloadNoSpareBits* %1, i32 0, i32 1
// CHECK:   store i2 0, i2* [[TAG_ADDR]], align 8
// CHECK:   ret void
// CHECK: }
sil @multi_payload_no_spare_bit_inject_x_indirect : $(Builtin.Int64, [byref] MultiPayloadNoSpareBits) -> () {
entry(%0 : $Builtin.Int64, %1 : $*MultiPayloadNoSpareBits):
  %a = union_data_addr %1 : $*MultiPayloadNoSpareBits, #MultiPayloadNoSpareBits.x!unionelt.1
  store %0 to %a : $*Builtin.Int64
  inject_union_addr %1 : $*MultiPayloadNoSpareBits, #MultiPayloadNoSpareBits.x!unionelt.1
  %v = tuple ()
  return %v : $()
}

// CHECK: define { i64, i2 } @multi_payload_no_spare_bit_inject_y(i32) {
// CHECK: entry:
// CHECK:   [[ZEXT:%.*]] = zext i32 %0 to i64
// CHECK:   [[RES_0:%.*]] = insertvalue { i64, i2 } undef, i64 [[ZEXT]], 0
// CHECK:   [[RES:%.*]] = insertvalue { i64, i2 } [[RES_0]], i2 1, 1
// CHECK:   ret { i64, i2 } [[RES]]
// CHECK: }
sil @multi_payload_no_spare_bit_inject_y : $(Builtin.Int32) -> MultiPayloadNoSpareBits {
entry(%0 : $Builtin.Int32):
  %u = union $MultiPayloadNoSpareBits, #MultiPayloadNoSpareBits.y!unionelt.1, %0 : $Builtin.Int32
  return %u : $MultiPayloadNoSpareBits
}

// CHECK: define { i64, i2 } @multi_payload_no_spare_bit_inject_z(i63) {
// CHECK: entry:
// CHECK:   [[ZEXT:%.*]] = zext i63 %0 to i64
// CHECK:   [[RES_0:%.*]] = insertvalue { i64, i2 } undef, i64 [[ZEXT]], 0
// CHECK:   [[RES:%.*]] = insertvalue { i64, i2 } [[RES_0]], i2 -2, 1
// CHECK:   ret { i64, i2 } [[RES]]
// CHECK: }
sil @multi_payload_no_spare_bit_inject_z : $(Builtin.Int63) -> MultiPayloadNoSpareBits {
entry(%0 : $Builtin.Int63):
  %u = union $MultiPayloadNoSpareBits, #MultiPayloadNoSpareBits.z!unionelt.1, %0 : $Builtin.Int63
  return %u : $MultiPayloadNoSpareBits
}

// CHECK: define { i64, i2 } @multi_payload_no_spare_bit_inject_a() {
// CHECK: entry:
// CHECK:   ret { i64, i2 } { i64 0, i2 -1 }
// CHECK: }
sil @multi_payload_no_spare_bit_inject_a : $() -> MultiPayloadNoSpareBits {
entry:
  %u = union $MultiPayloadNoSpareBits, #MultiPayloadNoSpareBits.a!unionelt
  return %u : $MultiPayloadNoSpareBits
}

// CHECK: define void @multi_payload_no_spare_bit_inject_a_indirect(%O5union23MultiPayloadNoSpareBits*) {
// CHECK: entry:
// CHECK:   [[PAYLOAD_ADDR:%.*]] = getelementptr inbounds %O5union23MultiPayloadNoSpareBits* %0, i32 0, i32 0
// CHECK:   store i64 0, i64* [[PAYLOAD_ADDR]], align 8
// CHECK:   [[DATA_ADDR:%.*]] = getelementptr inbounds %O5union23MultiPayloadNoSpareBits* %0, i32 0, i32 1
// CHECK:   store i2 -1, i2* [[DATA_ADDR]], align 8
// CHECK:   ret void
// CHECK: }
sil @multi_payload_no_spare_bit_inject_a_indirect : $([byref] MultiPayloadNoSpareBits) -> () {
entry(%0 : $*MultiPayloadNoSpareBits):
  inject_union_addr %0 : $*MultiPayloadNoSpareBits, #MultiPayloadNoSpareBits.a!unionelt
  %v = tuple ()
  return %v : $()
}

// CHECK: define { i64, i2 } @multi_payload_no_spare_bit_inject_b() {
// CHECK: entry:
// CHECK:   ret { i64, i2 } { i64 1, i2 -1 }
// CHECK: }
sil @multi_payload_no_spare_bit_inject_b : $() -> MultiPayloadNoSpareBits {
entry:
  %u = union $MultiPayloadNoSpareBits, #MultiPayloadNoSpareBits.b!unionelt
  return %u : $MultiPayloadNoSpareBits
}

// CHECK: define { i64, i2 } @multi_payload_no_spare_bit_inject_c() {
// CHECK: entry:
// CHECK:   ret { i64, i2 } { i64 2, i2 -1 }
// CHECK: }
sil @multi_payload_no_spare_bit_inject_c : $() -> MultiPayloadNoSpareBits {
entry:
  %u = union $MultiPayloadNoSpareBits, #MultiPayloadNoSpareBits.c!unionelt
  return %u : $MultiPayloadNoSpareBits
}

union MultiPayloadOneSpareBit {
  case x(Builtin.Int62)
  case y(Builtin.Int63)
  case z(Builtin.Int61)
  case a
  case b
  case c
}

// CHECK: define void @multi_payload_one_spare_bit_switch(i64, i1) {
sil @multi_payload_one_spare_bit_switch : $(MultiPayloadOneSpareBit) -> () {
entry(%u : $MultiPayloadOneSpareBit):
// CHECK:   [[SPARE_TAG_LSHR:%.*]] = lshr i64 %0, 63
// CHECK:   [[SPARE_TAG_TRUNC:%.*]] = trunc i64 [[SPARE_TAG_LSHR]] to i2
// CHECK:   [[SPARE_TAG:%.*]] = and i2 [[SPARE_TAG_TRUNC]], 1
// CHECK:   [[EXTRA_TAG_ZEXT:%.*]] = zext i1 %1 to i2
// CHECK:   [[EXTRA_TAG:%.*]] = shl i2 [[EXTRA_TAG_ZEXT]], 1
// CHECK:   [[TAG:%.*]] = or i2 [[SPARE_TAG]], [[EXTRA_TAG]]
// CHECK:   switch i2 [[TAG]], label %[[UNREACHABLE:[0-9]+]] [
// CHECK:     i2 0, label %[[X_PREDEST:[0-9]+]]
// CHECK:     i2 1, label %[[Y_PREDEST:[0-9]+]]
// CHECK:     i2 -2, label %[[Z_PREDEST:[0-9]+]]
// CHECK:     i2 -1, label %[[EMPTY_DEST:[0-9]+]]
// CHECK:   ]

// CHECK: ; <label>:[[EMPTY_DEST]]
// CHECK:   switch i64 %0, label %[[UNREACHABLE]] [
// --            0x8000_0000_0000_0000
// CHECK:     i64 -9223372036854775808, label %[[A_DEST:[0-9]+]]
// --            0x8000_0000_0000_0001
// CHECK:     i64 -9223372036854775807, label %[[B_DEST:[0-9]+]]
// --            0x8000_0000_0000_0002
// CHECK:     i64 -9223372036854775806, label %[[C_DEST:[0-9]+]]
// CHECK:   ]

// CHECK: ; <label>:[[UNREACHABLE]]
// CHECK:   unreachable
  switch_union %u : $MultiPayloadOneSpareBit, case #MultiPayloadOneSpareBit.x!unionelt.1: x_dest, case #MultiPayloadOneSpareBit.y!unionelt.1: y_dest, case #MultiPayloadOneSpareBit.z!unionelt.1: z_dest, case #MultiPayloadOneSpareBit.a!unionelt: a_dest, case #MultiPayloadOneSpareBit.b!unionelt: b_dest, case #MultiPayloadOneSpareBit.c!unionelt: c_dest

// CHECK: ; <label>:[[X_PREDEST]]
// CHECK:   [[X_VALUE:%.*]] = trunc i64 %0 to i62
// CHECK:   br label %[[X_DEST:[0-9]+]]
// CHECK: ; <label>:[[Y_PREDEST]]
// --                                    0x7FFF_FFFF_FFFF_FFFF
// CHECK:   [[Y_MASKED:%.*]] = and i64 %0, 9223372036854775807
// CHECK:   [[Y_VALUE:%.*]] = trunc i64 [[Y_MASKED]] to i63
// CHECK:   br label %[[Y_DEST:[0-9]+]]
// CHECK: ; <label>:[[Z_PREDEST]]
// CHECK:   [[Z_VALUE:%.*]] = trunc i64 %0 to i61
// CHECK:   br label %[[Z_DEST:[0-9]+]]

// CHECK: ; <label>:[[X_DEST]]
// CHECK:   phi i62 [ [[X_VALUE]], %[[X_PREDEST]] ]
x_dest(%x : $Builtin.Int62):
  %a = function_ref @a : $[thin] () -> ()
  apply %a() : $[thin] () -> ()
  br end

// CHECK: ; <label>:[[Y_DEST]]
// CHECK:   phi i63 [ [[Y_VALUE]], %[[Y_PREDEST]] ]
y_dest(%y : $Builtin.Int63):
  %b = function_ref @b : $[thin] () -> ()
  apply %b() : $[thin] () -> ()
  br end

// CHECK: ; <label>:[[Z_DEST]]
// CHECK:   phi i61 [ [[Z_VALUE]], %[[Z_PREDEST]] ]
z_dest(%z : $Builtin.Int61):
  %c = function_ref @c : $[thin] () -> ()
  apply %c() : $[thin] () -> ()
  br end

// CHECK: ; <label>:[[A_DEST]]
a_dest:
  %d = function_ref @d : $[thin] () -> ()
  apply %d() : $[thin] () -> ()
  br end

// CHECK: ; <label>:[[B_DEST]]
b_dest:
  %e = function_ref @e : $[thin] () -> ()
  apply %e() : $[thin] () -> ()
  br end

// CHECK: ; <label>:[[C_DEST]]
c_dest:
  %f = function_ref @f : $[thin] () -> ()
  apply %f() : $[thin] () -> ()
  br end

end:
  %v = tuple ()
  return %v : $()
}

sil @multi_payload_one_spare_bit_switch_indirect : $([byref] MultiPayloadOneSpareBit) -> () {
entry(%u : $*MultiPayloadOneSpareBit):
// CHECK:   [[PAYLOAD_ADDR:%.*]] = getelementptr inbounds %O5union23MultiPayloadOneSpareBit* %0, i32 0, i32 0
// CHECK:   [[PAYLOAD:%.*]] = load i64* [[PAYLOAD_ADDR]], align 8
// CHECK:   [[TAG_ADDR:%.*]] = getelementptr inbounds %O5union23MultiPayloadOneSpareBit* %0, i32 0, i32 1
// CHECK:   [[TAG:%.*]] = load i1* [[TAG_ADDR]], align 8
// CHECK:   switch i2 {{%.*}}
// CHECK:   switch i64 [[PAYLOAD]]
// CHECK: ; <label>:
// CHECK:   unreachable
  destructive_switch_union_addr %u : $*MultiPayloadOneSpareBit, case #MultiPayloadOneSpareBit.x!unionelt.1: x_dest, case #MultiPayloadOneSpareBit.y!unionelt.1: y_dest, case #MultiPayloadOneSpareBit.z!unionelt.1: z_dest, case #MultiPayloadOneSpareBit.a!unionelt: a_dest, case #MultiPayloadOneSpareBit.b!unionelt: b_dest, case #MultiPayloadOneSpareBit.c!unionelt: c_dest

// CHECK: ; <label>:[[X_PREDEST:[0-9]+]]
// CHECK:   bitcast %O5union23MultiPayloadOneSpareBit* %0 to i62*

// CHECK: ; <label>:[[Y_PREDEST:[0-9]+]]
// CHECK:   [[PAYLOAD_ADDR:%.*]] = getelementptr inbounds %O5union23MultiPayloadOneSpareBit* %0, i32 0, i32 0
// CHECK:   [[PAYLOAD:%.*]] = load i64* [[PAYLOAD_ADDR]]
// --                                                   0x7FFF_FFFF_FFFF_FFFF
// CHECK:   [[PAYLOAD_MASKED:%.*]] = and i64 [[PAYLOAD]], 9223372036854775807
// CHECK:   store i64 [[PAYLOAD_MASKED]], i64* [[PAYLOAD_ADDR]], align 8
// CHECK:   bitcast %O5union23MultiPayloadOneSpareBit* %0 to i63*

// CHECK: ; <label>:[[Z_PREDEST:[0-9]+]]
// CHECK:   bitcast %O5union23MultiPayloadOneSpareBit* %0 to i61*

x_dest(%x : $*Builtin.Int62):
  br end

y_dest(%y : $*Builtin.Int63):
  br end

z_dest(%z : $*Builtin.Int61):
  br end

a_dest:
  br end

b_dest:
  br end

c_dest:
  br end

end:
  %v = tuple ()
  return %v : $()
}

// CHECK: define { i64, i1 } @multi_payload_one_spare_bit_inject_x(i62) {
// CHECK: entry:
// CHECK:   [[ZEXT:%.*]] = zext i62 %0 to i64
// CHECK:   [[RES_0:%.*]] = insertvalue { i64, i1 } undef, i64 [[ZEXT]], 0
// CHECK:   [[RES:%.*]] = insertvalue { i64, i1 } [[RES_0]], i1 false, 1
// CHECK:   ret { i64, i1 } [[RES]]
// CHECK: }
sil @multi_payload_one_spare_bit_inject_x : $(Builtin.Int62) -> MultiPayloadOneSpareBit {
entry(%0 : $Builtin.Int62):
  %u = union $MultiPayloadOneSpareBit, #MultiPayloadOneSpareBit.x!unionelt.1, %0 : $Builtin.Int62
  return %u : $MultiPayloadOneSpareBit
}

// CHECK: define void @multi_payload_one_spare_bit_inject_x_indirect(i62, %O5union23MultiPayloadOneSpareBit*) {
// CHECK: entry:
// CHECK:   [[DATA_ADDR:%.*]] = bitcast %O5union23MultiPayloadOneSpareBit* %1 to i62*
// CHECK:   store i62 %0, i62* [[DATA_ADDR]], align 8
// CHECK:   [[PAYLOAD_ADDR:%.*]] = getelementptr inbounds %O5union23MultiPayloadOneSpareBit* %1, i32 0, i32 0
// CHECK:   [[PAYLOAD:%.*]] = load i64* [[PAYLOAD_ADDR]], align 8
// --                                                   0x7FFF_FFFF_FFFF_FFFF
// CHECK:   [[PAYLOAD_MASKED:%.*]] = and i64 [[PAYLOAD]], 9223372036854775807
// CHECK:   store i64 [[PAYLOAD_MASKED]], i64* [[PAYLOAD_ADDR]], align 8
// CHECK:   [[TAG_ADDR:%.*]] = getelementptr inbounds %O5union23MultiPayloadOneSpareBit* %1, i32 0, i32 1
// CHECK:   store i1 false, i1* [[TAG_ADDR]], align 8
// CHECK:   ret void
// CHECK: }
sil @multi_payload_one_spare_bit_inject_x_indirect : $(Builtin.Int62, [byref] MultiPayloadOneSpareBit) -> () {
entry(%0 : $Builtin.Int62, %1 : $*MultiPayloadOneSpareBit):
  %a = union_data_addr %1 : $*MultiPayloadOneSpareBit, #MultiPayloadOneSpareBit.x!unionelt.1
  store %0 to %a : $*Builtin.Int62
  inject_union_addr %1 : $*MultiPayloadOneSpareBit, #MultiPayloadOneSpareBit.x!unionelt.1
  %v = tuple ()
  return %v : $()
}

// CHECK: define { i64, i1 } @multi_payload_one_spare_bit_inject_y(i63) {
// CHECK: entry:
// CHECK:   [[ZEXT:%.*]] = zext i63 %0 to i64
// --                                        0x8000_0000_0000_0000
// CHECK:   [[TAGGED:%.*]] = or i64 [[ZEXT]], -9223372036854775808
// CHECK:   [[RES_0:%.*]] = insertvalue { i64, i1 } undef, i64 [[TAGGED]], 0
// CHECK:   [[RES:%.*]] = insertvalue { i64, i1 } [[RES_0]], i1 false, 1
// CHECK:   ret { i64, i1 } [[RES]]
// CHECK: }
sil @multi_payload_one_spare_bit_inject_y : $(Builtin.Int63) -> MultiPayloadOneSpareBit {
entry(%0 : $Builtin.Int63):
  %u = union $MultiPayloadOneSpareBit, #MultiPayloadOneSpareBit.y!unionelt.1, %0 : $Builtin.Int63
  return %u : $MultiPayloadOneSpareBit
}

// CHECK: define void @multi_payload_one_spare_bit_inject_y_indirect(i63, %O5union23MultiPayloadOneSpareBit*) {
// CHECK: entry:
// CHECK:   [[DATA_ADDR:%.*]] = bitcast %O5union23MultiPayloadOneSpareBit* %1 to i63*
// CHECK:   store i63 %0, i63* [[DATA_ADDR]], align 8
// CHECK:   [[PAYLOAD_ADDR:%.*]] = getelementptr inbounds %O5union23MultiPayloadOneSpareBit* %1, i32 0, i32 0
// CHECK:   [[PAYLOAD:%.*]] = load i64* [[PAYLOAD_ADDR]], align 8
// --                                                   0x7FFF_FFFF_FFFF_FFFF
// CHECK:   [[PAYLOAD_MASKED:%.*]] = and i64 [[PAYLOAD]], 9223372036854775807
// --                                                          0x8000_0000_0000_0000
// CHECK:   [[PAYLOAD_TAGGED:%.*]] = or i64 [[PAYLOAD_MASKED]], -9223372036854775808
// CHECK:   store i64 [[PAYLOAD_TAGGED]], i64* [[PAYLOAD_ADDR]], align 8
// CHECK:   [[TAG_ADDR:%.*]] = getelementptr inbounds %O5union23MultiPayloadOneSpareBit* %1, i32 0, i32 1
// CHECK:   store i1 false, i1* [[TAG_ADDR]], align 8
// CHECK:   ret void
// CHECK: }

sil @multi_payload_one_spare_bit_inject_y_indirect : $(Builtin.Int63, [byref] MultiPayloadOneSpareBit) -> () {
entry(%0 : $Builtin.Int63, %1 : $*MultiPayloadOneSpareBit):
  %a = union_data_addr %1 : $*MultiPayloadOneSpareBit, #MultiPayloadOneSpareBit.y!unionelt.1
  store %0 to %a : $*Builtin.Int63
  inject_union_addr %1 : $*MultiPayloadOneSpareBit, #MultiPayloadOneSpareBit.y!unionelt.1
  %v = tuple ()
  return %v : $()
}

// CHECK: define { i64, i1 } @multi_payload_one_spare_bit_inject_z(i61) {
// CHECK: entry:
// CHECK:   [[ZEXT:%.*]] = zext i61 %0 to i64
// CHECK:   [[RES_0:%.*]] = insertvalue { i64, i1 } undef, i64 [[ZEXT]], 0
// CHECK:   [[RES:%.*]] = insertvalue { i64, i1 } [[RES_0]], i1 true, 1
// CHECK:   ret { i64, i1 } [[RES]]
// CHECK: }
sil @multi_payload_one_spare_bit_inject_z : $(Builtin.Int61) -> MultiPayloadOneSpareBit {
entry(%0 : $Builtin.Int61):
  %u = union $MultiPayloadOneSpareBit, #MultiPayloadOneSpareBit.z!unionelt.1, %0 : $Builtin.Int61
  return %u : $MultiPayloadOneSpareBit
}

// CHECK: define { i64, i1 } @multi_payload_one_spare_bit_inject_a() {
// CHECK: entry:
// --                            0x8000_0000_0000_0000
// CHECK:   ret { i64, i1 } { i64 -9223372036854775808, i1 true }
// CHECK: }
sil @multi_payload_one_spare_bit_inject_a : $() -> MultiPayloadOneSpareBit {
entry:
  %u = union $MultiPayloadOneSpareBit, #MultiPayloadOneSpareBit.a!unionelt
  return %u : $MultiPayloadOneSpareBit
}

// CHECK: define void @multi_payload_one_spare_bit_inject_a_indirect(%O5union23MultiPayloadOneSpareBit*) {
// CHECK: entry:
// CHECK:   [[PAYLOAD_ADDR:%.*]] = getelementptr inbounds %O5union23MultiPayloadOneSpareBit* %0, i32 0, i32 0
// --                0x8000_0000_0000_0000
// CHECK:   store i64 -9223372036854775808, i64* [[PAYLOAD_ADDR]], align 8
// CHECK:   [[TAG_ADDR:%.*]] = getelementptr inbounds %O5union23MultiPayloadOneSpareBit* %0, i32 0, i32 1
// CHECK:   store i1 true, i1* [[TAG_ADDR]], align 8
// CHECK:   ret void
// CHECK: }
sil @multi_payload_one_spare_bit_inject_a_indirect : $([byref] MultiPayloadOneSpareBit) -> () {
entry(%0 : $*MultiPayloadOneSpareBit):
  inject_union_addr %0 : $*MultiPayloadOneSpareBit, #MultiPayloadOneSpareBit.a!unionelt
  %v = tuple ()
  return %v : $()
}

// CHECK: define { i64, i1 } @multi_payload_one_spare_bit_inject_b() {
// CHECK: entry:
// --                            0x8000_0000_0000_0001
// CHECK:   ret { i64, i1 } { i64 -9223372036854775807, i1 true }
// CHECK: }
sil @multi_payload_one_spare_bit_inject_b : $() -> MultiPayloadOneSpareBit {
entry:
  %u = union $MultiPayloadOneSpareBit, #MultiPayloadOneSpareBit.b!unionelt
  return %u : $MultiPayloadOneSpareBit
}

// CHECK: define { i64, i1 } @multi_payload_one_spare_bit_inject_c() {
// CHECK: entry:
// --                            0x8000_0000_0000_0002
// CHECK:   ret { i64, i1 } { i64 -9223372036854775806, i1 true }
// CHECK: }
sil @multi_payload_one_spare_bit_inject_c : $() -> MultiPayloadOneSpareBit {
entry:
  %u = union $MultiPayloadOneSpareBit, #MultiPayloadOneSpareBit.c!unionelt
  return %u : $MultiPayloadOneSpareBit
}


union MultiPayloadTwoSpareBits {
  case x(Builtin.Int62)
  case y(Builtin.Int60)
  case z(Builtin.Int61)
  case a
  case b
  case c
}

// CHECK: define void @multi_payload_two_spare_bits_switch(i64) {
sil @multi_payload_two_spare_bits_switch : $(MultiPayloadTwoSpareBits) -> () {
entry(%u : $MultiPayloadTwoSpareBits):
// CHECK:   [[TAG_LSHR:%.*]] = lshr i64 %0, 62
// CHECK:   [[TAG:%.*]] = trunc i64 [[TAG_LSHR]] to i2
// CHECK:   switch i2 [[TAG]], label %[[UNREACHABLE:[0-9]+]] [
// CHECK:     i2 0, label %[[X_PREDEST:[0-9]+]]
// CHECK:     i2 1, label %[[Y_PREDEST:[0-9]+]]
// CHECK:     i2 -2, label %[[Z_PREDEST:[0-9]+]]
// CHECK:     i2 -1, label %[[EMPTY_DEST:[0-9]+]]
// CHECK:   ]
// CHECK: ; <label>:[[EMPTY_DEST]]
// CHECK:   switch i64 %0, label %[[UNREACHABLE]] [
// --            0xC000_0000_0000_0000
// CHECK:     i64 -4611686018427387904, label %[[A_DEST:[0-9]+]]
// --            0xC000_0000_0000_0001
// CHECK:     i64 -4611686018427387903, label %[[B_DEST:[0-9]+]]
// --            0xC000_0000_0000_0002
// CHECK:     i64 -4611686018427387902, label %[[C_DEST:[0-9]+]]
// CHECK:   ]
// CHECK: ; <label>:[[UNREACHABLE]]
// CHECK:   unreachable
  switch_union %u : $MultiPayloadTwoSpareBits, case #MultiPayloadTwoSpareBits.x!unionelt.1: x_dest, case #MultiPayloadTwoSpareBits.y!unionelt.1: y_dest, case #MultiPayloadTwoSpareBits.z!unionelt.1: z_dest, case #MultiPayloadTwoSpareBits.a!unionelt: a_dest, case #MultiPayloadTwoSpareBits.b!unionelt: b_dest, case #MultiPayloadTwoSpareBits.c!unionelt: c_dest

// CHECK: ; <label>:[[X_PREDEST]]
// CHECK:   [[X_VALUE:%.*]] = trunc i64 %0 to i62
// CHECK:   br label %[[X_DEST:[0-9]+]]

// CHECK: ; <label>:[[Y_PREDEST]]
// --                                    0x3FFF_FFFF_FFFF_FFFF
// CHECK:   [[Y_MASKED:%.*]] = and i64 %0, 4611686018427387903
// CHECK:   [[Y_VALUE:%.*]] = trunc i64 [[Y_MASKED]] to i60
// CHECK:   br label %[[Y_DEST:[0-9]+]]

// CHECK: ; <label>:[[Z_PREDEST]]
// --                                    0x3FFF_FFFF_FFFF_FFFF
// CHECK:   [[Z_MASKED:%.*]] = and i64 %0, 4611686018427387903
// CHECK:   [[Z_VALUE:%.*]] = trunc i64 [[Z_MASKED]] to i61
// CHECK:   br label %[[Z_DEST:[0-9]+]]

// CHECK: ; <label>:[[X_DEST]]
// CHECK:   phi i62 [ [[X_VALUE]], %[[X_PREDEST]] ]
x_dest(%x : $Builtin.Int62):
  %a = function_ref @a : $[thin] () -> ()
  apply %a() : $[thin] () -> ()
  br end

// CHECK: ; <label>:[[Y_DEST]]
// CHECK:   phi i60 [ [[Y_VALUE]], %[[Y_PREDEST]] ]
y_dest(%y : $Builtin.Int60):
  %b = function_ref @b : $[thin] () -> ()
  apply %b() : $[thin] () -> ()
  br end

// CHECK: ; <label>:[[Z_DEST]]
// CHECK:   phi i61 [ [[Z_VALUE]], %[[Z_PREDEST]] ]
z_dest(%z : $Builtin.Int61):
  %c = function_ref @c : $[thin] () -> ()
  apply %c() : $[thin] () -> ()
  br end

// CHECK: ; <label>:[[A_DEST]]
a_dest:
  %d = function_ref @d : $[thin] () -> ()
  apply %d() : $[thin] () -> ()
  br end

// CHECK: ; <label>:[[B_DEST]]
b_dest:
  %e = function_ref @e : $[thin] () -> ()
  apply %e() : $[thin] () -> ()
  br end

// CHECK: ; <label>:[[C_DEST]]
c_dest:
  %f = function_ref @f : $[thin] () -> ()
  apply %f() : $[thin] () -> ()
  br end

end:
  %v = tuple ()
  return %v : $()
}

// CHECK: define i64 @multi_payload_two_spare_bits_inject_x(i62) {
// CHECK: entry:
// CHECK:   [[ZEXT:%.*]] = zext i62 %0 to i64
// CHECK:   ret i64 [[ZEXT]]
// CHECK: }
sil @multi_payload_two_spare_bits_inject_x : $(Builtin.Int62) -> MultiPayloadTwoSpareBits {
entry(%0 : $Builtin.Int62):
  %u = union $MultiPayloadTwoSpareBits, #MultiPayloadTwoSpareBits.x!unionelt.1, %0 : $Builtin.Int62
  return %u : $MultiPayloadTwoSpareBits
}

// CHECK: define void @multi_payload_two_spare_bits_inject_x_indirect(i62, %O5union24MultiPayloadTwoSpareBits*) {
// CHECK: entry:
// CHECK:   [[DATA_ADDR:%.*]] = bitcast %O5union24MultiPayloadTwoSpareBits* %1 to i62*
// CHECK:   store i62 %0, i62* [[DATA_ADDR]], align 8
// CHECK:   [[PAYLOAD_ADDR:%.*]] = getelementptr inbounds %O5union24MultiPayloadTwoSpareBits* %1, i32 0, i32 0
// CHECK:   [[PAYLOAD:%.*]] = load i64* [[PAYLOAD_ADDR]], align 8
// --                                                   0x3FFF_FFFF_FFFF_FFFF
// CHECK:   [[PAYLOAD_MASKED:%.*]] = and i64 [[PAYLOAD]], 4611686018427387903
// CHECK:   store i64 [[PAYLOAD_MASKED]], i64* [[PAYLOAD_ADDR]], align 8
// CHECK:   ret void
// CHECK: }
sil @multi_payload_two_spare_bits_inject_x_indirect : $(Builtin.Int62, [byref] MultiPayloadTwoSpareBits) -> () {
entry(%0 : $Builtin.Int62, %1 : $*MultiPayloadTwoSpareBits):
  %a = union_data_addr %1 : $*MultiPayloadTwoSpareBits, #MultiPayloadTwoSpareBits.x!unionelt.1
  store %0 to %a : $*Builtin.Int62
  inject_union_addr %1 : $*MultiPayloadTwoSpareBits, #MultiPayloadTwoSpareBits.x!unionelt.1
  %v = tuple ()
  return %v : $()
}

// CHECK: define i64 @multi_payload_two_spare_bits_inject_y(i60) {
// CHECK: entry:
// CHECK:   [[ZEXT:%.*]] = zext i60 %0 to i64
// --                     0x4000_0000_0000_0000
// CHECK:   [[TAGGED:%.*]] = or i64 [[ZEXT]], 4611686018427387904
// CHECK:   ret i64 [[TAGGED]]
// CHECK: }
sil @multi_payload_two_spare_bits_inject_y : $(Builtin.Int60) -> MultiPayloadTwoSpareBits {
entry(%0 : $Builtin.Int60):
  %u = union $MultiPayloadTwoSpareBits, #MultiPayloadTwoSpareBits.y!unionelt.1, %0 : $Builtin.Int60
  return %u : $MultiPayloadTwoSpareBits
}

// CHECK: define void @multi_payload_two_spare_bits_inject_y_indirect(i60, %O5union24MultiPayloadTwoSpareBits*) {
// CHECK: entry:
// CHECK:   [[DATA_ADDR:%.*]] = bitcast %O5union24MultiPayloadTwoSpareBits* %1 to i60*
// CHECK:   store i60 %0, i60* [[DATA_ADDR]], align 8
// CHECK:   [[PAYLOAD_ADDR:%.*]] = getelementptr inbounds %O5union24MultiPayloadTwoSpareBits* %1, i32 0, i32 0
// CHECK:   [[PAYLOAD:%.*]] = load i64* [[PAYLOAD_ADDR]], align 8
// --                                                   0x3FFF_FFFF_FFFF_FFFF
// CHECK:   [[PAYLOAD_MASKED:%.*]] = and i64 [[PAYLOAD]], 4611686018427387903
// --                                                         0x4000_0000_0000_0000
// CHECK:   [[PAYLOAD_TAGGED:%.*]] = or i64 [[PAYLOAD_MASKED]], 4611686018427387904
// CHECK:   store i64 [[PAYLOAD_TAGGED]], i64* [[PAYLOAD_ADDR]], align 8
// CHECK:   ret void
// CHECK: }
sil @multi_payload_two_spare_bits_inject_y_indirect : $(Builtin.Int60, [byref] MultiPayloadTwoSpareBits) -> () {
entry(%0 : $Builtin.Int60, %1 : $*MultiPayloadTwoSpareBits):
  %a = union_data_addr %1 : $*MultiPayloadTwoSpareBits, #MultiPayloadTwoSpareBits.y!unionelt.1
  store %0 to %a : $*Builtin.Int60
  inject_union_addr %1 : $*MultiPayloadTwoSpareBits, #MultiPayloadTwoSpareBits.y!unionelt.1
  %v = tuple ()
  return %v : $()
}

// CHECK: define i64 @multi_payload_two_spare_bits_inject_z(i61) {
// CHECK: entry:
// CHECK:   [[ZEXT:%.*]] = zext i61 %0 to i64
// --                      0x8000_0000_0000_0000
// CHECK:   [[TAGGED:%.*]] = or i64 [[ZEXT]], -9223372036854775808
// CHECK:   ret i64 [[TAGGED]]
// CHECK: }
sil @multi_payload_two_spare_bits_inject_z : $(Builtin.Int61) -> MultiPayloadTwoSpareBits {
entry(%0 : $Builtin.Int61):
  %u = union $MultiPayloadTwoSpareBits, #MultiPayloadTwoSpareBits.z!unionelt.1, %0 : $Builtin.Int61
  return %u : $MultiPayloadTwoSpareBits
}

// CHECK: define i64 @multi_payload_two_spare_bits_inject_a() {
// CHECK: entry:
// --              0xC000_0000_0000_0000
// CHECK:   ret i64 -4611686018427387904
// CHECK: }
sil @multi_payload_two_spare_bits_inject_a : $() -> MultiPayloadTwoSpareBits {
entry:
  %u = union $MultiPayloadTwoSpareBits, #MultiPayloadTwoSpareBits.a!unionelt
  return %u : $MultiPayloadTwoSpareBits
}

// CHECK: define void @multi_payload_two_spare_bits_inject_a_indirect(%O5union24MultiPayloadTwoSpareBits*) {
// CHECK: entry:
// CHECK:   [[PAYLOAD_ADDR:%.*]] = getelementptr inbounds %O5union24MultiPayloadTwoSpareBits* %0, i32 0, i32 0
// --                0xC000_0000_0000_0000
// CHECK:   store i64 -4611686018427387904, i64* [[PAYLOAD_ADDR]], align 8
// CHECK:   ret void
// CHECK: }
sil @multi_payload_two_spare_bits_inject_a_indirect : $([byref] MultiPayloadTwoSpareBits) -> () {
entry(%0 : $*MultiPayloadTwoSpareBits):
  inject_union_addr %0 : $*MultiPayloadTwoSpareBits, #MultiPayloadTwoSpareBits.a!unionelt
  %v = tuple ()
  return %v : $()
}

// CHECK: define i64 @multi_payload_two_spare_bits_inject_b() {
// CHECK: entry:
// --              0xC000_0000_0000_0001
// CHECK:   ret i64 -4611686018427387903
// CHECK: }
sil @multi_payload_two_spare_bits_inject_b : $() -> MultiPayloadTwoSpareBits {
entry:
  %u = union $MultiPayloadTwoSpareBits, #MultiPayloadTwoSpareBits.b!unionelt
  return %u : $MultiPayloadTwoSpareBits
}

// CHECK: define i64 @multi_payload_two_spare_bits_inject_c() {
// CHECK: entry:
// --              0xC000_0000_0000_0002
// CHECK:   ret i64 -4611686018427387902
// CHECK: }
sil @multi_payload_two_spare_bits_inject_c : $() -> MultiPayloadTwoSpareBits {
entry:
  %u = union $MultiPayloadTwoSpareBits, #MultiPayloadTwoSpareBits.c!unionelt
  return %u : $MultiPayloadTwoSpareBits
}

// -- test for a switch_union bug for multi-payload, no-empty-case unions
//    uncovered by Chris
union OnlyPayloads {
  case x(Builtin.Int64)
  case y(Builtin.Int32)
  case z(Builtin.Int16)
}

sil @only_payloads_switch : $(OnlyPayloads) -> () {
entry(%0 : $OnlyPayloads):
  switch_union %0 : $OnlyPayloads, case #OnlyPayloads.x!unionelt.1: x_dest, case #OnlyPayloads.y!unionelt.1: y_dest, case #OnlyPayloads.z!unionelt.1: z_dest

x_dest:
  br end
y_dest:
  br end
z_dest:
  br end

end:
  %v = tuple ()
  return %v : $()
}

// Force the storage types to all be generated.
typealias AllTestUnions = (
  Singleton,
  NoPayloads,
  NoPayloads2,
  SinglePayloadNoXI,
  SinglePayloadNoXI2,
  SinglePayloadSpareBit,
  MultiPayloadNoSpareBits,
  MultiPayloadOneSpareBit,
  MultiPayloadTwoSpareBits)

var x : AllTestUnions

sil @top_level_code : $() -> () {
entry:
  // Force the global variables to materialize.
  %x = global_addr #x : $*AllTestUnions
  initialize_var %x : $*AllTestUnions
  %z = tuple ()
  return %z : $()
}
