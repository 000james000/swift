// RUN: %swift -triple x86_64-apple-darwin10 %s -emit-llvm | FileCheck %s

import Builtin

// CHECK: @_TWVO21union_value_semantics20SinglePayloadTrivial = constant [16 x i8*] [
// CHECK:   i8* bitcast (void (i8*, %swift.type*)* @__swift_noop_void_return to i8*),
// CHECK:   i8* bitcast (i8* (i8*, i8*, %swift.type*)* @__swift_memcpy9_8 to i8*),
// CHECK:   i8* bitcast (i8* (i8*, %swift.type*)* @__swift_noop_self_return to i8*),
// CHECK:   i8* bitcast (void (i8*, %swift.type*)* @__swift_noop_void_return to i8*),
// CHECK:   i8* bitcast (void (i8*, %swift.type*)* @__swift_noop_void_return to i8*),
// CHECK:   i8* bitcast (i8* (i8*, i8*, %swift.type*)* @__swift_memcpy9_8 to i8*),
// CHECK:   i8* bitcast (i8* (i8*, i8*, %swift.type*)* @__swift_memcpy9_8 to i8*),
// CHECK:   i8* bitcast (i8* (i8*, i8*, %swift.type*)* @__swift_memcpy9_8 to i8*),
// CHECK:   i8* bitcast (i8* (i8*, i8*, %swift.type*)* @__swift_memcpy9_8 to i8*),
// CHECK:   i8* bitcast (i8* (i8*, i8*, %swift.type*)* @__swift_memcpy9_8 to i8*),
// CHECK:   i8* bitcast (i8* (i8*, i8*, %swift.type*)* @__swift_memcpy9_8 to i8*),
// CHECK:   i8* bitcast (i8* (i8*, %swift.type*)* @__swift_noop_self_return to i8*),
// CHECK:   i8* bitcast (%swift.type* (%swift.opaque*, %swift.type*)* @swift_staticTypeof to i8*),
// CHECK:   i8* inttoptr (i64 9 to i8*),
// CHECK:   i8* inttoptr (i64 7 to i8*),
// CHECK:   i8* inttoptr (i64 16 to i8*)
// CHECK: ]

// CHECK: @_TMdO21union_value_semantics20SinglePayloadTrivial = constant { i8**, i64, i8*, %swift.type* } {
// CHECK:   i8** getelementptr inbounds ([16 x i8*]* @_TWVO21union_value_semantics20SinglePayloadTrivial, i32 0, i32 0),
// CHECK:   i64 2,
// CHECK:   i8* null,
// CHECK:   %swift.type* null
// CHECK: }

// CHECK: @_TWVO21union_value_semantics23SinglePayloadNontrivial = constant [16 x i8*] [
// CHECK:   i8* bitcast (void ([24 x i8]*, %swift.type*)* @_TwXXO21union_value_semantics23SinglePayloadNontrivial to i8*),
// CHECK:   i8* bitcast (%swift.opaque* ([24 x i8]*, [24 x i8]*, %swift.type*)* @_TwCPO21union_value_semantics23SinglePayloadNontrivial to i8*),
// CHECK:   i8* bitcast (i8* (i8*, %swift.type*)* @__swift_noop_self_return to i8*),
// CHECK:   i8* bitcast (void (i8*, %swift.type*)* @__swift_noop_void_return to i8*),
// CHECK:   i8* bitcast (void (%swift.opaque*, %swift.type*)* @_TwxxO21union_value_semantics23SinglePayloadNontrivial to i8*),
// CHECK:   i8* bitcast (%swift.opaque* ([24 x i8]*, %swift.opaque*, %swift.type*)* @_TwCpO21union_value_semantics23SinglePayloadNontrivial to i8*),
// CHECK:   i8* bitcast (%swift.opaque* (%swift.opaque*, %swift.opaque*, %swift.type*)* @_TwcpO21union_value_semantics23SinglePayloadNontrivial to i8*),
// CHECK:   i8* bitcast (%swift.opaque* (%swift.opaque*, %swift.opaque*, %swift.type*)* @_TwcaO21union_value_semantics23SinglePayloadNontrivial to i8*),
// CHECK:   i8* bitcast (i8* (i8*, i8*, %swift.type*)* @__swift_memcpy9_8 to i8*),
// CHECK:   i8* bitcast (i8* (i8*, i8*, %swift.type*)* @__swift_memcpy9_8 to i8*),
// CHECK:   i8* bitcast (%swift.opaque* (%swift.opaque*, %swift.opaque*, %swift.type*)* @_TwtaO21union_value_semantics23SinglePayloadNontrivial to i8*),
// CHECK:   i8* bitcast (i8* (i8*, %swift.type*)* @__swift_noop_self_return to i8*),
// CHECK:   i8* bitcast (%swift.type* (%swift.opaque*, %swift.type*)* @swift_staticTypeof to i8*),
// CHECK:   i8* inttoptr (i64 9 to i8*),
// CHECK:   i8* inttoptr (i64 65543 to i8*),
// CHECK:   i8* inttoptr (i64 16 to i8*)
// CHECK: ]

// CHECK: @_TMdO21union_value_semantics23SinglePayloadNontrivial = constant { i8**, i64, i8*, %swift.type* } {
// CHECK:   i8** getelementptr inbounds ([16 x i8*]* @_TWVO21union_value_semantics23SinglePayloadNontrivial, i32 0, i32 0),
// CHECK:   i64 2,
// CHECK:   i8* null,
// CHECK:   %swift.type* null
// CHECK: }

// CHECK: @_TMPdO21union_value_semantics18GenericFixedLayout = global {{[{].*\* [}]}} {
// CHECK:   void (i8*, i8*)* @{{[a-z0-9_]+}},
// CHECK:   i32 40, i16 1, i16 8,
// CHECK:   [8 x i8*] zeroinitializer,
// CHECK:   i8** getelementptr inbounds ([16 x i8*]* @_TWVO21union_value_semantics18GenericFixedLayout, i32 0, i32 0),
// CHECK:   i64 2,
// CHECK:   i8* null,
// CHECK:   %swift.type* null,
// CHECK:   %swift.type* null
// CHECK: }

union SinglePayloadTrivial {
  case payload(Builtin.Int64)
  case a
  case b
  case c
}

union SinglePayloadNontrivial {
  case payload(Builtin.ObjectPointer)
  case a
  case b
  case c
}

// -- SinglePayloadNontrivial destroyBuffer
// CHECK: define linkonce_odr hidden void @_TwxxO21union_value_semantics23SinglePayloadNontrivial(%swift.opaque* [[OBJ:%.*]], %swift.type* %Self) {
// CHECK: entry:
// CHECK:   [[ADDR:%.*]] = bitcast %swift.opaque* [[OBJ]] to %O21union_value_semantics23SinglePayloadNontrivial*
// CHECK:   [[PAYLOAD_ADDR:%.*]] = getelementptr inbounds %O21union_value_semantics23SinglePayloadNontrivial* [[ADDR]], i32 0, i32 0
// CHECK:   [[PAYLOAD:%.*]] = load i64* [[PAYLOAD_ADDR]], align 8
// CHECK:   [[TAG_ADDR:%.*]] = getelementptr inbounds %O21union_value_semantics23SinglePayloadNontrivial* [[ADDR]], i32 0, i32 1
// CHECK:   [[TAG:%.*]] = load i1* [[TAG_ADDR]], align 8
// CHECK:   [[HAS_PAYLOAD:%.*]] = icmp eq i1 [[TAG]], false
// CHECK:   br i1 [[HAS_PAYLOAD]], label %[[RELEASE_PAYLOAD:[0-9]+]], label %[[DONE:[0-9]+]]
// CHECK: ; <label>:[[RELEASE_PAYLOAD]]
// CHECK:   [[DATA_ADDR:%.*]] = bitcast %O21union_value_semantics23SinglePayloadNontrivial* [[ADDR]] to %swift.refcounted**
// CHECK:   [[DATA:%.*]] = load %swift.refcounted** [[DATA_ADDR]], align 8
// CHECK:   call void @swift_release(%swift.refcounted* [[DATA]])
// CHECK:   br label %[[DONE]]
// CHECK: ; <label>:[[DONE]]
// CHECK:   ret void
// CHECK: }

union MultiPayloadTrivial {
  case payload1(Builtin.Int64)
  case payload2(Builtin.Int32, Builtin.Int32)
  case a
  case b
  case c
}

union MultiPayloadNontrivial {
  case payload1(Builtin.ObjectPointer)
  case payload2(Builtin.Int64)
  case payload3(Builtin.Int64, Builtin.ObjCPointer)
  case a
  case b
  case c
}

// -- MultiPayloadNontrivial destroyBuffer
// CHECK: define linkonce_odr hidden void @_TwxxO21union_value_semantics22MultiPayloadNontrivial(%swift.opaque* [[OBJ:%.*]], %swift.type* %Self) {
// CHECK: entry:
// CHECK:   [[ADDR:%.*]] = bitcast %swift.opaque* [[OBJ]] to %O21union_value_semantics22MultiPayloadNontrivial*
// CHECK:   [[PAYLOAD_ADDR:%.*]] = getelementptr inbounds %O21union_value_semantics22MultiPayloadNontrivial* [[ADDR]], i32 0, i32 0
// CHECK:   [[PAYLOAD:%.*]] = load i128* [[PAYLOAD_ADDR]], align 8
// CHECK:   [[TAG_ADDR:%.*]] = getelementptr inbounds %O21union_value_semantics22MultiPayloadNontrivial* [[ADDR]], i32 0, i32 1
// CHECK:   [[TAG:%.*]] = load i2* [[TAG_ADDR]], align 8
// CHECK:   switch i2 [[TAG]], label %[[END:[0-9]+]] [
// CHECK:     i2 0, label %[[PAYLOAD1_DESTROY:[0-9]+]]
// CHECK:     i2 -2, label %[[PAYLOAD3_DESTROY:[0-9]+]]
// CHECK:   ]
// CHECK: ; <label>:[[PAYLOAD1_DESTROY]]
// CHECK:   [[PAYLOAD1_TRUNC:%.*]] = trunc i128 [[PAYLOAD]] to i64
// CHECK:   [[PAYLOAD1_VAL:%.*]] = inttoptr i64 [[PAYLOAD1_TRUNC]] to %swift.refcounted*
// CHECK:   call void @swift_release(%swift.refcounted* [[PAYLOAD1_VAL]])
// CHECK:   br label %[[END]]
// CHECK: ; <label>:[[PAYLOAD3_DESTROY]]
// CHECK:   [[PAYLOAD3_1_LSHR:%.*]] = lshr i128 [[PAYLOAD]], 64
// CHECK:   [[PAYLOAD3_1_TRUNC:%.*]] = trunc i128 [[PAYLOAD3_1_LSHR]] to i64
// CHECK:   [[PAYLOAD3_1_VAL:%.*]] = inttoptr i64 [[PAYLOAD3_1_TRUNC]] to %objc_object*
// CHECK:   call void @objc_release(%objc_object* [[PAYLOAD3_1_VAL]])
// CHECK:   br label %[[END]]
// CHECK: ; <label>:[[END]]
// CHECK:   ret void
// CHECK: }

union GenericFixedLayout<T> {
  case foo(Builtin.Int64)
  case bar(Builtin.ObjectPointer)
}

sil @top_level_code : $[thin] () -> () {
entry:
  %x = tuple ()
  return %x : $()
}
