// RUN: %swift -triple x86_64-apple-darwin10 %s -emit-llvm -emit-sil-protocol-witness-tables | FileCheck %s

sil_stage canonical

// CHECK-LABEL: define i8* @thin_func_value(i8*) {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    ret i8* %0
// CHECK-NEXT:  }
sil @thin_func_value : $@thin (@thin () -> ()) -> @thin () -> () {
entry(%x : $@thin () -> ()):
  strong_retain %x : $@thin () -> ()
  strong_release %x : $@thin () -> ()
  return %x : $@thin () -> ()
}

// CHECK-LABEL: define { i8*, %swift.refcounted* } @thick_func_value(i8*, %swift.refcounted*) {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    call void @swift_retain_noresult(%swift.refcounted* %1) #0
// CHECK-NEXT:    call void @swift_release(%swift.refcounted* %1) #0
// CHECK-NEXT:    %2 = insertvalue { i8*, %swift.refcounted* } undef, i8* %0, 0
// CHECK-NEXT:    %3 = insertvalue { i8*, %swift.refcounted* } %2, %swift.refcounted* %1, 1
// CHECK-NEXT:    ret { i8*, %swift.refcounted* } %3
// CHECK-NEXT:  }
sil @thick_func_value : $@thin (@owned () -> ()) -> @owned () -> () {
entry(%x : $() -> ()):
  strong_retain %x : $() -> ()
  strong_release %x : $() -> ()
  return %x : $() -> ()
}

// CHECK-LABEL: define i8* @thin_witness_value(i8*) {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    ret i8* %0
// CHECK-NEXT:  }
sil @thin_witness_value : $@thin (@thin @cc(witness_method) () -> ()) -> @thin @cc(witness_method) () -> () {
entry(%x : $@thin @cc(witness_method) () -> ()):
  strong_retain %x : $@thin @cc(witness_method) () -> ()
  strong_release %x : $@thin @cc(witness_method) () -> ()
  return %x : $@thin @cc(witness_method) () -> ()
}

// CHECK-LABEL: define { i8*, %swift.type* } @thick_witness_value(i8*, %swift.type*) {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    %2 = insertvalue { i8*, %swift.type* } undef, i8* %0, 0
// CHECK-NEXT:    %3 = insertvalue { i8*, %swift.type* } %2, %swift.type* %1, 1
// CHECK-NEXT:    ret { i8*, %swift.type* } %3
// CHECK-NEXT:  }
sil @thick_witness_value : $@thin (@owned @cc(witness_method) () -> ()) -> @owned @cc(witness_method) () -> () {
entry(%x : $@cc(witness_method) () -> ()):
  strong_retain %x : $@cc(witness_method) () -> ()
  strong_release %x : $@cc(witness_method) () -> ()
  return %x : $@cc(witness_method) () -> ()
}

struct X {}

sil @out_void_return : $@thin (@out X) -> ()

// CHECK-LABEL: define void @use_void_return_value(%V14function_types1X* noalias sret) {
// CHECK-NEXT:  entry:
// CHECK-NEXT:    call void @out_void_return(%V14function_types1X* noalias sret %0)
// CHECK-NEXT:    ret void
// CHECK-NEXT:  }
sil @use_void_return_value : $@thin (@out X) -> () {
entry(%x : $*X):
  %f = function_ref @out_void_return : $@thin (@out X) -> ()
  %z = apply %f(%x) : $@thin (@out X) -> ()
  return %z : $()
}
