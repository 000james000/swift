// RUN: rm -rf %t/clang-module-cache
// RUN: %swift -enable-dynamic-value-type-layout -target x86_64-apple-darwin10 -module-cache-path %t/clang-module-cache -sdk %S/Inputs -I=%S/Inputs -enable-source-import %s -emit-ir | FileCheck %s

import Builtin
import swift
import gizmo

// CHECK: [[ROOTGENERIC:%C15generic_classes11RootGeneric]] = type <{ %swift.refcounted, %VSs5UInt8 }>
// CHECK: [[NONGENERICINHERITSGENERIC:%C15generic_classes25NonGenericInheritsGeneric]] = type <{ %swift.refcounted, %VSs5UInt8, [7 x i8], <{ %Si, %VSs5UInt8 }>, %VSs5UInt8, [6 x i8], %Si }>

// -- offset of RootGeneric<T>.x
// CHECK: @_TWvdvC15generic_classes11RootGeneric1xVSs5UInt8 = global i64 16, align 8
// CHECK: [[ROOTGENERIC_NAME:@.*]] = private unnamed_addr constant [32 x i8] c"C15generic_classes11RootGeneric\00"
// CHECK: [[ROOTGENERIC_FIELDS:@.*]] = private unnamed_addr constant [7 x i8] c"x\00y\00z\00\00"
// CHECK: @_TMnC15generic_classes11RootGeneric = constant { {{.*}} i64 } {
// --       0 = class
// CHECK:   i64 0,
// --       name
// CHECK:   i8* getelementptr inbounds ([32 x i8]* [[ROOTGENERIC_NAME]], i64 0, i64 0),
// --       num fields
// CHECK:   i64 3,
// --       field offset vector offset
// CHECK:   i64 12,
// --       field names
// CHECK:   i8* getelementptr inbounds ([7 x i8]* [[ROOTGENERIC_FIELDS]], i64 0, i64 0),
// --       generic parameter vector offset
// CHECK:   i64 8,
// --       generic parameter count, witness table counts
// CHECK:   i64 1, i64 0
// CHECK: }
// CHECK: @_TMPdC15generic_classes11RootGeneric = global { {{.*}} i64 } {
// --       template fill function
// CHECK:   void (i8*, i8*)* [[FILL_ROOTGENERIC:@fill_generic_metadata[0-9]*]],
// --       nominal type descriptor
// CHECK:   @_TMnC15generic_classes11RootGeneric,
// --       vtable
// CHECK:   @_TFC15generic_classes11RootGeneric3fooU__fGS0_Q__FT_T_,
// CHECK:   @_TFC15generic_classes11RootGeneric3barU__fGS0_Q__FT_T_,
// CHECK:   @_TFC15generic_classes11RootGeneric3basU__fGS0_Q__FT_T_,
// --       field offset placeholders
// CHECK:   i64 16, i64 0, i64 0
// CHECK: }

// -- Check that offset vars are emitted for fixed-layout generics
//    <rdar://problem/15081049>
// CHECK: @_TWvdvC15generic_classes22RootGenericFixedLayout1xVSs5UInt8 = global i64 16, align 8
// CHECK: @_TWvdvC15generic_classes22RootGenericFixedLayout1yGSaQ__ = global i64 24, align 8
// CHECK: @_TWvdvC15generic_classes22RootGenericFixedLayout1zVSs5UInt8 = global i64 48, align 8

// -- fixed-layout nongeneric descriptor
// CHECK: [[ROOTNONGENERIC_NAME:@.*]] = private unnamed_addr constant [35 x i8] c"C15generic_classes14RootNonGeneric\00"
// CHECK: @_TMnC15generic_classes14RootNonGeneric = constant { {{.*}} i64 } {
// --       0 = class
// CHECK:   i64 0,
// --       name
// CHECK:   i8* getelementptr inbounds ([35 x i8]* [[ROOTNONGENERIC_NAME]], i64 0, i64 0),
// --       num fields
// CHECK:   i64 3,
// --       0 = no field offset vector
// CHECK:   i64 0,
// --       field names
// CHECK:   i8* getelementptr inbounds ([7 x i8]* [[ROOTGENERIC_FIELDS]], i64 0, i64 0),
// --       0 = no generic parameter vector
// CHECK:   i64 0,
// --       number of generic params
// CHECK:   i64 0
// CHECK: }

// CHECK: @_TMdC15generic_classes14RootNonGeneric = global { {{.*}} i64 } {
// CHECK:   void (%C15generic_classes14RootNonGeneric*)* @_TFC15generic_classes14RootNonGenericD,
// CHECK:   i8** @_TWVBo,
// CHECK:   i64 ptrtoint (%objc_class* @_TMmC15generic_classes14RootNonGeneric to i64),
// CHECK:   %swift.type* @"OBJC_CLASS_$_SwiftObject",
// CHECK:   %swift.opaque* @_objc_empty_cache,
// CHECK:   %swift.opaque* @_objc_empty_vtable,
// CHECK:   @_DATA_RootNonGeneric
// CHECK:   {{.*}}* @_TMnC15generic_classes14RootNonGeneric,
// CHECK:   i64 33,
// CHECK:   i64 7
// CHECK: }

// -- NonGenericInheritsGeneric instantiates its generic base class, giving
//    fixed offsets for its own ivars
// -- offset of NonGenericInheritsGeneric.w
// CHECK: @_TWvdvC15generic_classes25NonGenericInheritsGeneric1wSi = global i64 40, align 8
// CHECK: [[NONGENERICINHERITSGENERIC_W_NAME:@.*]] = private unnamed_addr constant [2 x i8] c"w\00"
// -- ivars for NonGenericInheritsGeneric
// CHECK: @_IVARS_NonGenericInheritsGeneric = private constant { {{.*}} }] } {
// --       entsize
// CHECK:   i32 32,
// --       count
// CHECK:   i32 1,
// CHECK:   [{
// --       NonGenericInheritsGeneric.w
// --         offset ptr
// CHECK:     i64* @_TWvdvC15generic_classes25NonGenericInheritsGeneric1wSi,
// --         name
// CHECK:     i8* getelementptr inbounds ([2 x i8]* [[NONGENERICINHERITSGENERIC_W_NAME]], i64 0, i64 0),
// --         type encoding (FIXME)
// CHECK:     i8* null,
// --         align
// CHECK:     i32 8,
// --         size
// CHECK:     i32 8
// CHECK:   }]
// CHECK: }
// -- rodata for NonGenericInheritsGeneric
// CHECK: @_DATA_NonGenericInheritsGeneric = private constant { {{.*}}* } {
// --       flags (128 = compiled by ARC)
// CHECK:   i32 128,
// --       instanceStart
// CHECK:   i32 40,
// --       instanceSize
// CHECK:   i32 48,
// CHECK: }

// CHECK: @_TMdC15generic_classes25NonGenericInheritsGeneric = global { {{.*}} i64 } {
// --       RootGeneric vtable
//          @_TC15generic_classes11RootGeneric3fooU__fGS0_Q__FT_T_,
//          @_TC15generic_classes11RootGeneric3barU__fGS0_Q__FT_T_,
//          @_TC15generic_classes11RootGeneric3basU__fGS0_Q__FT_T_,
// --       RootGeneric field offsets
// CHECK:   i64 16, i64 24, i64 33,
// --       NonGenericInheritsGeneric vtable
// CHECK:   @_TFC15generic_classes25NonGenericInheritsGeneric3zimfS0_FT_T_,
// CHECK:   @_TFC15generic_classes25NonGenericInheritsGeneric4zangfS0_FT_T_,
// --       NonGenericInheritsGeneric field offsets
//          FIXME: We shouldn't emit this
// CHECK:   i64 40
// CHECK: }

// CHECK: @_TMPdC15generic_classes22GenericInheritsGeneric = global { {{.*}} i64 } {
// --       template fill function
// CHECK:   void (i8*, i8*)* [[FILL_GENERICINHERITSGENERIC:@fill_generic_metadata[0-9]*]],
// --       RootGeneric vtable
//          @_TFC15generic_classes11RootGeneric3fooU__fGS0_Q__FT_T_,
//          @_TFC15generic_classes11RootGeneric3barU__fGS0_Q__FT_T_,
//          @_TFC15generic_classes11RootGeneric3basU__fGS0_Q__FT_T_,
// --       RootGeneric field offset placeholders
// CHECK:   i64 16, i64 0, i64 0
// --       GenericInheritsGeneric vtable
// CHECK:   @_TFC15generic_classes22GenericInheritsGeneric7zippityU___fGS0_Q_Q0__FT_T_,
// CHECK:   @_TFC15generic_classes22GenericInheritsGeneric3dooU___fGS0_Q_Q0__FT_T_,
// CHECK:   @_TFC15generic_classes22GenericInheritsGeneric3dahU___fGS0_Q_Q0__FT_T_,
// --       GenericInheritsGeneric field offset placeholder
// CHECK:   i64 0
// CHECK: }

// CHECK: @_TMPdC15generic_classes25GenericInheritsNonGeneric
// CHECK: @_TMPdCSo19GenericInheritsObjC
// CHECK: @_TMPdCSo20GenericInheritsObjC2

class RootGeneric<T> {
  var x : UInt8

  // Test that declaration order doesn't cause the field offset vector to end
  // up interleaved with the vtable.
  func foo()

  var y : T

  func bar()

  var z : UInt8

  func bas()
}
sil @_TFC15generic_classes11RootGenericD : $@cc(method) @thin <T> (RootGeneric<T>) -> ()

class RootGenericFixedLayout<T> {
  var x : UInt8
  var y : T[]
  var z : UInt8
}
sil @_TFC15generic_classes22RootGenericFixedLayoutD : $@cc(method) @thin <T> (RootGenericFixedLayout<T>) -> ()

class RootNonGeneric {
  var x : UInt8
  var y : Int
  var z : UInt8
}
sil @_TFC15generic_classes14RootNonGenericD : $@cc(method) @thin (RootNonGeneric) -> ()

class NonGenericInheritsGeneric : RootGeneric<(Int, UInt8)> {
  var w : Int

  func zim()
  func zang()
}
sil @_TFC15generic_classes25NonGenericInheritsGenericD : $@cc(method) @thin (NonGenericInheritsGeneric) -> ()

class GenericInheritsGeneric<A, B> : RootGeneric<A> {
  var w : B

  func zippity()
  func doo()
  func dah()
}
sil @_TFC15generic_classes22GenericInheritsGenericD : $@cc(method) @thin <T,U> (GenericInheritsGeneric<T,U>) -> ()

class GenericInheritsNonGeneric<C> : RootNonGeneric {
  var w : UInt8
}
sil @_TFC15generic_classes25GenericInheritsNonGenericD : $@cc(method) @thin <T> (GenericInheritsNonGeneric<T>) -> ()

class GenericInheritsObjC<D> : Gizmo {
  var x : D
}
sil @_TFCSo19GenericInheritsObjCD : $@cc(method) @thin <T> (GenericInheritsObjC<T>) -> ()

class GenericInheritsObjC2<E> : Gizmo {
  var x : UInt8
  var y : E
  var z : UInt8
}
sil @_TFCSo20GenericInheritsObjC2D : $@cc(method) @thin <T> (GenericInheritsObjC2<T>) -> ()

// CHECK: define [[ROOTGENERIC]]* @RootGeneric_fragile_dependent_alloc
// CHECK:   [[METADATA_ARRAY:%.*]] = bitcast %swift.type* [[METADATA:%.*]] to i8***
// CHECK:   [[SIZE_ADDR:%.*]] = getelementptr inbounds i8*** [[METADATA_ARRAY]], i64 6
// CHECK:   [[SIZE_PTR:%.*]] = load i8*** [[SIZE_ADDR]], align 8
// CHECK:   [[SIZE:%.*]] = ptrtoint i8** [[SIZE_PTR]] to i64
// CHECK:   [[METADATA_ARRAY:%.*]] = bitcast %swift.type* [[METADATA]] to i8***
// CHECK:   [[ALIGN_ADDR:%.*]] = getelementptr inbounds i8*** [[METADATA_ARRAY]], i64 7
// CHECK:   [[ALIGN_PTR:%.*]] = load i8*** [[ALIGN_ADDR]], align 8
// CHECK:   [[ALIGN:%.*]] = ptrtoint i8** [[ALIGN_PTR]] to i64
// CHECK:   call noalias %swift.refcounted* @swift_allocObject(%swift.type* [[METADATA]], i64 [[SIZE]], i64 [[ALIGN]])
sil @RootGeneric_fragile_dependent_alloc : $<G> () -> RootGeneric<G> {
entry:
  %x = alloc_ref $RootGeneric<G>
  return %x : $RootGeneric<G>
}

// RootGeneric.x has fixed layout
// CHECK: define i8 @RootGeneric_concrete_fragile_dependent_member_access_x
// CHECK:   getelementptr inbounds [[ROOTGENERIC]]* %0, i32 0, i32 1
sil @RootGeneric_concrete_fragile_dependent_member_access_x : $<F> RootGeneric<F> -> UInt8 {
entry(%c : $RootGeneric<F>):
  %p = ref_element_addr %c : $RootGeneric<F>, #x
  %x = load %p : $*UInt8
  return %x : $UInt8
}

// RootGeneric.y has dependent layout; load the offset from the metadata
// CHECK: define void @RootGeneric_concrete_fragile_dependent_member_access_y
// CHECK:   [[TYPE_METADATA_ARRAY:%.*]] = bitcast %swift.type* {{%.*}} to i8***
// CHECK:   [[Y_OFFSET_ADDR:%.*]] = getelementptr inbounds i8*** [[TYPE_METADATA_ARRAY]], i64 13
// CHECK:   [[Y_OFFSET_PTR:%.*]] = load i8*** [[Y_OFFSET_ADDR]], align 8
// CHECK:   [[Y_OFFSET:%.*]] = ptrtoint i8** [[Y_OFFSET_PTR]] to i64
// CHECK:   [[CLASS_BYTE_ARRAY:%.*]] = bitcast [[ROOTGENERIC]]* {{%.*}} to i8*
// CHECK:   [[Y_ADDR:%.*]] = getelementptr inbounds i8* [[CLASS_BYTE_ARRAY]], i64 [[Y_OFFSET]]
// CHECK:   bitcast i8* [[Y_ADDR]] to %swift.opaque*
sil @RootGeneric_concrete_fragile_dependent_member_access_y : $<F> (@out F, RootGeneric<F>) -> () {
entry(%z : $*F, %c : $RootGeneric<F>):
  %p = ref_element_addr %c : $RootGeneric<F>, #y
  copy_addr %p to [initialization] %z : $*F
  %t = tuple ()
  return %t : $()
}

// RootGeneric.z has dependent layout; load the offset from the metadata
// CHECK: define i8 @RootGeneric_concrete_fragile_dependent_member_access_z
// CHECK:   [[TYPE_METADATA_ARRAY:%.*]] = bitcast %swift.type* {{%.*}} to i8***
// CHECK:   [[Z_OFFSET_ADDR:%.*]] = getelementptr inbounds i8*** [[TYPE_METADATA_ARRAY]], i64 14
// CHECK:   [[Z_OFFSET_PTR:%.*]] = load i8*** [[Z_OFFSET_ADDR]], align 8
// CHECK:   [[Z_OFFSET:%.*]] = ptrtoint i8** [[Z_OFFSET_PTR]] to i64
// CHECK:   [[CLASS_BYTE_ARRAY:%.*]] = bitcast [[ROOTGENERIC]]* {{%.*}} to i8*
// CHECK:   [[Z_ADDR:%.*]] = getelementptr inbounds i8* [[CLASS_BYTE_ARRAY]], i64 [[Z_OFFSET]]
// CHECK:   bitcast i8* [[Z_ADDR]] to %VSs5UInt8*
sil @RootGeneric_concrete_fragile_dependent_member_access_z : $<F> RootGeneric<F> -> UInt8 {
entry(%c : $RootGeneric<F>):
  %p = ref_element_addr %c : $RootGeneric<F>, #z
  %z = load %p : $*UInt8
  return %z : $UInt8
}

/* TODO: Instantiate types for fragile generic instances so we can do
 * fixed-layout access
sil @RootGeneric_concrete_fragile_fixed_member_access : $RootGeneric<Int32> -> (UInt8, Int32, UInt8) {
entry(%c : $RootGeneric<Int32>):
  %p = ref_element_addr %c : $RootGeneric<Int32>, #x
  %x = load %p : $*UInt8
  %q = ref_element_addr %c : $RootGeneric<Int32>, #y
  %y = load %q : $*Int32
  %r = ref_element_addr %c : $RootGeneric<Int32>, #z
  %z = load %r : $*UInt8
  %t = tuple (%x : $UInt8, %y : $Int32, %z : $UInt8)
  return %t : $(UInt8, Int32, UInt8)
}
 */

// CHECK: define [[NONGENERICINHERITSGENERIC]]* @NonGenericInheritsGeneric_fragile_fixed_alloc()
// CHECK:   call noalias %swift.refcounted* @swift_allocObject(%swift.type* {{.*}} @_TMdC15generic_classes25NonGenericInheritsGeneric {{.*}}), i64 48, i64 7)
sil @NonGenericInheritsGeneric_fragile_fixed_alloc : $() -> NonGenericInheritsGeneric {
entry:
  %x = alloc_ref $NonGenericInheritsGeneric
  return %x : $NonGenericInheritsGeneric
}

// CHECK: define i64 @NonGenericInheritsGeneric_fragile_fixed_member_access([[NONGENERICINHERITSGENERIC]]*) {
// CHECK:   %1 = getelementptr inbounds [[NONGENERICINHERITSGENERIC]]* %0, i32 0, i32 6
// CHECK:   %.value = getelementptr inbounds %Si* %1, i32 0, i32 0
// CHECK:   %2 = load i64* %.value, align 8
// CHECK:   ret i64 %2
// CHECK: }
sil @NonGenericInheritsGeneric_fragile_fixed_member_access : $NonGenericInheritsGeneric -> Int {
entry(%c : $NonGenericInheritsGeneric):
  %p = ref_element_addr %c : $NonGenericInheritsGeneric, #w
  %w = load %p : $*Int
  return %w : $Int
}
// CHECK: define internal void [[FILL_ROOTGENERIC]](i8*, i8*) {
// -- initialize the dependent field offsets
// CHECK:   call void @swift_initClassMetadata_UniversalStrategy(%swift.type* {{%.*}}, %swift.type* null, i64 3, %swift.type** {{%.*}}, i64* {{%.*}})
// CHECK: }

// CHECK: define internal void [[FILL_GENERICINHERITSGENERIC]](i8*, i8*) {
// -- initialize our generic parameters
// CHECK:   [[A_ADDR:%.*]] = getelementptr inbounds i64* [[SELF_TEMPLATE:%.*]], i32 17
// CHECK:   [[A_ARG_ADDR:%.*]] = getelementptr inbounds i64* [[GENERIC_ARGS:%.*]], i32 0
// CHECK:   [[A:%.*]] = load i64* [[A_ARG_ADDR]], align 8
// CHECK:   store i64 [[A]], i64* [[A_ADDR]], align 8
// CHECK:   [[B_ADDR:%.*]] = getelementptr inbounds i64* [[SELF_TEMPLATE]], i32 18
// CHECK:   [[B_ARG_ADDR:%.*]] = getelementptr inbounds i64* [[GENERIC_ARGS]], i32 1
// CHECK:   [[B:%.*]] = load i64* [[B_ARG_ADDR]], align 8
// CHECK:   store i64 [[B]], i64* [[B_ADDR]], align 8
// -- copy super generic args from super metadata
// CHECK:   [[SUPER_T_ADDR:%.*]] = getelementptr inbounds i64* [[SUPER:%.*]], i32 8
// CHECK:   [[SELF_T_ADDR:%.*]] = getelementptr inbounds i64* [[SELF:%.*]], i32 8
// CHECK:   [[T:%.*]] = load i64* [[SUPER_T_ADDR]], align 8
// CHECK:   store i64 [[T]], i64* [[SELF_T_ADDR]], align 8
// -- copy super field offsets from super metadata
// CHECK:   [[SUPER_BASE_VEC:%.*]] = getelementptr inbounds i64* [[SUPER]], i32 12
// CHECK:   [[SELF_BASE_VEC:%.*]] = getelementptr inbounds i64* [[SELF]], i32 12
// CHECK:   [[SELF_BASE_VEC_I8:%.*]] = bitcast i64* [[SELF_BASE_VEC]] to i8*
// CHECK:   [[SUPER_BASE_VEC_I8:%.*]] = bitcast i64* [[SUPER_BASE_VEC]] to i8*
// CHECK:   call void @llvm.memcpy.p0i8.p0i8.i64(i8* [[SELF_BASE_VEC_I8]], i8* [[SUPER_BASE_VEC_I8]], i64 24, i32 8, i1 false)
// -- initialize our own dependent field offsets
// CHECK:   call void @swift_initClassMetadata_UniversalStrategy(%swift.type* {{%.*}}, %swift.type* {{%.*}}, i64 1, %swift.type** {{%.*}}, i64* {{%.*}})
// -- hack to initialize the ObjC class
// CHECK:   call void @swift_forceInitializeObjCClass
// CHECK: }
