// RUN: %target-swift-frontend(mock-sdk: %clang-importer-sdk) %s -enable-resilience -emit-ir | %FileCheck %s --check-prefix=CHECK
// REQUIRES: objc_interop

sil_stage canonical

import Swift
import Foundation

public enum EnumWithClassArchetypeAndDynamicSize<T : AnyObject> {
  case A(T)
  case B(URL)
}

// CHECK-LABEL: define swiftcc void @copyDynamicMultiEnum(%swift.type* %"EnumWithClassArchetypeAndDynamicSize<T>", %swift.type* %U, %T20archetype_resilience36EnumWithClassArchetypeAndDynamicSizeO* noalias nocapture swiftself)
// CHECK: call %T20archetype_resilience36EnumWithClassArchetypeAndDynamicSizeO* @_T020archetype_resilienceytWc2_(%T20archetype_resilience36EnumWithClassArchetypeAndDynamicSizeO* %0, %T20archetype_resilience36EnumWithClassArchetypeAndDynamicSizeO* {{.*}}, %swift.type* %T, %swift.type* %"EnumWithClassArchetypeAndDynamicSize<T>")
// CHECK: ret void
sil @copyDynamicMultiEnum : $@convention(method) <T, U where T: AnyObject> (@in_guaranteed EnumWithClassArchetypeAndDynamicSize<T>) -> () {
bb0(%0 : $*EnumWithClassArchetypeAndDynamicSize<T>):
  %1 = alloc_stack $EnumWithClassArchetypeAndDynamicSize<T> 
  copy_addr %0 to [initialization] %1 : $*EnumWithClassArchetypeAndDynamicSize<T>
  dealloc_stack %1 : $*EnumWithClassArchetypeAndDynamicSize<T>
  %ret = tuple ()
  return %ret : $()
}
