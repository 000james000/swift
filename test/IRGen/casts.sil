// RUN: %swift -target x86_64-apple-macosx10.9 %s -emit-ir | FileCheck %s

sil_stage canonical

import Builtin
import Swift

class A {}
class B: A {}

// CHECK-LABEL: define %C5casts1B* @unchecked_addr_cast(%C5casts1A** noalias) {
// CHECK:         bitcast %C5casts1A** %0 to %C5casts1B**
sil @unchecked_addr_cast : $(@in A) -> B {
entry(%a : $*A):
  %b = unchecked_addr_cast %a : $*A to $*B
  %x = load %b : $*B
  return %x : $B
}

protocol CP: class {}
protocol CP2: class {}
@objc protocol OP: class {}

// CHECK-LABEL: define i8* @ref_to_raw_pointer_existential(%objc_object*, i8**) {
// CHECK:         [[CAST:%.*]] = bitcast %objc_object* %0 to i8*
// CHECK:         ret i8* [[CAST]]
sil @ref_to_raw_pointer_existential : $@thin (@owned CP) -> Builtin.RawPointer {
entry(%p : $CP):
  %r = ref_to_raw_pointer %p : $CP to $Builtin.RawPointer
  return %r : $Builtin.RawPointer
}

// CHECK-LABEL: define %objc_object* @raw_pointer_to_ref_existential(i8*) {
// CHECK:         [[CAST:%.*]] = bitcast i8* %0 to %objc_object*
// CHECK:         ret %objc_object* [[CAST]]
sil @raw_pointer_to_ref_existential : $@thin (@owned Builtin.RawPointer) -> AnyObject {
entry(%p : $Builtin.RawPointer):
  %r = raw_pointer_to_ref %p : $Builtin.RawPointer to $AnyObject
  return %r : $AnyObject
}

sil @unchecked_ref_cast_to_existential : $@thin (@owned Builtin.NativeObject) -> @owned AnyObject {
entry(%n : $Builtin.NativeObject):
  %r = unchecked_ref_cast %n : $Builtin.NativeObject to $AnyObject
  return %r : $AnyObject
}

// CHECK-LABEL: define { %objc_object*, i8** } @u_cast_to_class_existential(%objc_object*)
// CHECK:         call i8** @dynamic_cast_existential_1_unconditional(%swift.type* {{%.*}}, %swift.protocol* @_TMp5casts2CP)
// CHECK-LABEL: define private i8** @dynamic_cast_existential_1_unconditional(%swift.type*, %swift.protocol*) {
// CHECK:         [[WITNESS:%.*]] = call i8** @swift_conformsToProtocol(%swift.type* %0, %swift.protocol* %1)
// CHECK:         [[IS_NULL:%.*]] = icmp eq i8** [[WITNESS]], null
// CHECK:         br i1 [[IS_NULL]], label %fail, label %cont
// CHECK:       cont:
// CHECK:         ret i8** [[WITNESS]]
// CHECK:       fail:
// CHECK:         call void @llvm.trap()
sil @u_cast_to_class_existential : $@thin (@owned AnyObject) -> @owned CP {
entry(%a : $AnyObject):
  %p = unconditional_checked_cast %a : $AnyObject to $CP
  return %p : $CP
}

// CHECK-LABEL: define { %swift.type*, i8** } @u_cast_to_existential_metatype(%swift.type*)
// CHECK:         call i8** @dynamic_cast_existential_1_unconditional(%swift.type* %0, %swift.protocol* @_TMp5casts2CP)
sil @u_cast_to_existential_metatype : $@thin (@owned @thick Any.Type) -> @owned @thick CP.Type {
entry(%a : $@thick Any.Type):
  %p = unconditional_checked_cast %a : $@thick Any.Type to $@thick CP.Type
  return %p : $@thick CP.Type
}

// CHECK-LABEL: define { %objc_object*, i8**, i8** } @u_cast_to_class_existential_2(%objc_object*)
// CHECK:         call { i8**, i8** } @dynamic_cast_existential_2_unconditional(%swift.type* {{%.*}}, %swift.protocol* @_TMp5casts2CP, %swift.protocol* @_TMp5casts3CP2)
// CHECK-LABEL: define private { i8**, i8** } @dynamic_cast_existential_2_unconditional(%swift.type*, %swift.protocol*, %swift.protocol*)
// CHECK:         [[WITNESS:%.*]] = call i8** @swift_conformsToProtocol(%swift.type* %0, %swift.protocol* %1)
// CHECK:         [[IS_NULL:%.*]] = icmp eq i8** [[WITNESS]], null
// CHECK:         br i1 [[IS_NULL]], label %fail, label %cont
// CHECK:       cont:
// CHECK:         [[WITNESS:%.*]] = call i8** @swift_conformsToProtocol(%swift.type* %0, %swift.protocol* %2)
// CHECK:         [[IS_NULL:%.*]] = icmp eq i8** [[WITNESS]], null
// CHECK:         br i1 [[IS_NULL]], label %fail, label %cont1
// CHECK:       cont1:
// CHECK:         ret { i8**, i8** }
// CHECK:       fail:
// CHECK:         call void @llvm.trap()
sil @u_cast_to_class_existential_2 : $@thin (@owned AnyObject) -> @owned protocol<CP, CP2> {
entry(%a : $AnyObject):
  %p = unconditional_checked_cast %a : $AnyObject to $protocol<CP, CP2>
  return %p : $protocol<CP, CP2>
}

// CHECK-LABEL: define { %objc_object*, i8**, i8** } @u_cast_to_class_existential_mixed(%objc_object*)
// CHECK:         call %objc_object* @swift_dynamicCastObjCProtocolUnconditional
// CHECK:         call { i8**, i8** } @dynamic_cast_existential_2_unconditional(%swift.type* {{%.*}}, %swift.protocol* @_TMp5casts2CP, %swift.protocol* @_TMp5casts3CP2)
sil @u_cast_to_class_existential_mixed : $@thin (@owned AnyObject) -> @owned protocol<CP, OP, CP2> {
entry(%a : $AnyObject):
  %p = unconditional_checked_cast %a : $AnyObject to $protocol<CP, OP, CP2>
  return %p : $protocol<CP, OP, CP2>
}

// CHECK-LABEL: define { %swift.type*, i8**, i8** } @u_cast_to_existential_metatype_mixed(%swift.type*)
// CHECK:         [[CAST:%.*]] = call %swift.type* @swift_dynamicCastTypeToObjCProtocolUnconditional(%swift.type* %0, i64 1, i8** {{%.*}})
// CHECK:         call { i8**, i8** } @dynamic_cast_existential_2_unconditional(%swift.type* %0, %swift.protocol* @_TMp5casts2CP, %swift.protocol* @_TMp5casts3CP2)
// CHECK:         insertvalue {{.*}} [[CAST]]
sil @u_cast_to_existential_metatype_mixed : $@thin (@owned @thick Any.Type) -> @owned @thick protocol<CP, OP, CP2>.Type {
entry(%a : $@thick Any.Type):
  %p = unconditional_checked_cast %a : $@thick Any.Type to $@thick protocol<CP, OP, CP2>.Type
  return %p : $@thick protocol<CP, OP, CP2>.Type
}


// CHECK-LABEL: define { %objc_object*, i8** } @c_cast_to_class_existential(%objc_object*)
// CHECK:         call i8** @dynamic_cast_existential_1_conditional(%swift.type* %.Type, %swift.protocol* @_TMp5casts2CP)
// CHECK-LABEL: define private i8** @dynamic_cast_existential_1_conditional(%swift.type*, %swift.protocol*)
// CHECK:         [[WITNESS:%.*]] = call i8** @swift_conformsToProtocol(%swift.type* %0, %swift.protocol* %1)
// CHECK:         [[IS_NULL:%.*]] = icmp eq i8** [[WITNESS]], null
// CHECK:         br i1 [[IS_NULL]], label %fail, label %cont
// CHECK:       cont:
// CHECK:         ret i8** [[WITNESS]]
// CHECK:       fail:
// CHECK:         ret i8** null
sil @c_cast_to_class_existential : $@thin (@owned AnyObject) -> @owned CP {
entry(%a : $AnyObject):
  checked_cast_br %a : $AnyObject to $CP, yea, nay
yea(%p : $CP):
  return %p : $CP
nay:
  unreachable
}

// CHECK-LABEL: define { %swift.type*, i8** } @c_cast_to_existential_metatype(%swift.type*) {
// CHECK:         call i8** @dynamic_cast_existential_1_conditional(%swift.type* %0, %swift.protocol* @_TMp5casts2CP)
sil @c_cast_to_existential_metatype : $@thin (@owned @thick Any.Type) -> @owned @thick CP.Type {
entry(%a : $@thick Any.Type):
  checked_cast_br %a : $@thick Any.Type to $@thick CP.Type, yea, nay
yea(%p : $@thick CP.Type):
  return %p : $@thick CP.Type
nay:
  unreachable
}

// CHECK-LABEL: define { %objc_object*, i8**, i8** } @c_cast_to_class_existential_2(%objc_object*)
// CHECK:         call { i8**, i8** } @dynamic_cast_existential_2_conditional(%swift.type* {{%.*}}, %swift.protocol* @_TMp5casts2CP, %swift.protocol* @_TMp5casts3CP2)
// CHECK-LABEL: define private { i8**, i8** } @dynamic_cast_existential_2_conditional(%swift.type*, %swift.protocol*, %swift.protocol*)
// CHECK:         [[WITNESS:%.*]] = call i8** @swift_conformsToProtocol(%swift.type* %0, %swift.protocol* %1)
// CHECK:         [[IS_NULL:%.*]] = icmp eq i8** [[WITNESS]], null
// CHECK:         br i1 [[IS_NULL]], label %fail, label %cont
// CHECK:       cont:
// CHECK:         [[WITNESS:%.*]] = call i8** @swift_conformsToProtocol(%swift.type* %0, %swift.protocol* %2)
// CHECK:         [[IS_NULL:%.*]] = icmp eq i8** [[WITNESS]], null
// CHECK:         br i1 [[IS_NULL]], label %fail, label %cont1
// CHECK:       cont1:
// CHECK:         ret { i8**, i8** }
// CHECK:       fail:
// CHECK:         ret { i8**, i8** } zeroinitializer
sil @c_cast_to_class_existential_2 : $@thin (@owned AnyObject) -> @owned protocol<CP, CP2> {
entry(%a : $AnyObject):
  checked_cast_br %a : $AnyObject to $protocol<CP, CP2>, yea, nay
yea(%p : $protocol<CP, CP2>):
  return %p : $protocol<CP, CP2>
nay:
  unreachable
}

// CHECK-LABEL: define { %objc_object*, i8**, i8** } @c_cast_to_class_existential_mixed(%objc_object*)
// CHECK:         [[CAST:%.*]] = call %objc_object* @swift_dynamicCastObjCProtocolConditional
// CHECK:         [[IS_NULL:%.*]] = icmp eq %objc_object* [[CAST]], null
// CHECK:         br i1 [[IS_NULL]], label %cont, label %success
// CHECK:       success:
// CHECK:         call { i8**, i8** } @dynamic_cast_existential_2_conditional(%swift.type* {{%.*}}, %swift.protocol* @_TMp5casts2CP, %swift.protocol* @_TMp5casts3CP2)
// CHECK:         br label %cont
// CHECK:       cont:
// CHECK:         phi %objc_object* [ [[CAST:%.*]], %success ], [ null, %entry ]
sil @c_cast_to_class_existential_mixed : $@thin (@owned AnyObject) -> @owned protocol<CP, OP, CP2> {
entry(%a : $AnyObject):
  checked_cast_br %a : $AnyObject to $protocol<CP, OP, CP2>, yea, nay
yea(%p : $protocol<CP, OP, CP2>):
  return %p : $protocol<CP, OP, CP2>
nay:
  unreachable
}

// CHECK-LABEL: define { %swift.type*, i8**, i8** } @c_cast_to_existential_metatype_mixed(%swift.type*)
// CHECK:         [[OBJC_CAST:%.*]] = call %swift.type* @swift_dynamicCastTypeToObjCProtocolConditional(%swift.type* %0, i64 1, i8** {{%.*}})
// CHECK:         [[IS_NULL:%.*]] = icmp eq %swift.type* [[OBJC_CAST]], null
// CHECK:         br i1 [[IS_NULL]], label %cont, label %success
// CHECK:       success:
// CHECK:         call { i8**, i8** } @dynamic_cast_existential_2_conditional(%swift.type* %0, %swift.protocol* @_TMp5casts2CP, %swift.protocol* @_TMp5casts3CP2)
sil @c_cast_to_existential_metatype_mixed : $@thin (@owned @thick Any.Type) -> @owned @thick protocol<CP, OP, CP2>.Type {
entry(%a : $@thick Any.Type):
  checked_cast_br %a : $@thick Any.Type to $@thick protocol<CP, OP, CP2>.Type, yea, nay
yea(%p : $@thick protocol<CP, OP, CP2>.Type):
  return %p : $@thick protocol<CP, OP, CP2>.Type
nay:
  unreachable
}

// CHECK-LABEL: define %objc_object* @checked_upcast(%C5casts1A*) {
// CHECK:         phi %objc_object*
sil @checked_upcast : $@thin (@owned A) -> @owned AnyObject {
entry(%a : $A):
  checked_cast_br %a : $A to $AnyObject, yea, nay
yea(%o : $AnyObject):
  return %o : $AnyObject
nay:
  unreachable
}
