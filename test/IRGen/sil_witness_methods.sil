// RUN: %swift -triple x86_64-apple-darwin10 %s -emit-llvm | FileCheck %s

sil_stage canonical

struct Foo {}
class Bar<T, U, V> {}
sil @_TFC19sil_witness_methods3BarD : $@cc(method) @thin <T,U,V> (Bar<T,U,V>) -> ()

struct X {}
struct Y {}
struct Z {}

protocol P {
  func concrete_method()
  type func concrete_static_method()
  func generic_method<Z>(x: Z)
}

// CHECK-LABEL: define %swift.type* @concrete_type_concrete_method_witness(%V19sil_witness_methods3Foo* noalias, %swift.type* %Self)
sil @concrete_type_concrete_method_witness : $@thin @cc(witness_method) (@in Foo) -> @thick Foo.metatype {
entry(%x : $*Foo):
  %m = metatype $@thick Foo.metatype
  return %m : $@thick Foo.metatype
}

// CHECK-LABEL: define %swift.type* @generic_type_concrete_method_witness(%C19sil_witness_methods3Bar** noalias, %swift.type* %Self)
// CHECK:         [[T0:%.*]] = bitcast %swift.type* %Self to %swift.type**
// CHECK:         [[T1:%.*]] = getelementptr inbounds %swift.type** [[T0]], i64 8
// CHECK:         %T = load %swift.type** [[T1]], align 8
// CHECK:         [[U0:%.*]] = bitcast %swift.type* %Self to %swift.type**
// CHECK:         [[U1:%.*]] = getelementptr inbounds %swift.type** [[U0]], i64 9
// CHECK:         %U = load %swift.type** [[U1]], align 8
// CHECK:         [[V0:%.*]] = bitcast %swift.type* %Self to %swift.type**
// CHECK:         [[V1:%.*]] = getelementptr inbounds %swift.type** [[V0]], i64 10
// CHECK:         %V = load %swift.type** [[V1]], align 8
sil @generic_type_concrete_method_witness : $@thin @cc(witness_method) <T, U, V> (@in Bar<T, U, V>) -> @thick Bar<T, U, V>.metatype {
entry(%x : $*Bar<T, U, V>):
  %t = metatype $@thick T.metatype
  %u = metatype $@thick U.metatype
  %v = metatype $@thick V.metatype
  %m = metatype $@thick Bar<T, U, V>.metatype

  return %m : $@thick Bar<T, U, V>.metatype
}

// TODO: %Self metatype arg is redundant for static method witness

// CHECK-LABEL: define %swift.type* @concrete_type_concrete_static_method_witness(%swift.type*, %swift.type* %Self)
sil @concrete_type_concrete_static_method_witness : $@thin @cc(witness_method) (@thick Foo.metatype) -> @thick Foo.metatype {
entry(%x : $@thick Foo.metatype):
  %m = metatype $@thick Foo.metatype
  return %m : $@thick Foo.metatype
}

// CHECK-LABEL: define %swift.type* @generic_type_concrete_static_method_witness(%swift.type*, %swift.type* %Self)
// CHECK:         [[T0:%.*]] = bitcast %swift.type* %Self to %swift.type**
// CHECK:         [[T1:%.*]] = getelementptr inbounds %swift.type** [[T0]], i64 8
// CHECK:         %T = load %swift.type** [[T1]], align 8
// CHECK:         [[U0:%.*]] = bitcast %swift.type* %Self to %swift.type**
// CHECK:         [[U1:%.*]] = getelementptr inbounds %swift.type** [[U0]], i64 9
// CHECK:         %U = load %swift.type** [[U1]], align 8
// CHECK:         [[V0:%.*]] = bitcast %swift.type* %Self to %swift.type**
// CHECK:         [[V1:%.*]] = getelementptr inbounds %swift.type** [[V0]], i64 10
// CHECK:         %V = load %swift.type** [[V1]], align 8
sil @generic_type_concrete_static_method_witness : $@thin @cc(witness_method) <T, U, V> (@thick Bar<T, U, V>.metatype) -> @thick Bar<T, U, V>.metatype {
entry(%x : $@thick Bar<T, U, V>.metatype):
  %t = metatype $@thick T.metatype
  %u = metatype $@thick U.metatype
  %v = metatype $@thick V.metatype
  %m = metatype $@thick Bar<T, U, V>.metatype

  return %m : $@thick Bar<T, U, V>.metatype
}

// TODO: %Self metatype arg is redundant for class method witness

// CHECK-LABEL: define %swift.type* @concrete_type_generic_method_witness(%swift.opaque* noalias, %V19sil_witness_methods3Foo* noalias, %swift.type* %Z, %swift.type* %Self)
sil @concrete_type_generic_method_witness : $@thin @cc(witness_method) <Z> (@in Z, @in Foo) -> @thick Foo.metatype {
entry(%z : $*Z, %x : $*Foo):
  %m = metatype $@thick Foo.metatype
  return %m : $@thick Foo.metatype
}

// CHECK-LABEL: define %swift.type* @generic_type_generic_method_witness(%swift.opaque* noalias, %C19sil_witness_methods3Bar** noalias, %swift.type* %Z, %swift.type* %Self)
sil @generic_type_generic_method_witness : $@thin @cc(witness_method) <T, U, V, Z> (@in Z, @in Bar<T, U, V>) -> @thick Bar<T, U, V>.metatype {
entry(%z : $*Z, %x : $*Bar<T, U, V>):
  %t = metatype $@thick T.metatype
  %u = metatype $@thick U.metatype
  %v = metatype $@thick V.metatype
  %m = metatype $@thick Bar<T, U, V>.metatype

  return %m : $@thick Bar<T, U, V>.metatype
}

// CHECK-LABEL: define %swift.type* @concrete_type_generic_static_method_witness(%swift.opaque* noalias, %swift.type*, %swift.type* %Z, %swift.type* %Self)
sil @concrete_type_generic_static_method_witness : $@thin @cc(witness_method) <Z> (@in Z, @thick Foo.metatype) -> @thick Foo.metatype {
entry(%z : $*Z, %x : $@thick Foo.metatype):
  %m = metatype $@thick Foo.metatype
  return %m : $@thick Foo.metatype
}

// CHECK-LABEL: define %swift.type* @generic_type_generic_static_method_witness(%swift.opaque* noalias, %swift.type*, %swift.type* %Z, %swift.type* %Self)
sil @generic_type_generic_static_method_witness : $@thin @cc(witness_method) <T, U, V, Z> (@in Z, @thick Bar<T, U, V>.metatype) -> @thick Bar<T, U, V>.metatype {
entry(%z : $*Z, %x : $@thick Bar<T, U, V>.metatype):
  %t = metatype $@thick T.metatype
  %u = metatype $@thick U.metatype
  %v = metatype $@thick V.metatype
  %m = metatype $@thick Bar<T, U, V>.metatype

  return %m : $@thick Bar<T, U, V>.metatype
}

// CHECK-LABEL: define void @call_concrete_witness() {
// CHECK:         call %swift.type* @concrete_type_concrete_method_witness(%V19sil_witness_methods3Foo* {{.*}}, %swift.type* getelementptr inbounds ({{.*}} @_TMdV19sil_witness_methods3Foo {{.*}}))
sil @call_concrete_witness : $(Foo) -> () {
entry(%x : $Foo):
  %m = alloc_stack $Foo
  store %x to %m#1 : $*Foo
  %w = function_ref @concrete_type_concrete_method_witness : $@thin @cc(witness_method) (@in Foo) -> @thick Foo.metatype
  %z = apply %w(%m#1) : $@thin @cc(witness_method) (@in Foo) -> @thick Foo.metatype
  dealloc_stack %m#0 : $*@local_storage Foo
  return undef : $()
}

// CHECK-LABEL: define void @call_concrete_static_witness() {
// CHECK:         call %swift.type* @concrete_type_concrete_static_method_witness(%swift.type* getelementptr inbounds ({{.*}} @_TMdV19sil_witness_methods3Foo {{.*}}), %swift.type* getelementptr inbounds ({{.*}} @_TMdV19sil_witness_methods3Foo {{.*}}))
sil @call_concrete_static_witness : $() -> () {
entry:
  %m = metatype $@thick Foo.metatype
  %w = function_ref @concrete_type_concrete_static_method_witness : $@thin @cc(witness_method) (@thick Foo.metatype) -> @thick Foo.metatype
  %z = apply %w(%m) : $@thin @cc(witness_method) (@thick Foo.metatype) -> @thick Foo.metatype
  return undef : $()
}
