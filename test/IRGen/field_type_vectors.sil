// RUN: %swift -target x86_64-apple-darwin10 %s -emit-ir | FileCheck %s

import Swift

// CHECK:       [[FOO_TYPE_VECTOR_SLOT:@.*]] = internal global %swift.type** null
// CHECK-LABEL: @_TMnV18field_type_vectors3Foo = constant 
// CHECK:         %swift.type** (%swift.type*)* [[FOO_TYPES_ACCESSOR:@[^,]*]],
struct Foo {
  var x: Int
}

// CHECK-LABEL: @_TMnV18field_type_vectors3Bar = constant
// CHECK:         %swift.type** (%swift.type*)* [[BAR_TYPES_ACCESSOR:@[^,]*]],
// CHECK-LABEL: @_TMPdV18field_type_vectors3Bar = global
// -- There should be 5 words between the address point and the field type
//    vector slot, with type %swift.type**
// CHECK:         i64, { {{[^}]*}} }*, %swift.type*, i64, %swift.type*, %swift.type**
struct Bar<T> {
  var y: Int
}

// CHECK-LABEL: @_TMnV18field_type_vectors3Bas = constant
// CHECK:         %swift.type** (%swift.type*)* [[BAS_TYPES_ACCESSOR:@[^,]*]],
// CHECK-LABEL: @_TMPdV18field_type_vectors3Bas = global
// -- There should be 7 words between the address point and the field type
//    vector slot, with type %swift.type**
// CHECK:         i64, { {{[^}]*}} }*, %swift.type*, i64, i64, %swift.type*, %swift.type*, %swift.type**
struct Bas<T, U> {
  var foo: Foo
  var bar: Bar<T>
}

// CHECK-LABEL: @_TMnC18field_type_vectors3Zim = constant
// CHECK:         %swift.type** (%swift.type*)* [[ZIM_TYPES_ACCESSOR:@[^,]*]],
// CHECK-LABEL: @_TMPdC18field_type_vectors3Zim = global
// -- There should be 14 words between the address point and the field type
//    vector slot, with type %swift.type**
// CHECK:         i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, { {{[^}]*}} }*, i64, i64, %swift.type*, %swift.type*, %C18field_type_vectors3Zim* (%C18field_type_vectors3Zim*)*, i64, i64, i64, %swift.type**
class Zim<T, U> {
  var foo: Foo? = nil
  var bar: Bar<T>? = nil
  var bas: Bas<T, U>? = nil
}

// CHECK-LABEL: @_TMnC18field_type_vectors4Zang = constant
// CHECK:         %swift.type** (%swift.type*)* [[ZANG_TYPES_ACCESSOR:@[^,]*]],
// CHECK-LABEL: @_TMPdC18field_type_vectors4Zang = global
// -- There should be 17 words between the address point and the field type
//    vector slot, with type %swift.type**
// CHECK:         i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, { {{[^}]*}} }*, i64, i64, %swift.type*, %swift.type*, %C18field_type_vectors4Zang* (%C18field_type_vectors4Zang*)*, i64, i64, i64, %swift.type*, %C18field_type_vectors4Zang* (%C18field_type_vectors4Zang*)*, i64, %swift.type**
class Zang<V>: Zim<V, V> {
  var zung: Int = 0
}

// -- For storage-qualified fields, we just report the formal type.
class StorageQualified {
  @unowned var a: StorageQualified
  @weak var b: StorageQualified?

  init(x: StorageQualified) {
    a = x
    b = x
  }
}

// CHECK: define internal %swift.type** [[FOO_TYPES_ACCESSOR]](%swift.type*)
// CHECK:   [[EXISTING:%.*]] = load %swift.type*** [[FOO_TYPE_VECTOR_SLOT]]
// CHECK:   [[IS_NULL:%.*]] = icmp eq %swift.type** [[EXISTING]], null
// CHECK:   br i1 [[IS_NULL]], label %[[BUILD_FIELD_TYPES:.*]], label %[[DONE:.*]]
// CHECK: [[BUILD_FIELD_TYPES]]:
// CHECK:   store {{.*}} @_TMdSi
// CHECK:   cmpxchg {{.*}} [[FOO_TYPE_VECTOR_SLOT]]

// CHECK: define internal %swift.type** [[BAR_TYPES_ACCESSOR]](%swift.type*)
// CHECK:   [[T0:%.*]] = bitcast %swift.type* %0 to %swift.type***
// -- 5 words between the address point and the slot
// CHECK:   [[SLOT:%.*]] = getelementptr inbounds %swift.type*** [[T0]], i32 5
// CHECK:   load %swift.type*** [[SLOT]], align 8
// CHECK:   br
// CHECK:   store {{.*}} @_TMdSi


// CHECK: define internal %swift.type** [[BAS_TYPES_ACCESSOR]](%swift.type*)
// CHECK:   [[T0:%.*]] = bitcast %swift.type* %0 to %swift.type***
// -- 7 words between the address point and the slot
// CHECK:   [[SLOT:%.*]] = getelementptr inbounds %swift.type*** [[T0]], i32 7
// CHECK:   load %swift.type*** [[SLOT]], align 8
// CHECK:   br
// CHECK:   store {{.*}} @_TMdV18field_type_vectors3Foo
// CHECK:   [[T:%.*]] = bitcast %swift.type* %T to i8*
// CHECK:   call %swift.type* @swift_getGenericMetadata1({{.*}} @_TMPdV18field_type_vectors3Bar {{.*}}, i8* [[T]])

// CHECK: define internal %swift.type** [[ZIM_TYPES_ACCESSOR]](%swift.type*)
// CHECK:   [[T0:%.*]] = bitcast %swift.type* %0 to %swift.type***
// -- 14 words between the address point and the slot
// CHECK:   [[SLOT:%.*]] = getelementptr inbounds %swift.type*** [[T0]], i32 14
// CHECK:   load %swift.type*** [[SLOT]], align 8

// CHECK: define internal %swift.type** [[ZANG_TYPES_ACCESSOR]](%swift.type*)
// CHECK:   [[T0:%.*]] = bitcast %swift.type* %0 to %swift.type***
// -- 17 words between the address point and the slot
// CHECK:   [[SLOT:%.*]] = getelementptr inbounds %swift.type*** [[T0]], i32 17
// CHECK:   load %swift.type*** [[SLOT]], align 8

