// RUN: %swift -triple x86_64-apple-darwin10 %s -emit-llvm -enable-dynamic-value-type-layout | FileCheck %s

import Builtin

// CHECK-NOT: @_TWVV15generic_structs13SingleDynamic

// CHECK: @_TMPdV15generic_structs13SingleDynamic = global {{[{].*\* [}]}} {
// -- template header
// CHECK:   void (i8*, i8*)* [[SINGLE_DYNAMIC_FILL_METADATA:@fill_generic_metadata[0-9]*]],
// CHECK:   i32 168, i16 1, i16 8, [8 x i8*] zeroinitializer,
// -- placeholder for vwtable pointer
// CHECK:   i8* null,
// -- address point
// CHECK:   i64 1, i8* null, %swift.type* null, %swift.type* null,
// -- tail-allocated vwtable pattern
// CHECK:   i8* bitcast (void ([24 x i8]*, %swift.type*)* @_TwXXV15generic_structs13SingleDynamic to i8*),
// -- ...
// -- placeholder for size, flags, stride
// CHECK:   i8* null, i8* null, i8* null }

// CHECK-NOT: @_TWVV15generic_structs13SingleDynamic

struct SingleDynamic<T> {
  var x : T
}

struct Intish { var value : Builtin.Int64 }
struct Chareth { var value : Builtin.Int21 }

// CHECK-LABEL: define { i64, i21 } @concrete_instances(i64, i21) {
// CHECK: entry:
// CHECK:   %2 = insertvalue { i64, i21 } undef, i64 %0, 0
// CHECK:   %3 = insertvalue { i64, i21 } %2, i21 %1, 1
// CHECK:   ret { i64, i21 } %3
// CHECK: }
sil @concrete_instances : $(SingleDynamic<Intish>, SingleDynamic<Chareth>) -> (Intish, Chareth) {
entry(%0 : $SingleDynamic<Intish>, %1 : $SingleDynamic<Chareth>):
  %a = struct_extract %0 : $SingleDynamic<Intish>, #x
  %b = struct_extract %1 : $SingleDynamic<Chareth>, #x
  %c = tuple (%a : $Intish, %b : $Chareth)
  return %c : $(Intish, Chareth)
}

sil @top_level_code : $() -> () {
entry:
  %0 = tuple ()
  return %0 : $()
}

// CHECK: define linkonce_odr hidden void @_TwXXV15generic_structs13SingleDynamic([24 x i8]* %buffer, %swift.type* %Self) {
// CHECK:   [[SELF_ARRAY:%.*]] = bitcast %swift.type* %Self to %swift.type**
// CHECK:   [[SELF_T_ADDR:%.*]] = getelementptr inbounds %swift.type** [[SELF_ARRAY]], i64 3
// CHECK:   %T = load %swift.type** [[SELF_T_ADDR]], align 8

// CHECK: define internal void [[SINGLE_DYNAMIC_FILL_METADATA]](i8*, i8*) {
// CHECK: entry:
// CHECK:   [[METADATA_ADDR:%.*]] = bitcast i8* %0 to i64*
// CHECK:   [[ARGS_ADDR:%.*]] = bitcast i8* %1 to i64*
// -- fill ops
// CHECK:   [[METADATA_SLOT_ADDR:%.*]] = getelementptr inbounds i64* [[METADATA_ADDR]], i32 4
// CHECK:   [[ARGS_SLOT_ADDR:%.*]] = getelementptr inbounds i64* [[ARGS_ADDR]], i32 0
// CHECK:   [[ARG:%.*]] = load i64* [[ARGS_SLOT_ADDR]], align 8
// CHECK:   store i64 [[ARG]], i64* [[METADATA_SLOT_ADDR]], align 8
// -- store vwtable reference
// CHECK:   [[VWTABLE_ADDR:%.*]] = getelementptr inbounds i64* [[METADATA_ADDR]], i32 5
// CHECK:   [[VWTABLE_VAL:%.*]] = ptrtoint i64* [[VWTABLE_ADDR]] to i64
// CHECK:   [[VWTABLE_SLOT_ADDR:%.*]] = getelementptr inbounds i64* [[METADATA_ADDR]], i32 0
// CHECK:   store i64 [[VWTABLE_VAL]], i64* [[VWTABLE_SLOT_ADDR]], align 8
// CHECK:   ret void
// CHECK: }
