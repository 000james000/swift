// RUN: %swift -target x86_64-apple-darwin10 %s -emit-ir | FileCheck %s

sil_stage canonical

import Builtin

// This type has equal stride and size.
struct SameSizeStride { var x, y: Builtin.Int32 }

// This type has unequal stride and size.
struct DifferentSizeStride { var x: Builtin.Int32, y: Builtin.Int16 }

// CHECK: define void @same_size_stride(%V8indexing14SameSizeStride* noalias, i64) {
// CHECK:   getelementptr inbounds %V8indexing14SameSizeStride* %0, i64 %1
sil @same_size_stride : $@thin (@in SameSizeStride, Builtin.Word) -> () {
entry(%p : $*SameSizeStride, %i: $Builtin.Word):
  %q = index_addr %p : $*SameSizeStride, %i : $Builtin.Word
  return undef : $()
}

// CHECK:      define void @different_size_stride(%V8indexing19DifferentSizeStride* noalias, i64) {
// CHECK:        %2 = bitcast %V8indexing19DifferentSizeStride* %0 to i8*
// CHECK-NEXT:   %3 = mul nuw i64 %1, 8
// CHECK-NEXT:   %4 = getelementptr inbounds i8* %2, i64 %3
// CHECK-NEXT:   %5 = bitcast i8* %4 to %V8indexing19DifferentSizeStride*
sil @different_size_stride : $@thin (@in DifferentSizeStride, Builtin.Word) -> () {
entry(%p : $*DifferentSizeStride, %i: $Builtin.Word):
  %q = index_addr %p : $*DifferentSizeStride, %i : $Builtin.Word
  return undef : $()
}

// CHECK:      define void @dynamic_size(%swift.opaque* noalias, i64, %swift.type* %T) {
// CHECK:        %3 = bitcast %swift.type* %T to i8***
// CHECK-NEXT:   %4 = getelementptr inbounds i8*** %3, i64 -1
// CHECK-NEXT:   %5 = load i8*** %4, align 8
// CHECK-NEXT:   %6 = getelementptr inbounds i8** %5, i32 15
// CHECK-NEXT:   %7 = load i8** %6, align 8
// CHECK-NEXT:   %stride = ptrtoint i8* %7 to i64
// CHECK-NEXT:   %8 = mul nuw i64 %1, %stride
// CHECK-NEXT:   %9 = getelementptr inbounds i8* %2, i64 %8

sil @dynamic_size : $@thin <T> (@in T, Builtin.Word) -> () {
entry(%p : $*T, %i: $Builtin.Word):
  %q = index_addr %p : $*T, %i : $Builtin.Word
  return undef : $()
}
