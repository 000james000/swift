// RUN: %swift -I %S/.. %s -i | FileCheck %s

// Define a Complex number.
struct Complex {
  Real : Double,
  Imaginary : Double
  static func zero() -> Complex {
    return Complex(0.0, 0.0)
  }
  func magnitude() -> Double {
    return Real * Real + Imaginary * Imaginary
  }
}

func [infix_left=200] * (lhs : Complex, rhs : Complex) -> Complex {
  return Complex(lhs.Real * rhs.Real - lhs.Imaginary * rhs.Imaginary,
                 lhs.Real * rhs.Imaginary + lhs.Imaginary * rhs.Real)
}
func [infix_left=190] + (lhs: Complex, rhs: Complex) -> Complex {
  return Complex(lhs.Real + rhs.Real, lhs.Imaginary + rhs.Imaginary)
}

func printDensity(d : Int) {
  if (d > 40) {
     print(" ")
  } else if d > 6 {
     print(".")
  } else if d > 4 {
     print("+")
  } else if d > 2 {
     print("*")
  } else {
     print("#")
  }
}

func absolute(x:Double) -> Double {
  if (x >= 0.0) { return x }
  return x * -1.0;
}

func getBurningShipIterations(z:Complex, c:Complex, maxIterations:Int) -> Int {
  var n : Int
  while (n < maxIterations && z.magnitude() < 4.0) {
    var zTmp = Complex(absolute(z.Real), absolute(z.Imaginary))
    z = zTmp*zTmp + c
    n = n + 1
  }
  return n
}

func burningShip(xMin:Double, xMax:Double,
                 yMin:Double, yMax:Double,
                 rows:Int, cols:Int,
                 maxIterations:Int)  {
  // Set the spacing for the poInts in the Mandelbrot set.
  var dX = (xMax - xMin) / Double(rows)
  var dY = (yMax - yMin) / Double(cols)
  // Iterate over the points an determine if they are in the
  // Mandelbrot set.
  var row = 0
  while (row < rows) {
    row = row + 1
    var col = 0;
    while (col < cols) {
      col = col + 1
      var c = Complex(yMin + (dY * Double(col)),
                      xMin + (dX * Double(row)))
      printDensity(getBurningShipIterations(Complex.zero(), c, maxIterations))
    }
    print("\n")
  }
}

burningShip(-2.0, 1.2, -2.1, 1.2, 40, 80, 200)

// CHECK: ################################################################################
// CHECK: ################################################################################
// CHECK: ####################################################################*****#######
// CHECK: ###############################################################*******+...+*####
// CHECK: ############################################################**********+...****##
// CHECK: ##########################################################************. .+****##
// CHECK: ########################################################***********++....+.****#
// CHECK: #####################################################************+++......++***#
// CHECK: #############################*******************###************..... .....+++++#
// CHECK: #######################*******+++*******************+ .+++++ . .     ........+*#
// CHECK: ###################**********+.. .+++*******+.+++**+.                .....+.+**#
// CHECK: ################**********++++...+...++ ..   . . .+                ...+++++.***#
// CHECK: #############***********++.....  . ... .                         ...++++++****##
// CHECK: ###########*************.......  . .                            ...+++********##
// CHECK: #########***************.  ..                                  ...+++*********##
// CHECK: ########***************++. ..  . .                            ...+++*********###
// CHECK: ######*****************. ...                                 ...+++**********###
// CHECK: #####*****************+.                                    ...+++**********####
// CHECK: ####****************+++ .                                 .....++***********####
// CHECK: ####**********++..... .                                   ....+++***********####
// CHECK: ###*********+++.. .                                      ....+++***********#####
// CHECK: ###********++++.                                         ....+++***********#####
// CHECK: ##*******++++.                                           ...++++***********#####
// CHECK: ##**++*+..+...                                           ...+++************#####
// CHECK: ##                                                       ...+++************#####
// CHECK: ##*********+++++++++.........     ......                   ..++************#####
// CHECK: ###****************++++++....................               .++***********######
// CHECK: ####********************++++++++++++++++........             .+***********######
// CHECK: #######****************************+++++++++.......          ++***********######
// CHECK: ##########*******************************++++++......      ..++**********#######
// CHECK: ##############*******************************+++++.........++++*********########
// CHECK: ###################****************************++++++++++++++**********#########
// CHECK: #########################*************************+++++++++***********##########
// CHECK: ###############################**************************************###########
// CHECK: ###################################********************************#############
// CHECK: #######################################***************************##############
// CHECK: ##########################################**********************################
// CHECK: ############################################*****************###################
// CHECK: ###############################################***********######################
// CHECK: #################################################*****##########################
