//===----------------------------------------------------------------------===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2015 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See http://swift.org/LICENSE.txt for license information
// See http://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//

%import gyb
%MirrorDecl = gyb.parseTemplate("../common/Mirrors.gyb")

% for Type in [['Range','ForwardIndex','startIndex','endIndex'],\
%              ['RandomAccessRange','RandomAccessIndex','startIndex','endIndex'],\
%              ['ReverseRange','BidirectionalIndex','_bounds.0','_bounds.1']]:
%   Self = Type[0]
%   Protocol = Type[1]
%   StartIndex = Type[2]
%   EndIndex = Type[3]
%   Mirror = gyb.executeTemplate(MirrorDecl,introspecteeType=Self,genericArgs=['T'],genericConstraints={'T':Protocol},disposition='Struct')
${Mirror}
  @public var count: Int { return 2 }

  @public subscript(i: Int) -> (String, Mirror) {
    switch i {
    case 0: return ("startIndex",reflect(_value.${StartIndex}))
    case 1: return ("endIndex",reflect(_value.${EndIndex}))
    default: _preconditionFailure("cannot extract this child index")
    }
  }
  
  @public var summary: String { 
    return "${Self}(\(self[0].1.summary),\(self[1].1.summary))"
  }

  @public var quickLookObject: QuickLookObject? { return .Some(.Text(summary)) }
}

