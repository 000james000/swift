//===--- LazyCollection.swift ---------------------------------*- swift -*-===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2015 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See http://swift.org/LICENSE.txt for license information
// See http://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//

%for traversal in [ 'Forward', 'Bidirectional', 'RandomAccess' ]:
%  whereClause = 'where S.IndexType : %sIndex' % traversal
%  Self = 'Lazy%sCollection' % traversal

/// Augments `S` with lazy versions of various collection algorithms.
@public
struct ${Self}<S: Collection ${whereClause}> : Collection {
  @public
  init(_ base: S) {
    self._base = base
  }

  @public
  func generate() -> S.GeneratorType {
    return self._base.generate()
  }

  @public
  var startIndex: S.IndexType {
    return _base.startIndex
  }
  
  @public
  var endIndex: S.IndexType {
    return _base.endIndex
  }

  @public
  subscript(i: S.IndexType) -> S.GeneratorType.Element {
    return _base[i]
  }
  
  /// an Array, created on-demand, containing the elements of this
  /// lazy Collection.
  @public var array: [S.GeneratorType.Element] {
    return Array(_base)
  }

  var _base: S
}

/// Augment `s` with lazy methods such as `map`, `filter`, etc.
@public
func lazy<S: Collection ${whereClause}>(s: S) -> ${Self}<S> {
  return ${Self}(s)
}

%end

// ${'Local Variables'}:
// eval: (read-only-mode 1)
// End:
