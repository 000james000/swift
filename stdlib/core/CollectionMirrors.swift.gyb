//===----------------------------------------------------------------------===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2015 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See http://swift.org/LICENSE.txt for license information
// See http://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//

%import gyb
%TMirrorDecl = gyb.parseTemplate("../common/MirrorDecl.gyb")
%TMirrorConformance = gyb.parseTemplate("../common/MirrorConformance.gyb")
%TMirrorBoilerplate = gyb.parseTemplate("../common/MirrorBoilerplate.gyb")

% for Type in [['CollectionOfOne',1,"element",\
%               'CollectionOfOne(\( reflect(_value.element).summary ))'],\
%             ['EmptyCollection',0,"DONTSHOWME",'EmptyCollection']]:
%   Self = Type[0]
%   Count = Type[1]
%   ElementName = Type[2]
%   SummaryString = Type[3]
%   MirrorDecl = gyb.executeTemplate(TMirrorDecl,\
%                                    introspecteeType=Self,\
%                                    genericArgs=['T'],\
%                                    disposition='Struct')
%   MirrorConformance = gyb.executeTemplate(TMirrorConformance,\
%                                    introspecteeType=Self,\
%                                    genericArgs=['T'],\
%                                    disposition='Struct')
%   MirrorBoilerplate = gyb.executeTemplate(TMirrorBoilerplate,\
%                                    introspecteeType=Self,\
%                                    genericArgs=['T'],\
%                                    disposition='Struct')

${MirrorDecl} {
  ${MirrorBoilerplate}
  
  @public var count: Int { return ${Count} }

  @public subscript(i: Int) -> (String, Mirror) {
    if i >= 0 && i < count {
      return ("${ElementName}",reflect(_value[advance(_value.startIndex,i)]))
    } else {
      _fatalError("Mirror access out of bounds")
    }
  }

  @public var summary: String { return "${SummaryString}" }

  @public var quickLookObject: QuickLookObject? { return .None }
}

${MirrorConformance}
