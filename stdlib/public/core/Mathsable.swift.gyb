//===--- Mathsable.swift --------------------------------------*- swift -*-===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2019 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://swift.org/LICENSE.txt for license information
// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//

import SwiftShims

%{
from SwiftMathsFunctions import *
}%

/// A type that has basic maths functions available.
///
/// "Basic maths functions" means roughly "the usual transcendental
/// functions provided by `<math.h>` in C-family langauges."
public protocol Mathsable {
  associatedtype Maths: MathsImplementations where Maths.Value == Self
}

/// A type that provides the implementation trampolines for maths functions
/// on the related `Value` type.
public protocol MathsImplementations {
  associatedtype Value
%for func in MathsFunctions:
  static func ${func.decl("Value")}
%end
}

%for type in all_floating_point_types():
% if type.bits == 80:
#if (arch(i386) || arch(x86_64)) && !os(Windows)
% end
extension ${type.stdlib_name}: Mathsable {
  /// Defines basic maths functions for ${type.stdlib_name}
  @_frozen
  public enum Maths: MathsImplementations {
    public typealias Value = ${type.stdlib_name}
% for func in MathsFunctions:
    @_alwaysEmitIntoClient
    public static func ${func.decl("Value")} {
      return ${func.impl(type)}
    }
% end
  }
}

% if type.bits == 80:
#endif
% end
%end

/// Defines basic maths functions operating elementwise on SIMD vector types.
@_fixed_layout
public struct _SIMDMaths<V>: MathsImplementations
where V: SIMD, V.Scalar: Mathsable {
  
  public typealias Value = V
%for func in MathsFunctions:

  @_alwaysEmitIntoClient
  public static func ${func.decl("V")} {
    var r = V()
    for i in x.indices {
      r[i] = V.Scalar.Maths.${func.name}(${func.params("", "[i]")})
    }
    return r
  }
%end
}

extension SIMD where Scalar: Mathsable {
  public typealias Maths = _SIMDMaths<Self>
}

%for n in [2,3,4,8,16,32,64]:
extension SIMD${n}: Mathsable where Scalar: Mathsable { }
%end
