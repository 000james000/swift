//===--- Flatten.swift.gyb ------------------------------------------------===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2015 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See http://swift.org/LICENSE.txt for license information
// See http://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//

/// A flattened view of a base generator-of-sequences.
///
/// The elements generated are the concatenation of those in each
/// sequence generated by the base generator.
///
/// - Note: this is the `GeneratorType` used by `FlattenSequence`.
public struct _prext_FlattenGenerator<
  Base : GeneratorType where Base.Element : SequenceType
> : GeneratorType, SequenceType {

  /// Construct around a generator for the `base` sequence.
  public init(_ base: Base) {
    self._base = base
  }

  /// Advance to the next element and return it, or `nil` if no next
  /// element exists.
  ///
  /// - Requires: `next()` has not been applied to a copy of `self`
  ///   since the copy was made, and no preceding call to `self.next()`
  ///   has returned `nil`.
  public mutating func next() -> Base.Element.Generator.Element? {
    repeat {
      if _fastPath(_inner != nil) {
        let ret = _inner!.next()
        if _fastPath(ret != nil) {
          return ret
        }
      }
      let s = _base.next()
      if _slowPath(s == nil) {
        return nil
      }
      _inner = s!.generate()
    }
    while true
  }

  internal var _base: Base
  internal var _inner: Base.Element.Generator? = nil
}

/// A flattened view of a base sequence-of-sequences.
///
/// The elements of this view are a concatenation of the elements of
/// each sequence in the base.
public struct _prext_FlattenSequence<
  Base : SequenceType where Base.Generator.Element : SequenceType
> : SequenceType {

  /// Creates a concatenation of the elements of the elements of `base`.
  ///
  /// - Complexity: O(1)
  public init(_ base: Base) {
    self._base = base
  }

  /// Return a *generator* over the elements of this *sequence*.
  ///
  /// - Complexity: O(1).
  public func generate() -> _prext_FlattenGenerator<Base.Generator> {
    return _prext_FlattenGenerator(_base.generate())
  }
  
  internal var _base: Base
}

extension SequenceType where Generator.Element : SequenceType {
  /// A concatenation of the elements of `self`.
  public var _prext_flatten: _prext_FlattenSequence<Self> {
    return _prext_FlattenSequence(self)
  }
}

extension _prext_LazySequenceType
  where Elements.Generator.Element == Generator.Element, 
    Generator.Element : SequenceType {
  /// A concatenation of the elements of `self`.
  public var _prext_flatten: _prext_LazySequence<
    _prext_FlattenSequence<Elements>
  > {
    return _prext_FlattenSequence(elements)._prext_lazy
  }
}

