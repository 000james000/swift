//===--- LazyCollection.swift ---------------------------------*- swift -*-===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2015 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See http://swift.org/LICENSE.txt for license information
// See http://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//

%for traversal in [ 'Forward', 'Bidirectional', 'RandomAccess' ]:
%  whereClause = 'where Base.Index : %sIndexType' % traversal
%  Self = 'Lazy%sCollection' % traversal

/// A collection that forwards its implementation to an underlying
/// collection instance while exposing lazy computations as methods.
public struct ${Self}<Base : CollectionType ${whereClause}> : CollectionType {
  
  /// Construct an instance with `base` as its underlying collection
  /// instance.
  public init(_ base: Base) {
    self._base = base
  }

  /// Return a *generator* over the elements of this *sequence*.
  ///
  /// - Complexity: O(1).
  public func generate() -> Base.Generator {
    return self._base.generate()
  }

  /// The position of the first element in a non-empty collection.
  ///
  /// In an empty collection, `startIndex == endIndex`.
  public var startIndex: Base.Index {
    return _base.startIndex
  }
  
  /// The collection's "past the end" position.
  ///
  /// `endIndex` is not a valid argument to `subscript`, and is always
  /// reachable from `startIndex` by zero or more applications of
  /// `successor()`.
  public var endIndex: Base.Index {
    return _base.endIndex
  }

  /// Access the element at `position`.
  ///
  /// - Requires: `position` is a valid position in `self` and
  ///   `position != endIndex`.
  public
  subscript(position: Base.Index) -> Base.Generator.Element {
    return _base[position]
  }
  
  /// an Array, created on-demand, containing the elements of this
  /// lazy CollectionType.
  public var array: [Base.Generator.Element] {
    return Array(_base)
  }

  public func underestimateCount() -> Int {
    return _base.underestimateCount()
  }

  var _base: Base
}

/// Augment `s` with lazy methods such as `map`, `filter`, etc.
public func lazy<Base : CollectionType ${whereClause}>(s: Base)
  -> ${Self}<Base> {

  return ${Self}(s)
}

%end

// ${'Local Variables'}:
// eval: (read-only-mode 1)
// End:
