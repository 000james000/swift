%{
#//===--- ObjectiveCBridgeableError.gyb -----------------------*- swift -*-===//
#//
#// This source file is part of the Swift.org open source project
#//
#// Copyright (c) 2014 - 2015 Apple Inc. and the Swift project authors
#// Licensed under Apache License v2.0 with Runtime Library Exception
#//
#// See http://swift.org/LICENSE.txt for license information
#// See http://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
#//
#//===---------------------------------------------------------------------===//
#
# This file contains boilerplate used to generate enums that conform to
# _ObjectiveCBridgeableErrorType for specific Cocoa error domains.

# Instructions:
# Load the file as a gyb template
# When you want to generate a Mirror, execute this template. Locals are as
# follows:
# - mappedDomains: a mapping from a Cocoa error domain (without the "Domain"
#   suffix) to an array of errors. Each error contains the name, an 'available'
#   clause, and an error code (should be zero except in rare circumstances).
}%

%for domain in mappedDomains:

// TODO: API review for how to name these enums and cases.
%{
EnumName = "_" + domain
}%

// Non-zero constant values in the table indicate constants that come
// from another framework (AppKit or CoreData) and need to be copied here.
%  for (name, availability, id) in mappedDomains[domain]:
%    if id != 0:
private let ${name}: Int = ${id}
%    end
%  end
%  if mappedDomainsOSX.has_key(domain):
#if os(OSX)
%    for (name, availability, id) in mappedDomainsOSX[domain]:
%      if id != 0:
private let ${name}: Int = ${id}
%      end
%    end
#endif
%  end

public enum ${EnumName} : Int, _ObjectiveCBridgeableErrorType {
%  for (name, availability, id) in mappedDomains[domain]:
  case ${name[2:]}
%  end
%  if mappedDomainsOSX.has_key(domain):
#if os(OSX)
%    for (name, availability, id) in mappedDomainsOSX[domain]:
  case ${name[2:]}
%    end
#endif
%  end

  public var _domain: String { return ${domain}Domain }
  public var _code: Int {
    switch self {
%  for (name, availability, id) in mappedDomains[domain]:
    case ${EnumName}.${name[2:]}:
%    if availability != '':
      guard #${availability} else {
        fatalError("${name} not available on this OS version")
      }
%    end
      return ${name}
%  end
    default:
%    if mappedDomainsOSX.has_key(domain):
#if os(OSX)
%      for (name, availability, id) in mappedDomainsOSX[domain]:
%        if availability != '':
      if #${availability} {
%        end
        if self == ${EnumName}.${name[2:]} {
          return ${name}
        }
%        if availability != '':
      }
%        end
%      end
#endif
%    end
      fatalError("unhandled error code in ${EnumName}")
    }
  }

  public init?(_bridgedNSError: NSError) {
    if _bridgedNSError.domain != ${domain}Domain {
      return nil
    }

    let code = _bridgedNSError.code
%  for (name, availability, id) in mappedDomains[domain]:
%   if availability != '':
    if #${availability} {
%   end
      if code == ${name} {
        self = ${EnumName}.${name[2:]}
        return
      }
%   if availability != '':
    }
%   end
%  end
%  if mappedDomainsOSX.has_key(domain):
#if os(OSX)
%    for (name, availability, id) in mappedDomainsOSX[domain]:
%      if availability != '':
    if #${availability} {
%      end
      if code == ${name} {
        self = ${EnumName}.${name[2:]}
        return
      }
%      if availability != '':
    }
%      end
%    end
#endif
%  end
    return nil
  }
}

%end
