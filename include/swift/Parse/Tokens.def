//===--- Tokens.def - Swift Tokenizer Metaprogramming -----------*- C++ -*-===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2015 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See http://swift.org/LICENSE.txt for license information
// See http://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//
//
// This file defines macros used for macro-metaprogramming lexer tokens.
//
//===----------------------------------------------------------------------===//

/// KEYWORD(kw)
///   Expands for every Swift keyword, such as 'if', 'else', etc.
#ifndef KEYWORD
#define KEYWORD(kw)
#endif

/// IDENTIFIER_KEYWORD(kw)
///   Expands for Swift keywords that behave grammatically like identifiers,
///   such as 'super' and 'constructor'. In particular, these keywords cause
///   a following unwhitespaced left paren or square bracket to be parsed as
///   l_paren_following or l_square_following instead of l_paren_starting or
///   l_square_starting.
#ifndef IDENTIFIER_KEYWORD
#define IDENTIFIER_KEYWORD(kw) KEYWORD(kw)
#endif

/// PUNCTUATOR(name, str)
///   Expands for every Swift punctuator.
///   \param name  The symbolic name of the punctuator, such as
///                'l_paren_starting' or 'arrow'.
///   \param str   A string literal containing the spelling of the punctuator,
///                such as '"("' or '"->"'.
#ifndef PUNCTUATOR
#define PUNCTUATOR(name, str)
#endif

// Decl and type keywords.
KEYWORD(class)
IDENTIFIER_KEYWORD(constructor)
KEYWORD(destructor)
KEYWORD(extension)
KEYWORD(func)
KEYWORD(import)
KEYWORD(oneof)
IDENTIFIER_KEYWORD(metatype)
KEYWORD(protocol)
KEYWORD(requires)
KEYWORD(struct)
KEYWORD(typealias)
KEYWORD(var)
KEYWORD(static)
KEYWORD(subscript)

// Statement keywords.
KEYWORD(if)
KEYWORD(do)
KEYWORD(then)
KEYWORD(else)
KEYWORD(for)
KEYWORD(while)
KEYWORD(return)
KEYWORD(break)
KEYWORD(continue)
KEYWORD(switch)
KEYWORD(case)
KEYWORD(default)

// Expression keywords.
KEYWORD(new)
IDENTIFIER_KEYWORD(super)
IDENTIFIER_KEYWORD(this)
IDENTIFIER_KEYWORD(This)

// Punctuators.
PUNCTUATOR(l_paren_starting,  "(")
PUNCTUATOR(l_paren_following, "(")
PUNCTUATOR(r_paren,     ")")
PUNCTUATOR(l_brace,     "{")
PUNCTUATOR(r_brace,     "}")
PUNCTUATOR(l_square_starting,  "[")
PUNCTUATOR(l_square_following, "[")
PUNCTUATOR(r_square,    "]")

PUNCTUATOR(period,      ".")
PUNCTUATOR(period_prefix, ".")
PUNCTUATOR(comma,       ",")
PUNCTUATOR(colon,       ":")
PUNCTUATOR(semi,        ";")
PUNCTUATOR(equal,       "=")
PUNCTUATOR(ellipsis,    "...")

PUNCTUATOR(amp_prefix,  "&")
PUNCTUATOR(arrow,       "->")

#undef KEYWORD
#undef IDENTIFIER_KEYWORD
#undef PUNCTUATOR
