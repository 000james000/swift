//===--- Attr.def - Swift Attributes Metaprogramming ------------*- C++ -*-===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2015 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See http://swift.org/LICENSE.txt for license information
// See http://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//
//
// This file defines macros used for macro-metaprogramming with attributes.
//
//===----------------------------------------------------------------------===//

#ifndef ATTR
#define ATTR(X)
#endif

#ifndef DECL_ATTR
#define DECL_ATTR(SPELLING, CLASS, OPTIONS, CODE)
#endif

#ifndef SIMPLE_DECL_ATTR
#define SIMPLE_DECL_ATTR(X, CLASS, OPTIONS, CODE) DECL_ATTR(X, CLASS, OPTIONS, CODE)
#endif

#ifndef VIRTUAL_DECL_ATTR
#define VIRTUAL_DECL_ATTR(X, CLASS, OPTIONS, CODE) DECL_ATTR(X, CLASS, OPTIONS, CODE)
#endif

#ifndef TYPE_ATTR
#define TYPE_ATTR(X)
#endif

#ifndef IB_ATTR
#define IB_ATTR(X) ATTR(X)
#endif

/// Virtual attributes are not necessarily spelled the same way
/// they're written.
#ifndef VIRTUAL_ATTR
#define VIRTUAL_ATTR(X) ATTR(X)
#endif

#ifndef AVAILABILITY_PLATFORM
#define AVAILABILITY_PLATFORM(X)
#endif

// Type attributes
TYPE_ATTR(auto_closure)
TYPE_ATTR(cc)
TYPE_ATTR(noreturn)
TYPE_ATTR(objc_block)
TYPE_ATTR(thin)
TYPE_ATTR(thick)
TYPE_ATTR(unchecked)

// SIL-specific attributes
TYPE_ATTR(block_storage)
TYPE_ATTR(sil_self)
TYPE_ATTR(local_storage)
TYPE_ATTR(sil_unowned)
TYPE_ATTR(sil_unmanaged)
TYPE_ATTR(sil_weak)
TYPE_ATTR(out)
TYPE_ATTR(in)
TYPE_ATTR(inout)
TYPE_ATTR(owned)
TYPE_ATTR(unowned_inner_pointer)
TYPE_ATTR(guaranteed)
TYPE_ATTR(autoreleased)
TYPE_ATTR(callee_owned)
TYPE_ATTR(callee_guaranteed)
TYPE_ATTR(objc_metatype)
TYPE_ATTR(opened)

// Schema for DECL_ATTR:
//
// - Attribute name.
// - Class name without the 'Attr' suffix (ignored for
// - Options for the attribute, including the declarations the
//   attribute can appear, and whether duplicates are allowed.
// - Unique attribute identifier used for serialization.  This
//   can never be changed.
//
// SIMPLE_DECL_ATTR is the same, but the class becomes
// SimpleDeclAttr<DAK_##NAME>.
//
// VIRTUAL_DECL_ATTR is like DECL_ATTR, but it can not be spelled in the source
// code as an attribute.  It is modelled as an attribute for the convenience of
// implementation in the compiler.

DECL_ATTR(asmname, Asmname,
          OnFunc | OnConstructor | OnDestructor, 0)

DECL_ATTR(availability, Availability,
          OnFunc | OnStruct | OnEnum | OnClass | OnProtocol | OnVar |
          OnConstructor | OnDestructor | AllowMultipleAttributes, 1)

SIMPLE_DECL_ATTR(final, Final,
                 OnClass | OnFunc | OnVar | OnSubscript, 2)

DECL_ATTR(objc, ObjC,
          OnFunc | OnClass | OnProtocol | OnVar | OnSubscript |
          OnConstructor | OnDestructor, 3)
    
SIMPLE_DECL_ATTR(required, Required,
                 OnConstructor, 4)
                               
SIMPLE_DECL_ATTR(class_protocol, ClassProtocol,
                 OnProtocol, 5)

SIMPLE_DECL_ATTR(noreturn, NoReturn,
                 OnFunc, 6)

SIMPLE_DECL_ATTR(exported, Exported,
                 OnImport, 7)

SIMPLE_DECL_ATTR(assignment, Assignment,
                 OnFunc, 8)

SIMPLE_DECL_ATTR(NSCopying, NSCopying,
                 OnVar, 9)

SIMPLE_DECL_ATTR(IBAction, IBAction,
                 OnFunc, 10)

SIMPLE_DECL_ATTR(IBDesignable, IBDesignable,
                 OnClass, 11)

SIMPLE_DECL_ATTR(IBInspectable, IBInspectable,
                 OnVar, 12)

SIMPLE_DECL_ATTR(IBOutlet, IBOutlet,
                 OnVar, 13)

SIMPLE_DECL_ATTR(NSManaged, NSManaged, OnVar, 14)

VIRTUAL_DECL_ATTR(override, Override,
                  OnFunc | OnVar | OnSubscript,
                  /* Not serialized */ 65535)

VIRTUAL_DECL_ATTR(raw_doc_comment, RawDocComment,
                  OnAnyDecl,
                  /* Not serialized */ 65535)

ATTR(conversion)
ATTR(infix)
ATTR(mutating)
ATTR(prefix)
ATTR(postfix)
ATTR(optional)
ATTR(transparent)
ATTR(unowned)
VIRTUAL_ATTR(unowned_unsafe)
ATTR(weak)
ATTR(requires_stored_property_inits)

AVAILABILITY_PLATFORM(ios)
AVAILABILITY_PLATFORM(osx)
AVAILABILITY_PLATFORM(ios_app_extension)
AVAILABILITY_PLATFORM(osx_app_extension)

#undef AVAILABILITY_PLATFORM
#undef VIRTUAL_ATTR
#undef IB_ATTR
#undef VIRTUAL_DECL_ATTR
#undef SIMPLE_DECL_ATTR
#undef DECL_ATTR
#undef TYPE_ATTR
#undef ATTR
