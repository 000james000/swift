//===--- Builtins.def - Builtins Macro Metaprogramming Database -*- C++ -*-===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2015 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See http://swift.org/LICENSE.txt for license information
// See http://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//
//
// This file defines the database of builtin functions.
//
// BUILTIN(Id, Name)
//   - Id is an identifier suitable for use in C++
//   - Name is a string literal for the name to which the builtin should be
//     bound in Swift
//
//===----------------------------------------------------------------------===//

/// Cast operations have type T1 -> T2.
#ifndef BUILTIN_CAST_OPERATION
#define BUILTIN_CAST_OPERATION(Id, Name) BUILTIN(Id, Name)
#endif
BUILTIN_CAST_OPERATION(Trunc   , "trunc")
BUILTIN_CAST_OPERATION(ZExt    , "zext")
BUILTIN_CAST_OPERATION(SExt    , "sext")
BUILTIN_CAST_OPERATION(FPToUI  , "fptoui")
BUILTIN_CAST_OPERATION(FPToSI  , "fptosi")
BUILTIN_CAST_OPERATION(UIToFP  , "uitofp")
BUILTIN_CAST_OPERATION(SIToFP  , "sitofp")
BUILTIN_CAST_OPERATION(FPTrunc , "fptrunc")
BUILTIN_CAST_OPERATION(FPExt   , "fpext")
BUILTIN_CAST_OPERATION(PtrToInt, "ptrtoint")
BUILTIN_CAST_OPERATION(IntToPtr, "inttoptr")
BUILTIN_CAST_OPERATION(BitCast , "bitcast")

#undef BUILTIN_CAST_OPERATION

/// Binary operations have type (T,T) -> T.
#ifndef BUILTIN_BINARY_OPERATION
#define BUILTIN_BINARY_OPERATION(Id, Name, Overload) BUILTIN(Id, Name)
#endif
BUILTIN_BINARY_OPERATION(Add,     "add",      Integer)
BUILTIN_BINARY_OPERATION(FAdd,    "fadd",     Float)
BUILTIN_BINARY_OPERATION(And,     "and",      Integer)
BUILTIN_BINARY_OPERATION(AShr,    "ashr",     Integer)
BUILTIN_BINARY_OPERATION(LShr,    "lshr",     Integer)
BUILTIN_BINARY_OPERATION(Or,      "or",       Integer)
BUILTIN_BINARY_OPERATION(FDiv,    "fdiv",     Float)
BUILTIN_BINARY_OPERATION(Mul,     "mul",      Integer)
BUILTIN_BINARY_OPERATION(FMul,    "fmul",     Float)
BUILTIN_BINARY_OPERATION(SDiv,    "sdiv",     Integer)
BUILTIN_BINARY_OPERATION(ExactSDiv, "sdiv_exact", Integer)
BUILTIN_BINARY_OPERATION(Shl,     "shl",      Integer)
BUILTIN_BINARY_OPERATION(SRem,    "srem",     Integer)
BUILTIN_BINARY_OPERATION(Sub,     "sub",      Integer)
BUILTIN_BINARY_OPERATION(FSub,    "fsub",     Float)
BUILTIN_BINARY_OPERATION(UDiv,    "udiv",     Integer)
BUILTIN_BINARY_OPERATION(ExactUDiv, "udiv_exact", Integer)
BUILTIN_BINARY_OPERATION(URem,    "urem",     Integer)
BUILTIN_BINARY_OPERATION(Xor,     "xor",      Integer)
#undef BUILTIN_BINARY_OPERATION

/// Binary predicates have type (T,T) -> i1
#ifndef BUILTIN_BINARY_PREDICATE
#define BUILTIN_BINARY_PREDICATE(Id, Name, Overload) BUILTIN(Id, Name)
#endif
BUILTIN_BINARY_PREDICATE(ICMP_EQ,  "cmp_eq",   IntegerOrRawPointer)
BUILTIN_BINARY_PREDICATE(ICMP_NE,  "cmp_ne",   IntegerOrRawPointer)
BUILTIN_BINARY_PREDICATE(ICMP_SLE, "cmp_sle",  Integer)
BUILTIN_BINARY_PREDICATE(ICMP_SLT, "cmp_slt",  Integer)
BUILTIN_BINARY_PREDICATE(ICMP_SGE, "cmp_sge",  Integer)
BUILTIN_BINARY_PREDICATE(ICMP_SGT, "cmp_sgt",  Integer)
BUILTIN_BINARY_PREDICATE(ICMP_ULE, "cmp_ule",  IntegerOrRawPointer)
BUILTIN_BINARY_PREDICATE(ICMP_ULT, "cmp_ult",  IntegerOrRawPointer)
BUILTIN_BINARY_PREDICATE(ICMP_UGE, "cmp_uge",  IntegerOrRawPointer)
BUILTIN_BINARY_PREDICATE(ICMP_UGT, "cmp_ugt",  IntegerOrRawPointer)
BUILTIN_BINARY_PREDICATE(FCMP_OEQ, "fcmp_oeq", Float)
BUILTIN_BINARY_PREDICATE(FCMP_OGT, "fcmp_ogt", Float)
BUILTIN_BINARY_PREDICATE(FCMP_OGE, "fcmp_oge", Float)
BUILTIN_BINARY_PREDICATE(FCMP_OLT, "fcmp_olt", Float)
BUILTIN_BINARY_PREDICATE(FCMP_OLE, "fcmp_ole", Float)
BUILTIN_BINARY_PREDICATE(FCMP_ONE, "fcmp_one", Float)
BUILTIN_BINARY_PREDICATE(FCMP_ORD, "fcmp_ord", Float)
BUILTIN_BINARY_PREDICATE(FCMP_UEQ, "fcmp_ueq", Float)
BUILTIN_BINARY_PREDICATE(FCMP_UGT, "fcmp_ugt", Float)
BUILTIN_BINARY_PREDICATE(FCMP_UGE, "fcmp_uge", Float)
BUILTIN_BINARY_PREDICATE(FCMP_ULT, "fcmp_ult", Float)
BUILTIN_BINARY_PREDICATE(FCMP_ULE, "fcmp_ule", Float)
BUILTIN_BINARY_PREDICATE(FCMP_UNE, "fcmp_une", Float)
BUILTIN_BINARY_PREDICATE(FCMP_UNO, "fcmp_uno", Float)
#undef BUILTIN_BINARY_PREDICATE



// BUILTIN_MISC_OPERATION - Miscellaneous operations without a unifying class.
// These have various types.
#ifndef BUILTIN_MISC_OPERATION
#define BUILTIN_MISC_OPERATION(Id, Name, Overload) BUILTIN(Id, Name)
#endif
                       
/// GetElementPtr has type (Builtin.RawPointer, T) -> Builtin.RawPointer
BUILTIN_MISC_OPERATION(Gep, "gep", Integer)

/// Load has type (Builtin.RawPointer) -> T
BUILTIN_MISC_OPERATION(Load, "load", Special)

/// Move has type (Builtin.RawPointer) -> T
BUILTIN_MISC_OPERATION(Move, "move", Special)

/// Destroy has type (metatype<T>, Builtin.RawPointer) -> ()
BUILTIN_MISC_OPERATION(Destroy, "destroy", Special)

/// Assign has type (T, Builtin.RawPointer) -> ()
BUILTIN_MISC_OPERATION(Assign, "assign", Special)

/// Init has type (T, Builtin.RawPointer) -> ()
BUILTIN_MISC_OPERATION(Init, "init", Special)

/// Sizeof has type (metatype<T>) -> Int64
BUILTIN_MISC_OPERATION(Sizeof, "sizeof", Special)

/// Strideof has type (metatype<T>) -> Int64
BUILTIN_MISC_OPERATION(Strideof, "strideof", Special)

/// Alignof has type (metatype<T>) -> Int64
BUILTIN_MISC_OPERATION(Alignof, "alignof", Special)

/// AllocRaw has type (Int64, Int64) -> Builtin.RawPointer
BUILTIN_MISC_OPERATION(AllocRaw, "allocRaw", Special)

/// DeallocRaw has type (Builtin.RawPointer, Int64) -> ()
BUILTIN_MISC_OPERATION(DeallocRaw, "deallocRaw", Special)

/// CastToObjectPointer has type (T) -> Builtin.ObjectPointer.
BUILTIN_MISC_OPERATION(CastToObjectPointer, "castToObjectPointer", Special)

/// CastFromObjectPointer has type (Builtin.ObjectPointer) -> T.
BUILTIN_MISC_OPERATION(CastFromObjectPointer, "castFromObjectPointer", Special)

/// BridgeToRawPointer has type (T) -> Builtin.RawPointer.
BUILTIN_MISC_OPERATION(BridgeToRawPointer, "bridgeToRawPointer", Special)

/// BridgeFromRawPointer (Builtin.RawPointer) -> T.
/// IRGen requires that T is a single retainable pointer.
/// Bridging to/from a raw pointer does not imply a retain.
BUILTIN_MISC_OPERATION(BridgeFromRawPointer, "bridgeFromRawPointer", Special)

/// Fence has type () -> ().
BUILTIN_MISC_OPERATION(Fence, "fence", None)

/// CmpXChg has type (Builtin.RawPointer, T, T) -> T.
BUILTIN_MISC_OPERATION(CmpXChg, "cmpxchg", Special)


#undef BUILTIN_MISC_OPERATION

#undef BUILTIN
