//===--- Builtins.def - Builtins Macro Metaprogramming Database -*- C++ -*-===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2015 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See http://swift.org/LICENSE.txt for license information
// See http://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//
//
// This file defines the database of builtin functions.
//
// BUILTIN(Id, Name)
//   - Id is an identifier suitable for use in C++
//   - Name is a string literal for the name to which the builtin should be
//     bound in Swift
//
//===----------------------------------------------------------------------===//

/// Cast operations have type T1 -> T2.
#ifndef BUILTIN_CAST_OPERATION
#define BUILTIN_CAST_OPERATION(Id, Name, Overload) BUILTIN(Id, Name)
#endif
BUILTIN_CAST_OPERATION(Trunc   , "trunc",    OverloadedBuiltinKind::Integer)
BUILTIN_CAST_OPERATION(ZExt    , "zext",     OverloadedBuiltinKind::Integer)
BUILTIN_CAST_OPERATION(SExt    , "sext",     OverloadedBuiltinKind::Integer)
BUILTIN_CAST_OPERATION(FPToUI  , "fptoui",   OverloadedBuiltinKind::Arithmetic)
BUILTIN_CAST_OPERATION(FPToSI  , "fptosi",   OverloadedBuiltinKind::Arithmetic)
BUILTIN_CAST_OPERATION(UIToFP  , "uitofp",   OverloadedBuiltinKind::Arithmetic)
BUILTIN_CAST_OPERATION(SIToFP  , "sitofp",   OverloadedBuiltinKind::Arithmetic)
BUILTIN_CAST_OPERATION(FPTrunc , "fptrunc",  OverloadedBuiltinKind::Arithmetic)
BUILTIN_CAST_OPERATION(FPExt   , "fpext",    OverloadedBuiltinKind::Arithmetic)
BUILTIN_CAST_OPERATION(PtrToInt, "ptrtoint", OverloadedBuiltinKind::Integer)
BUILTIN_CAST_OPERATION(IntToPtr, "inttoptr", OverloadedBuiltinKind::Integer)
BUILTIN_CAST_OPERATION(Bitcast , "bitcast", OverloadedBuiltinKind::Arithmetic)

#undef BUILTIN_CAST_OPERATION

/// Binary operations have type (T,T) -> T.
#ifndef BUILTIN_BINARY_OPERATION
#define BUILTIN_BINARY_OPERATION(Id, Name, Overload) BUILTIN(Id, Name)
#endif
BUILTIN_BINARY_OPERATION(Add,     "add",      OverloadedBuiltinKind::Arithmetic)
BUILTIN_BINARY_OPERATION(And,     "and",      OverloadedBuiltinKind::Integer)
BUILTIN_BINARY_OPERATION(AShr,    "ashr",     OverloadedBuiltinKind::Integer)
BUILTIN_BINARY_OPERATION(LShr,    "lshr",     OverloadedBuiltinKind::Integer)
BUILTIN_BINARY_OPERATION(Or,      "or",       OverloadedBuiltinKind::Integer)
BUILTIN_BINARY_OPERATION(FDiv,    "fdiv",     OverloadedBuiltinKind::Float)
BUILTIN_BINARY_OPERATION(Mul,     "mul",      OverloadedBuiltinKind::Arithmetic)
BUILTIN_BINARY_OPERATION(SDiv,    "sdiv",     OverloadedBuiltinKind::Integer)
BUILTIN_BINARY_OPERATION(SDivExact, "sdiv_exact", OverloadedBuiltinKind::Integer)
BUILTIN_BINARY_OPERATION(Shl,     "shl",     OverloadedBuiltinKind::Integer)
BUILTIN_BINARY_OPERATION(SRem,    "srem",     OverloadedBuiltinKind::Integer)
BUILTIN_BINARY_OPERATION(Sub,     "sub",      OverloadedBuiltinKind::Arithmetic)
BUILTIN_BINARY_OPERATION(UDiv,    "udiv",     OverloadedBuiltinKind::Integer)
BUILTIN_BINARY_OPERATION(UDivExact, "udiv_exact", OverloadedBuiltinKind::Integer)
BUILTIN_BINARY_OPERATION(URem,    "urem",     OverloadedBuiltinKind::Integer)
BUILTIN_BINARY_OPERATION(Xor,     "xor",      OverloadedBuiltinKind::Integer)
#undef BUILTIN_BINARY_OPERATION

/// Binary predicates have type (T,T) -> i1
#ifndef BUILTIN_BINARY_PREDICATE
#define BUILTIN_BINARY_PREDICATE(Id, Name, Overload) BUILTIN(Id, Name)
#endif
BUILTIN_BINARY_PREDICATE(CmpEQ,   "cmp_eq",   OverloadedBuiltinKind::Integer)
BUILTIN_BINARY_PREDICATE(CmpNE,   "cmp_ne",   OverloadedBuiltinKind::Integer)
BUILTIN_BINARY_PREDICATE(CmpSLE,  "cmp_sle",  OverloadedBuiltinKind::Integer)
BUILTIN_BINARY_PREDICATE(CmpSLT,  "cmp_slt",  OverloadedBuiltinKind::Integer)
BUILTIN_BINARY_PREDICATE(CmpSGE,  "cmp_sge",  OverloadedBuiltinKind::Integer)
BUILTIN_BINARY_PREDICATE(CmpSGT,  "cmp_sgt",  OverloadedBuiltinKind::Integer)
BUILTIN_BINARY_PREDICATE(CmpULE,  "cmp_ule",  OverloadedBuiltinKind::Integer)
BUILTIN_BINARY_PREDICATE(CmpULT,  "cmp_ult",  OverloadedBuiltinKind::Integer)
BUILTIN_BINARY_PREDICATE(CmpUGE,  "cmp_uge",  OverloadedBuiltinKind::Integer)
BUILTIN_BINARY_PREDICATE(CmpUGT,  "cmp_ugt",  OverloadedBuiltinKind::Integer)
BUILTIN_BINARY_PREDICATE(FCmpOEQ, "fcmp_oeq", OverloadedBuiltinKind::Float)
BUILTIN_BINARY_PREDICATE(FCmpOGT, "fcmp_ogt", OverloadedBuiltinKind::Float)
BUILTIN_BINARY_PREDICATE(FCmpOGE, "fcmp_oge", OverloadedBuiltinKind::Float)
BUILTIN_BINARY_PREDICATE(FCmpOLT, "fcmp_olt", OverloadedBuiltinKind::Float)
BUILTIN_BINARY_PREDICATE(FCmpOLE, "fcmp_ole", OverloadedBuiltinKind::Float)
BUILTIN_BINARY_PREDICATE(FCmpONE, "fcmp_one", OverloadedBuiltinKind::Float)
BUILTIN_BINARY_PREDICATE(FCmpORD, "fcmp_ord", OverloadedBuiltinKind::Float)
BUILTIN_BINARY_PREDICATE(FCmpUEQ, "fcmp_ueq", OverloadedBuiltinKind::Float)
BUILTIN_BINARY_PREDICATE(FCmpUGT, "fcmp_ugt", OverloadedBuiltinKind::Float)
BUILTIN_BINARY_PREDICATE(FCmpUGE, "fcmp_uge", OverloadedBuiltinKind::Float)
BUILTIN_BINARY_PREDICATE(FCmpULT, "fcmp_ult", OverloadedBuiltinKind::Float)
BUILTIN_BINARY_PREDICATE(FCmpULE, "fcmp_ule", OverloadedBuiltinKind::Float)
BUILTIN_BINARY_PREDICATE(FCmpUNE, "fcmp_une", OverloadedBuiltinKind::Float)
BUILTIN_BINARY_PREDICATE(FCmpUNO, "fcmp_uno", OverloadedBuiltinKind::Float)
#undef BUILTIN_BINARY_PREDICATE


/// GetElementPtr has type (Builtin.RawPointer, T) -> Builtin.RawPointer
#ifndef BUILTIN_GEP_OPERATION
#define BUILTIN_GEP_OPERATION(Id, Name, Overload) BUILTIN(Id, Name)
#endif
                       
BUILTIN_GEP_OPERATION(Gep, "gep", OverloadedBuiltinKind::Integer)
#undef BUILTIN_GEP_OPERATION

/// Load has type (Builtin.RawPointer) -> T
/// FIXME: Is Arithmetic a proper stand in for 'any type?'
#ifndef BUILTIN_LOAD
#define BUILTIN_LOAD(Id, Name, Overload) BUILTIN(Id, Name)
#endif
BUILTIN_LOAD(Load, "load", OverloadedBuiltinKind::Arithmetic)
#undef BUILTIN_LOAD

/// Store has type (T, Builtin.RawPointer) -> ()
/// FIXME: Is Arithmetic a proper stand in for 'any type?'
#ifndef BUILTIN_STORE
#define BUILTIN_STORE(Id, Name, Overload) BUILTIN(Id, Name)
#endif
BUILTIN_STORE(Store, "store", OverloadedBuiltinKind::Arithmetic)
#undef BUILTIN_STORE

#undef BUILTIN
