//===- Diagnostics.def - Diagnostics Text -----------------------*- C++ -*-===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2015 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See http://swift.org/LICENSE.txt for license information
// See http://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//
//
//  This file defines all of the diagnostics that can be emitted by
//  Swift. Each diagnostic is described using one of three
//  kinds--error, warning, or note--along with a unique identifier, category, 
//  options, and text, and is followed by a signature describing the diagnostic
//  argument kinds, e.g., string, identifier, string
//
//===----------------------------------------------------------------------===//

#if !(defined(DIAG) || (defined(ERROR) && defined(WARNING) && defined(NOTE)))
#  error Must define either DIAG or the set {ERROR,WARNING,NOTE}
#endif

#ifndef ERROR
#  define ERROR(ID,Category,Options,Text,Signature)   \
  DIAG(ERROR,ID,Category,Options,Text,Signature)
#endif

#ifndef WARNING
#  define WARNING(ID,Category,Options,Text,Signature) \
  DIAG(WARNING,ID,Category,Options,Text,Signature)
#endif

#ifndef NOTE
#  define NOTE(ID,Category,Options,Text,Signature) \
  DIAG(NOTE,ID,Category,Options,Text,Signature)
#endif

//==============================================================================
// Lexing and Parsing diagnostics
//==============================================================================

ERROR(invalid_diagnostic,parsing,none,
      "INTERNAL ERROR: this diagnostic should not be produced", ())

ERROR(not_implemented,TODO,none,
      "INTERNAL ERROR: feature not implemented", ())

NOTE(opening_brace,parsing,none,
     "to match this opening '{'", ())
NOTE(opening_bracket,parsing,none,
     "to match this opening '['", ())
NOTE(opening_paren,parsing,none,
     "to match this opening '('", ())
NOTE(opening_angle,parsing,none,
     "to match this opening '<'", ())
NOTE(previous_decldef,parsing,none,
     "previous %select{declaration|definition}0 of %1 is here", 
     (bool, Identifier))
NOTE(previous_declaration,parsing,none,
     "previous declaration of %0 is here", (Identifier))
NOTE(previous_definition,parsing,none,
     "previous definition of %0 is here", (Identifier))

ERROR(extra_rbrace,parsing,none,
      "extraneous '}' at top level", ())
      
//------------------------------------------------------------------------------
// Lexer diagnostics
//------------------------------------------------------------------------------

WARNING(lex_nul_character,lexing,none,
        "nul character embedded in middle of file", ())
WARNING(lex_missing_newline_eof,lexing,none,
        "missing newline at end of file", ())

ERROR(lex_hashbang_not_allowed,lexing,none,
      "hashbang line is allowed only in the main file", ())

ERROR(lex_unprintable_ascii_character,lexing,none,
      "unprintable ASCII character found in source file", ())
ERROR(lex_invalid_utf8_character,lexing,none,
      "invalid UTF8-encoded character found in source file", ())

ERROR(lex_unterminated_block_comment,lexing,none,
      "unterminated '/*' comment", ())
NOTE(lex_comment_start,lexing,none,
     "comment started here", ())

ERROR(lex_invalid_multi_code_point_character_literal,lexing,none,
      "invalid multiple-code-point character literal", ())
ERROR(lex_unterminated_character_literal,lexing,none,
      "unterminated character literal", ())
ERROR(lex_invalid_character_literal,lexing,none,
      "invalid character literal", ())

ERROR(lex_unterminated_string,lexing,none,
      "unterminated string literal", ())
ERROR(lex_unexpected_quote_string_interpolation,lexing,none,
      "unexpected '\"' character in string interpolation", ())
ERROR(lex_invalid_escape,lexing,none,
       "invalid escape sequence in literal", ())
ERROR(lex_invalid_x_escape,lexing,none,
       "\\x escape sequence expects 2 hex digits to follow it", ())
ERROR(lex_invalid_u_escape,lexing,none,
       "\\u escape sequence expects 4 hex digits to follow it", ())
ERROR(lex_invalid_U_escape,lexing,none,
       "\\U escape sequence expects 8 hex digits to follow it", ())
ERROR(lex_invalid_unicode_code_point,lexing,none,
       "invalid unicode code point", ())
ERROR(lex_invalid_hex_escape,lexing,none,
       "invalid hex escape, use \\u00XX for values over \\x7F", ())


ERROR(lex_invalid_character,lexing,none,
       "invalid character in source file", ())
ERROR(lex_invalid_identifier_start_character,lexing,none,
       "an identifier cannot begin with this character", ())
ERROR(lex_expected_digit_in_fp_exponent,lexing,none,
       "expected a digit in floating point exponent", ())
ERROR(lex_expected_digit_in_int_literal,lexing,none,
       "expected a digit after integer literal prefix", ())
ERROR(lex_expected_binary_exponent_in_hex_float_literal,lexing,none,
      "hexadecimal floating point literal must end with an exponent", ())
ERROR(lex_unexpected_block_comment_end,lexing,none,
      "unexpected end of block comment", ())
ERROR(lex_unary_equal_is_reserved,lexing,none,
      "prefix/postfix '=' is reserved", ())
ERROR(lex_unary_postfix_dot_is_reserved,lexing,none,
      "postfix '.' is reserved", ())
ERROR(lex_unexpected_long_period_series,lexing,none,
      "unexpected long series of '.'", ())


//------------------------------------------------------------------------------
// Declaration parsing diagnostics
//------------------------------------------------------------------------------

ERROR(bad_module_name,decl_parsing,none,
      "module name \"%0\" is not a valid identifier"
      "%select{|; use -module-name flag to specify an alternate name}1",
      (StringRef, bool))

ERROR(declaration_same_line_without_semi,decl_parsing,none,
      "consecutive declarations on a line must be separated by ';'", ())

ERROR(expected_decl,decl_parsing,none,
      "expected declaration", ())
ERROR(expected_identifier_in_decl,decl_parsing,none,
      "expected identifier in %0 declaration", (StringRef))
ERROR(expected_identifier_after_case_comma,decl_parsing,none,
      "expected identifier after comma in enum 'case' declaration", ())
ERROR(decl_redefinition,decl_parsing,none,
      "%select{declaration|definition}0 conflicts with previous value", 
      (bool))
ERROR(disallowed_stored_var_decl,decl_parsing,none,
      "'var' declarations without getter/setter not allowed here", ())
ERROR(disallowed_computed_var_decl,decl_parsing,none,
      "'var' declarations with getter/setter not allowed here", ())
ERROR(disallowed_var_multiple_getset,decl_parsing,none,
      "'var' declarations with multiple variables cannot have explicit getters/setters", ())
ERROR(disallowed_func_def,decl_parsing,none,
      "function body not allowed here", ())
ERROR(disallowed_type,decl_parsing,none,
      "type not allowed here", ())
ERROR(disallowed_init,decl_parsing,none,
      "initial value is not allowed here", ())
ERROR(var_init_self_referential,expr_parsing,none,
      "variable used within its own initial value", ())
ERROR(disallowed_enum_element,decl_parsing,none,
      "enum 'case' is not allowed outside of an enum", ())
ERROR(decl_inner_scope,decl_parsing,none,
      "declaration is only valid at file scope", ())

ERROR(decl_not_static,decl_parsing,none,
      "declaration can not be 'static'", ())

// Var Name
ERROR(unimplemented_static_var,decl_parsing,none,
     "static variables not yet supported in "
     "%select{this context|generic types|classes|protocols}0", (unsigned))

// Variable getters/setters
ERROR(getset_missing_type,decl_parsing,none,
      "variable with getter/setter must have an explicit type", ())
ERROR(getset_nontrivial_pattern,decl_parsing,none,
      "getter/setter can only be defined for a single variable", ())
ERROR(expected_rbrace_in_getset,decl_parsing,none,
      "expected '}' at end of variable get/set clause", ())
ERROR(duplicate_getset,decl_parsing,none,
      "duplicate definition of %select{getter|setter}0",
      (bool))
NOTE(previous_getset,decl_parsing,none,
     "previous definition of %select{getter|setter}0 is here", (bool))
ERROR(expected_colon_get,decl_parsing,none,
      "expected ':' to start getter definition", ())
ERROR(expected_setname,decl_parsing,none,
      "expected the name of the setter value",())
ERROR(expected_rparen_setname,decl_parsing,none,
      "expected ')' after setter value name",())
ERROR(expected_colon_set,decl_parsing,none,
      "expected ':' to start setter definition", ())
ERROR(var_set_without_get,decl_parsing,none,
      "variable with a setter must also have a getter", ())
ERROR(getset_init,decl_parsing,none,
      "variable with getter/setter cannot have an initial value", ())
ERROR(getset_cannot_be_implied,decl_parsing,none,
      "variable with implied type cannot have implied getter/setter", ())

// Import
ERROR(decl_expected_module_name,decl_parsing,none,
      "expected module name in import declaration", ())

// Extension
ERROR(expected_lbrace_extension,decl_parsing,PointsToFirstBadToken,
      "expected '{' in extension", ())
ERROR(expected_rbrace_extension,decl_parsing,none,
      "expected '}' at end of extension", ())
ERROR(expected_ident_type_in_extension,decl_parsing,none,
      "non-nominal type %0 cannot be extended", (TypeLoc))

// TypeAlias
ERROR(expected_equal_in_typealias,decl_parsing,PointsToFirstBadToken,
      "expected '=' in typealias declaration", ())
ERROR(expected_type_in_typealias,decl_parsing,PointsToFirstBadToken,
      "expected type in typealias declaration", ())
ERROR(associated_type_def,decl_parsing,none,
      "typealias %0 in protocol cannot have a definition", (Identifier))

// Func
ERROR(func_decl_nonglobal_operator,decl_parsing,none,
      "operators are only allowed at global scope", ())
ERROR(func_decl_without_brace,decl_parsing,PointsToFirstBadToken,
      "expected '{' in body of function declaration", ())
ERROR(func_decl_without_paren,decl_parsing,PointsToFirstBadToken,
      "expected '(' in argument list of function declaration", ())
ERROR(static_func_decl_global_scope,decl_parsing,none,
      "'static' functions may only be declared on a type", ())
ERROR(func_selector_without_paren,decl_parsing,PointsToFirstBadToken,
      "expected '(' after identifier in argument list of selector-style function declaration", ())
ERROR(func_selector_with_not_one_argument,decl_parsing,none,
      "selector-style function arguments may only be used with one-argument patterns", ())
ERROR(func_selector_with_curry,decl_parsing,none,
      "funcs with selector-style arguments may not be curried", ())
ERROR(func_decl_expected_arrow,decl_parsing,none,
      "expected '->' after function parameter tuple", ())

// Enum
ERROR(expected_lbrace_enum,decl_parsing,PointsToFirstBadToken,
      "expected '{' in enum", ())
ERROR(expected_rbrace_enum,decl_parsing,none,
      "expected '}' at end of enum", ())

// Struct
ERROR(expected_lbrace_struct,decl_parsing,PointsToFirstBadToken,
      "expected '{' in struct", ())
ERROR(expected_rbrace_struct,decl_parsing,none,
      "expected '}' in struct", ())

// Class
ERROR(expected_lbrace_class,decl_parsing,PointsToFirstBadToken,
      "expected '{' in class", ())
ERROR(expected_rbrace_class,decl_parsing,none,
      "expected '}' in class", ())

// Protocol
ERROR(expected_lbrace_protocol,decl_parsing,PointsToFirstBadToken,
      "expected '{' in protocol type", ())
ERROR(expected_rbrace_protocol,decl_parsing,none,
      "expected '}' in protocol", ())

// Subscripting
ERROR(subscript_decl_wrong_scope,decl_parsing,none,
      "'subscript' functions may only be declared within a type", ())
ERROR(expected_lparen_subscript,decl_parsing,PointsToFirstBadToken,
      "expected '(' for subscript parameters", ())
ERROR(expected_arrow_subscript,decl_parsing,PointsToFirstBadToken,
      "expected '->' for subscript element type", ())
ERROR(expected_type_subscript,type_parsing,PointsToFirstBadToken,
      "expected subscripting element type", ())
ERROR(expected_lbrace_subscript,decl_parsing,PointsToFirstBadToken,
      "expected '{' for subscripting", ())
ERROR(subscript_without_get,decl_parsing,none,
      "subscripting must have a getter", ())
ERROR(subscript_static,decl_parsing,none,
     "subscript can not be 'static'", ())

// initializer
ERROR(initializer_decl_wrong_scope,decl_parsing,none,
      "initializers may only be declared within a class, struct, or enum", ())
ERROR(expected_lparen_initializer,decl_parsing,PointsToFirstBadToken,
      "expected '(' or parameter name for initializer parameters", ())
ERROR(expected_lbrace_initializer,decl_parsing,PointsToFirstBadToken,
      "expected '{' for initializer", ())

// Destructor
ERROR(destructor_decl_outside_class,decl_parsing,none,
      "'destructor' functions may only be declared within a class", ())
ERROR(expected_lparen_destructor,decl_parsing,none,
      "expected an empty parameter list for destructor", ())
ERROR(destructor_parameter_nonempty_tuple,decl_parsing,none,
      "destructors don't have parameters", ())
ERROR(expected_lbrace_destructor,decl_parsing,PointsToFirstBadToken,
      "expected '{' for destructor", ())

// Operator
ERROR(operator_decl_inner_scope,decl_parsing,none,
      "'operator' may only be declared at file scope", ())
ERROR(expected_operator_name_after_operator,decl_parsing,PointsToFirstBadToken,
      "expected operator name after fixity in 'operator' declaration", ())
ERROR(expected_lbrace_after_operator,decl_parsing,PointsToFirstBadToken,
      "expected '{' after operator name in 'operator' declaration", ())
ERROR(expected_operator_attribute,decl_parsing,none,
      "expected operator attribute identifier in 'operator' declaration body", ())
ERROR(unknown_prefix_operator_attribute,decl_parsing,none,
      "'%0' is not a valid prefix operator attribute", (StringRef))
ERROR(unknown_postfix_operator_attribute,decl_parsing,none,
      "'%0' is not a valid postfix operator attribute", (StringRef))
ERROR(unknown_infix_operator_attribute,decl_parsing,none,
      "'%0' is not a valid infix operator attribute", (StringRef))
ERROR(operator_associativity_redeclared,decl_parsing,none,
      "'associativity' for infix operator declared multiple times", ())
ERROR(expected_infix_operator_associativity,decl_parsing,none,
      "expected identifier after 'associativity' in 'operator' declaration body", ())
ERROR(unknown_infix_operator_associativity,decl_parsing,none,
      "'%0' is not a valid infix operator associativity; must be 'none', 'left', or 'right'", (StringRef))
ERROR(operator_precedence_redeclared,decl_parsing,none,
      "'precedence' for infix operator declared multiple times", ())
ERROR(expected_infix_operator_precedence,decl_parsing,none,
      "expected integer literal after 'precedence' in 'operator' declaration body", ())
ERROR(invalid_infix_operator_precedence,decl_parsing,none,
      "'precedence' must be in the range of 0 to 255", ())

// SIL
ERROR(only_allowed_in_sil, decl_parsing,none,
      "'%0' only allowed in SIL modules", (StringRef))
ERROR(expected_sil_type, decl_parsing,none,
      "expected type in SIL code", ())
ERROR(expected_sil_colon_value_ref,decl_parsing,none,
      "expected ':' before type in SIL value reference", ())
ERROR(expected_sil_value_name,decl_parsing,none,
      "expected SIL value name", ())
ERROR(expected_sil_value_name_result_number,decl_parsing,none,
      "expected result number in SIL value name", ())
ERROR(invalid_sil_value_name_result_number,decl_parsing,none,
      "invalid result number in SIL value", ())
ERROR(expected_sil_type_kind, decl_parsing,none,
      "expected SIL type to %0", (StringRef))
ERROR(expected_sil_constant, decl_parsing,none,
      "expected constant in SIL code", ())
ERROR(sil_local_storage_non_address, decl_parsing,none,
      "can only work with the address of local storage", ())
ERROR(sil_local_storage_nested, decl_parsing,none,
      "local storage types cannot be in nested positions", ())
ERROR(sil_self_non_protocol, decl_parsing,none,
      "@sil_self cannot be applied to non-protocol type %0", (Type))

// SIL Values
ERROR(sil_value_redefinition, decl_parsing,none,
      "redefinition of value '%0'", (StringRef))
ERROR(sil_value_use_type_mismatch, decl_parsing,none,
      "value '%0' defined with mismatching type %1", (StringRef, Type))
ERROR(sil_value_def_type_mismatch, decl_parsing,none,
      "value '%0' used with mismatching type %1", (StringRef, Type))
ERROR(sil_use_of_undefined_value, decl_parsing,none,
      "use of undefined value '%0'", (StringRef))
NOTE(sil_prior_reference,parsing,none,
     "prior reference was here", ())


// SIL Instructions
ERROR(expected_sil_instr_start_of_line,decl_parsing,none,
      "SIL instructions must be at the start of a line", ())
ERROR(expected_equal_in_sil_instr,decl_parsing,none,
      "expected '=' in SIL instruction", ())
ERROR(expected_sil_instr_opcode,decl_parsing,none,
      "expected SIL instruction opcode", ())
ERROR(expected_tok_in_sil_instr,decl_parsing,none,
      "expected '%0' in SIL instruction", (StringRef))
ERROR(expected_tuple_type_in_tuple,decl_parsing,none,
      "tuple instruction requires a tuple type", ())
ERROR(sil_tuple_inst_wrong_value_count,decl_parsing,none,
      "tuple instruction requires %0 values", (unsigned))
ERROR(sil_tuple_inst_wrong_field,decl_parsing,none,
      "tuple instruction requires a field number", ())
ERROR(sil_struct_inst_wrong_field,decl_parsing,none,
      "struct instruction requires a field name", ())
ERROR(sil_ref_inst_wrong_field,decl_parsing,none,
      "ref_element_addr instruction requires a field name", ())
ERROR(sil_invalid_instr_operands,decl_parsing,none,
      "invalid instruction operands", ())
ERROR(sil_operand_not_address,decl_parsing,none,
      "%0 operand of '%1' must have address type", (StringRef, StringRef))
ERROR(sil_operand_not_weak_address,decl_parsing,none,
      "%0 operand of '%1' must have address of [weak] type",
      (StringRef, StringRef))
ERROR(sil_integer_literal_not_integer_type,decl_parsing,none,
      "integer_literal instruction requires a 'Builtin.Int<n>' type", ())
ERROR(sil_float_literal_not_float_type,decl_parsing,none,
      "float_literal instruction requires a 'Builtin.FP<n>' type", ())
ERROR(sil_apply_archetype_not_found,decl_parsing,none,
      "archetype name not found in polymorphic function type of apply instruction", ())
ERROR(sil_substitutions_on_non_polymorphic_type,decl_parsing,none,
      "apply of non-polymorphic function cannot have substitutions", ())
ERROR(sil_archetype_method_not_protocol,decl_parsing,none,
      "archetype_method is not a protocol method", ())
ERROR(sil_archetype_method_type_does_not_conform,decl_parsing,none,
      "archetype_method type does not conform to protocol", ())

// SIL Basic Blocks
ERROR(expected_sil_block_name, decl_parsing,none,
      "expected basic block name or '}'", ())
ERROR(expected_sil_block_colon, decl_parsing,none,
      "expected ':' after basic block name", ())
ERROR(sil_undefined_basicblock_use, decl_parsing,none,
      "use of undefined basic block %0", (Identifier))
ERROR(sil_basicblock_redefinition, decl_parsing,none,
      "redefinition of basic block %0", (Identifier))
ERROR(sil_basicblock_arg_rparen, decl_parsing,none,
      "expected ')' in basic block argument list", ())

// SIL Functions
ERROR(expected_sil_linkage_or_function, decl_parsing,none,
      "expected SIL linkage type or function name", ())
ERROR(expected_sil_function_name, decl_parsing,none,
      "expected SIL function name", ())
ERROR(expected_sil_rbrace, decl_parsing,none,
      "expected '}' at the end of a sil body", ())
ERROR(expected_sil_function_type, decl_parsing, none,
      "sil function expected to have SIL function type", ())

// SIL Stage
ERROR(expected_sil_stage_name, decl_parsing, none,
      "expected 'raw' or 'canonical' after 'sil_stage'", ())
ERROR(multiple_sil_stage_decls, decl_parsing, none,
      "sil_stage declared multiple times", ())

// SIL VTable
ERROR(expected_sil_vtable_colon, decl_parsing,none,
      "expected ':' in a vtable entry", ())
ERROR(sil_vtable_func_not_found, decl_parsing,none,
      "sil function not found %0", (Identifier))
ERROR(sil_vtable_class_not_found, decl_parsing,none,
      "sil class not found %0", (Identifier))

// SIL Global
ERROR(sil_global_variable_not_found, decl_parsing,none,
      "sil global not found %0", (Identifier))

//------------------------------------------------------------------------------
// Type parsing diagnostics
//------------------------------------------------------------------------------

ERROR(expected_type,type_parsing,PointsToFirstBadToken,
      "expected type", ())
ERROR(expected_init_value,expr_parsing,PointsToFirstBadToken,
      "expected initial value after '='", ())
ERROR(attribute_does_not_apply_to_type,type_parsing,none,
      "attribute does not apply to type", ())

// Named types
ERROR(expected_identifier_in_dotted_type,expr_parsing,PointsToFirstBadToken,
      "expected identifier in dotted type", ())
ERROR(expected_identifier_for_type,expr_parsing,PointsToFirstBadToken,
      "expected identifier for type name", ())
ERROR(expected_rangle_generic_arg_list,type_parsing,PointsToFirstBadToken,
      "expected '>' to complete generic argument list", ())


// Function types
ERROR(expected_type_function_result,type_parsing,PointsToFirstBadToken,
      "expected type for function result", ())
ERROR(generic_non_function,type_parsing,PointsToFirstBadToken,
      "only syntactic function types can be generic", ())
ERROR(first_class_generic_function,type_parsing,PointsToFirstBadToken,
      "generic types cannot be used as first-class types", ())
ERROR(sil_function_repeat_convention,type_parsing,PointsToFirstBadToken,
      "repeated %select{parameter|result|callee}0 convention attribute",
      (unsigned))
ERROR(sil_function_ellipsis,type_parsing,PointsToFirstBadToken,
      "SIL function types cannot be variadic", ())
ERROR(sil_function_label,type_parsing,PointsToFirstBadToken,
      "SIL function types cannot have labeled inputs", ())

// Enum Types
ERROR(expected_expr_enum_case_raw_value,type_parsing,PointsToFirstBadToken,
      "expected expression after '=' in 'case'", ())
ERROR(nonliteral_enum_case_raw_value,type_parsing,PointsToFirstBadToken,
      "raw value for enum case must be an integer, float, character, or string literal", ())

// Array Types
ERROR(expected_expr_array_type,expr_parsing,PointsToFirstBadToken,
      "expected expression for size of array type", ())
ERROR(non_constant_array,type_parsing,none,
      "array has non-constant size", ())
ERROR(expected_rbracket_array_type,type_parsing,PointsToFirstBadToken,
      "expected ']' in array type", ())
ERROR(unsupported_fixed_length_array,type_parsing,none,
      "fixed-length arrays are not yet supported", ())
      
// Tuple Types
ERROR(expected_rparen_tuple_type_list,type_parsing,none,
      "expected ')' at end of tuple list", ())
ERROR(empty_tuple_ellipsis,type_parsing,none,
      "varargs used in tuple type with no fields", ())
ERROR(tuple_ellipsis_init,type_parsing,none,
      "varargs used with tuple field with default value", ())
ERROR(unexpected_ellipsis_in_tuple,type_parsing,none,
      "unexpected '...' before the end of a tuple list", ())
ERROR(tuple_type_init,pattern_parsing,none,
      "default argument not permitted in a tuple type", ())

// Protocol Types
ERROR(expected_langle_protocol,type_parsing,PointsToFirstBadToken,
      "expected '<' in protocol composition type", ())
ERROR(expected_rangle_protocol,type_parsing,PointsToFirstBadToken,
      "expected '>' to complete protocol composition type", ())

// Optional Types
ERROR(unsupported_unparenthesized_array_optional,type_parsing,none,
      "optional array type requires parentheses", ())

//------------------------------------------------------------------------------
// Pattern parsing diagnostics
//------------------------------------------------------------------------------

ERROR(expected_pattern,pattern_parsing,none,
      "expected pattern", ())
ERROR(expected_pattern_is_keyword,pattern_parsing,none,
      "keyword '%0' cannot be used as an identifier", (StringRef))
ERROR(expected_rparen_tuple_pattern_list,pattern_parsing,none,
      "expected ')' at end of tuple pattern", ())
ERROR(untyped_pattern_ellipsis,pattern_parsing,none,
      "'...' cannot be applied to a subpattern which is not explicitly typed", ())
ERROR(ellipsis_pattern_not_at_end,pattern_parsing,none,
      "variadic arguments '...' must come at the end of the pattern", ())
ERROR(non_func_decl_pattern_init,pattern_parsing,none,
      "default argument is only permitted for a non-curried function parameter",())
ERROR(var_pattern_in_var,pattern_parsing,none,
      "'var' cannot appear nested inside another 'var' pattern", ())
ERROR(nominal_type_subpattern_without_property_name,pattern_parsing,none,
      "subpattern of a struct or class pattern must have a keyword name", ())

//------------------------------------------------------------------------------
// Statement parsing diagnostics
//------------------------------------------------------------------------------
ERROR(expected_stmt,stmt_parsing,none,
      "expected statement", ())
ERROR(illegal_top_level_stmt,stmt_parsing,none,
      "statements are not allowed at the top level", ())
ERROR(illegal_top_level_expr,stmt_parsing,none,
      "expressions are not allowed at the top level", ())
ERROR(illegal_semi_stmt,stmt_parsing,none,
      "';' statements are not allowed", ())
ERROR(statement_same_line_without_semi,stmt_parsing,none,
      "consecutive statements on a line must be separated by ';'", ())
ERROR(brace_stmt_invalid,stmt_parsing,none,
      "braced block of statements is an unused closure", ())


// Assignment statement
ERROR(expected_expr_assignment,stmt_parsing,none,
      "expected expression in assignment", ())

// Brace Statement
ERROR(expected_rbrace_in_brace_stmt,stmt_parsing,none,
      "expected '}' at end of brace statement", ())

// Return Statement
ERROR(expected_expr_return,stmt_parsing,PointsToFirstBadToken,
      "expected expression in 'return' statement", ())

// If Statement
ERROR(expected_expr_if,stmt_parsing,PointsToFirstBadToken,
      "expected expression in 'if' condition", ())
ERROR(missing_condition_after_if,stmt_parsing,none,
      "missing condition in an 'if' statement", ())
ERROR(expected_lbrace_after_if,stmt_parsing,PointsToFirstBadToken,
      "expected '{' after 'if' condition", ())
ERROR(expected_lbrace_after_else,stmt_parsing,PointsToFirstBadToken,
      "expected '{' after 'else'", ())

// While Statement
ERROR(expected_expr_while,stmt_parsing,PointsToFirstBadToken,
      "expected expression in 'while' condition", ())
ERROR(missing_condition_after_while,stmt_parsing,none,
      "missing condition in a 'while' statement", ())
ERROR(expected_lbrace_after_while,stmt_parsing,PointsToFirstBadToken,
      "expected '{' after 'while' condition", ())

// Do/While Statement
ERROR(expected_lbrace_after_do,stmt_parsing,PointsToFirstBadToken,
      "expected '{' after 'do'", ())
ERROR(expected_while_in_dowhile,stmt_parsing,PointsToFirstBadToken,
      "expected 'while' in 'do-while' loop", ())
ERROR(expected_expr_do_while,stmt_parsing,PointsToFirstBadToken,
      "expected expression in 'do-while' condition", ())

// C-Style For Stmt
ERROR(expected_init_for_stmt,stmt_parsing,PointsToFirstBadToken,
      "expected initialization in a 'for' statement", ())
ERROR(missing_init_for_stmt,stmt_parsing,none,
      "missing initialization in a 'for' statement", ())
ERROR(expected_semi_for_stmt,stmt_parsing,PointsToFirstBadToken,
      "expected ';' in 'for' statement", ())
ERROR(expected_cond_for_stmt,stmt_parsing,none,
      "expected condition in 'for' statement", ())
ERROR(expected_rparen_for_stmt,stmt_parsing,none,
      "expected ')' in 'for' statement", ())
ERROR(expected_lbrace_after_for,stmt_parsing,none,
      "expected '{' in 'for' statement", ())

// For-each Stmt
ERROR(expected_foreach_in,stmt_parsing,none,
      "expected 'in' after for-each pattern", ())
ERROR(expected_foreach_container,stmt_parsing,none,
      "expected container expression for for-each loop", ())
ERROR(expected_foreach_lbrace,stmt_parsing,none,
      "expected '{' to start the body of for-each loop", ())

// Switch Stmt
ERROR(expected_switch_expr,stmt_parsing,PointsToFirstBadToken,
      "expected expression in 'switch' statement", ())
ERROR(expected_lbrace_after_switch,stmt_parsing,PointsToFirstBadToken,
      "expected '{' after 'switch' subject expression", ())
ERROR(expected_rbrace_switch,stmt_parsing,none,
      "expected '}' at end of 'switch' statement", ())
ERROR(case_outside_of_switch,stmt_parsing,none,
      "'%0' label can only appear inside a 'switch' statement", (StringRef))
ERROR(stmt_in_switch_not_covered_by_case,stmt_parsing,none,
      "all statements inside a switch must be covered by a 'case' or 'default'",
      ())
ERROR(case_after_default,stmt_parsing,none,
      "additional 'case' blocks cannot appear after the 'default' block of a 'switch'",
      ())
ERROR(empty_switch_stmt,stmt_parsing,none,
      "'switch' statement body must have at least one 'case' or 'default' block",
      ())

// Case Stmt
ERROR(expected_case_where_expr,stmt_parsing,PointsToFirstBadToken,
      "expected expression for 'where' guard of 'case'", ())
ERROR(expected_case_colon,stmt_parsing,PointsToFirstBadToken,
      "expected ':' after '%0'", (StringRef))
ERROR(default_with_other_labels,stmt_parsing,none,
      "'default' cannot appear with other 'case' or 'default' labels over the same block",
      ())
ERROR(default_with_where,stmt_parsing,none,
      "'default' cannot be used with a 'where' guard expression",
      ())
ERROR(var_binding_with_multiple_case_patterns,stmt_parsing,none,
      "'case' labels with multiple patterns cannot declare variables",
      ())

//------------------------------------------------------------------------------
// Expression parsing diagnostics
//------------------------------------------------------------------------------

ERROR(expected_expr,expr_parsing,none,
      "expected expression", ())
ERROR(expected_separator,expr_parsing,none,
      "expected '%0' separator", (StringRef))
ERROR(unexpected_separator,expr_parsing,none,
      "unexpected '%0' separator", (StringRef))

ERROR(expected_expr_after_operator,expr_parsing,none,
      "expected expression after operator", ())
ERROR(expected_expr_after_unary_operator,expr_parsing,none,
      "expected expression after unary operator", ())
ERROR(expected_prefix_operator,expr_parsing,none,
      "unary operator cannot be separated from its operand", ())
ERROR(expected_operator_ref,expr_parsing,none,
      "expected operator name in operator reference", ())
ERROR(invalid_postfix_operator,expr_parsing,none,
      "operator with postfix spacing cannot start a subexpression", ())

ERROR(expected_member_name,expr_parsing,PointsToFirstBadToken,
      "expected member name following '.'", ())
ERROR(expected_dollar_numeric,expr_parsing,none,
      "expected numeric value following '$'", ())
ERROR(dollar_numeric_too_large,expr_parsing,none,
      "numeric value following '$' is too large", ())
ERROR(numeric_literal_numeric_member,expr_parsing,none,
   "expected named member of numeric literal", ())

ERROR(anon_closure_arg_not_in_closure,expr_parsing,none,
      "anonymous closure argument not contained in a closure", ())
ERROR(anon_closure_arg_in_closure_with_args,expr_parsing,none,
      "anonymous closure arguments can not be used inside a closure that has "
      "explicit arguments", ())
ERROR(expected_closure_parameter_name,expr_parsing,none,
      "expected the name of a closure parameter", ())
ERROR(expected_closure_result_type,expr_parsing,none,
      "expected closure result type after '->'", ())
ERROR(expected_closure_in,expr_parsing,none,
   "expected 'in' after the closure signature", ())
ERROR(unexpected_tokens_before_closure_in,expr_parsing,none,
   "unexpected tokens prior to 'in'", ())
ERROR(expected_closure_rbrace,expr_parsing,none,
      "expected '}' at end of closure", ())

ERROR(expected_identifier_after_dot_expr,expr_parsing,none,
      "expected identifier after '.' expression", ())
ERROR(expected_field_spec_name_tuple_expr,expr_parsing,none,
      "expected field specifier name in tuple expression", ())

ERROR(expected_identifier_after_super_dot_expr,expr_parsing,
      PointsToFirstBadToken,
      "expected identifier or 'init' after super '.' expression", ())
ERROR(expected_dot_or_subscript_after_super,expr_parsing,PointsToFirstBadToken,
      "expected '.' or '[' after 'super'", ())
ERROR(super_initializer_not_in_initializer,expr_parsing,none,
      "'super.init' cannot be called outside of an initializer", ())
ERROR(super_initializer_must_be_called,expr_parsing,none,
      "'super.init' cannot be referenced without arguments", ())

// New expressions
ERROR(array_new_missing_first_bound,expr_parsing,none,
      "must specify length of array to allocate", ())
ERROR(expected_expr_new_array_bound,expr_parsing,none,
      "expected expression for new array bound", ())
ERROR(expected_bracket_array_new,expr_parsing,none,
      "expected ']' in new expression", ())

// Tuples and parenthesized expressions
ERROR(expected_expr_in_expr_list,expr_parsing,none,
      "expected expression in list of expressions", ())
ERROR(expected_expr_in_collection_literal,expr_parsing,none,
      "expected expression in container literal", ())
ERROR(expected_key_in_dictionary_literal,expr_parsing,none,
      "expected key expression in dictionary literal", ())
ERROR(expected_value_in_dictionary_literal,expr_parsing,none,
      "expected value in dictionary literal", ())
ERROR(expected_colon_in_dictionary_literal,expr_parsing,none,
      "expected ':' in dictionary literal", ())
ERROR(expected_rparen_expr_list,expr_parsing,none,
      "expected ')' in expression list", ())
ERROR(expected_rsquare_expr_list,expr_parsing,none,
      "expected ']' in expression list", ())

ERROR(missing_protocol,sema_tce,none,
      "missing protocol %0", (Identifier))
      
ERROR(builtin_integer_literal_broken_proto,sema_tce,none,
      "protocol 'BuiltinIntegerLiteralConvertible' is broken", ())
ERROR(integer_literal_broken_proto,sema_tce,none,
      "protocol 'IntegerLiteralConvertible' is broken", ())

ERROR(builtin_float_literal_broken_proto,sema_tce,none,
      "protocol 'BuiltinFloatLiteralConvertible' is broken", ())
ERROR(float_literal_broken_proto,sema_tce,none,
      "protocol 'FloatLiteralConvertible' is broken", ())

ERROR(builtin_character_literal_broken_proto,sema_tce,none,
      "protocol 'BuiltinCharacterLiteralConvertible' is broken", ())
ERROR(character_literal_broken_proto,sema_tce,none,
      "protocol 'CharacterLiteralConvertible' is broken", ())

ERROR(builtin_string_literal_broken_proto,sema_tce,none,
      "protocol 'BuiltinStringLiteralConvertible' is broken", ())
ERROR(string_literal_broken_proto,sema_tce,none,
      "protocol 'StringLiteralConvertible' is broken", ())

// Array literal expressions
ERROR(expected_rsquare_array_expr,expr_parsing,none,
      "expected ']' in container literal expression", ())

// If expressions
ERROR(expected_expr_after_if_question,expr_parsing,none,
      "expected expression after '?' in ternary expression", ())
ERROR(expected_colon_after_if_question,expr_parsing,none,
      "expected ':' after '? ...' in ternary expression", ())
ERROR(expected_expr_after_if_colon,expr_parsing,none,
      "expected expression after '? ... :' in ternary expression", ())

// Cast expressions
ERROR(expected_type_after_is,expr_parsing,none,
      "expected type after 'is'", ())
ERROR(expected_type_after_as,expr_parsing,none,
      "expected type after 'as'", ())
ERROR(bool_type_broken,expr_parsing,none,
      "could not find a Bool type defined for 'is'", ())

// Generic disambiguation
NOTE(while_parsing_as_left_angle_bracket,expr_parsing,none,
     "while parsing this '<' as a type parameter bracket", ())
NOTE(while_parsing_as_less_operator,expr_parsing,none,
     "while parsing this '<' as an operator", ())

//------------------------------------------------------------------------------
// Literal parsing diagnostics
//------------------------------------------------------------------------------

NOTE(while_converting_literal,sema,none,
     "while converting literal to %0", (Type))
NOTE(while_processing_literal_conversion_function,sema,none,
     "while processing argument of conversion function to inferred type %0",
      (Type))

//------------------------------------------------------------------------------
// Attribute-parsing diagnostics
//------------------------------------------------------------------------------
ERROR(expected_attribute_name,attribute_parsing,none,
      "expected an attribute name", ())
ERROR(unknown_attribute,attribute_parsing,none,
      "unknown attribute '%0'", (StringRef))
ERROR(duplicate_attribute,attribute_parsing,none,
      "duplicate attribute", ())
ERROR(cannot_combine_attribute,attribute_parsing,none,
      "attribute '%0' cannot be combined with this attribute", (StringRef))
ERROR(expected_in_attribute_list,attribute_parsing,none,
      "expected ']' or ',' in attribute list", ())

ERROR(expected_decl_attribute_not_type,attribute_parsing,none,
      "expected declaration attribute, not a type attribute", ())
ERROR(expected_type_attribute_not_decl,attribute_parsing,none,
      "expected type attribute, not a declaration attribute", ())

ERROR(import_attributes,attribute_parsing,none,
      "invalid attributes specified for import", ())
ERROR(typealias_attributes,attribute_parsing,none,
      "invalid attributes specified for typealias", ())
ERROR(operator_attributes,attribute_parsing,none,
      "invalid attributes specified for operator", ())

// auto_closure
ERROR(attribute_requires_function_type,attribute_parsing,none,
      "attribute only applies to syntactic function types", ())
ERROR(autoclosure_function_input_nonunit,attribute_parsing,none,
      "auto_closure argument type must be '()'", ())

// asmname
ERROR(asmname_expected_equals,attribute_parsing,none,
      "expected '=' in asmname attribute", ())
ERROR(asmname_expected_string_literal,attribute_parsing,none,
      "expected string literal in asmname attribute", ())
ERROR(asmname_interpolated_string,attribute_parsing,none,
      "asmname cannot be an interpolated string literal", ())

// cc
ERROR(cc_attribute_expected_lparen,attribute_parsing,none,
      "expected '(' after 'cc' attribute", ())
ERROR(cc_attribute_expected_name,attribute_parsing,none,
      "expected calling convention name identifier in 'cc' attribute", ())
ERROR(cc_attribute_unknown_cc_name,attribute_parsing,none,
      "unknown calling convention name '%0' for 'cc' attribute", (StringRef))
ERROR(cc_attribute_expected_rparen,attribute_parsing,none,
      "expected ')' after calling convention name for 'cc' attribute", ())

// ownership
ERROR(invalid_ownership_decl,attribute_parsing,none,
      "'%select{strong|weak|unowned}0' attribute only applies to 'var' "
      "declarations", (unsigned))
ERROR(invalid_ownership_type,attribute_parsing,none,
      "'%select{strong|weak|unowned}0' attribute cannot be applied to "
      "non-class type %1", (unsigned, Type))
ERROR(invalid_ownership_opaque_type,attribute_parsing,none,
      "'%select{strong|weak|unowned}0' attribute cannot be applied to "
      "non-class type %1; consider adding a class bound", (unsigned, Type))
ERROR(invalid_weak_ownership_not_optional,attribute_parsing,none,
      "'weak' variable should have Optional type %0", (Type))

//------------------------------------------------------------------------------
// Generics parsing diagnostics
//------------------------------------------------------------------------------
ERROR(expected_rangle_generics_param,parsing,PointsToFirstBadToken,
      "expected '>' to complete generic parameter list", ())
ERROR(expected_generics_parameter_name,parsing,PointsToFirstBadToken,
      "expected an identifier to name generic parameter", ())
ERROR(expected_generics_type_restriction,parsing,none,
      "expected a type name or protocol composition restricting %0",
      (Identifier))
ERROR(requires_single_equal,parsing,none,
      "use '==' for same-type requirements rather than '='", ())
ERROR(expected_requirement_delim,parsing,none,
      "expected ':' or '==' to indicate a conformance or same-type requirement",
      ())

//==============================================================================
// Semantic Analysis Diagnostics
//==============================================================================

NOTE(type_declared_here,sema,none,
     "type declared here", ())
NOTE(decl_declared_here,sema,none,
     "%0 declared here", (Identifier))

NOTE(while_converting_default_tuple_value,sema,none,
     "while converting default tuple value to element type %0", (Type))
NOTE(while_converting_function_argument,sema,none,
     "while converting function argument to expected type %0", (Type))
NOTE(while_converting_subscript_index,sema,none,
     "while converting subscript index to expected type %0", (Type))

ERROR(constraint_type_check_fail,sema,none,
      "expression does not type-check", ())

//------------------------------------------------------------------------------
// Name Binding
//------------------------------------------------------------------------------

ERROR(sema_no_import,sema_nb,none,
      "no such module '%0'", (StringRef))
ERROR(sema_no_import_submodule,sema_nb,none,
      "no such module", ())
ERROR(sema_opening_import,sema_nb,none,
      "opening import file '%0.swift': %1", (StringRef, StringRef))

ERROR(serialization_malformed_module,sema,none,
      "malformed module file", ())
ERROR(serialization_module_too_new,sema,none,
      "module file was created by a newer version of the compiler", ())
ERROR(serialization_missing_single_dependency,sema,none,
      "missing required module '%0'", (StringRef))
ERROR(serialization_missing_dependencies,sema,none,
      "missing required modules: %0", (StringRef))

ERROR(unknown_name_in_type,sema_nb,none,
      "use of unknown scope %0 in type reference", (Identifier))

ERROR(invalid_redecl,sema_nb,none,"invalid redeclaration",())
NOTE(invalid_redecl_prev,sema_nb,none,
     "%0 previously declared here", (Identifier))

ERROR(ambiguous_type_base,sema_nb,none,
      "%0 is ambiguous for type look up in this context", (Identifier))
ERROR(invalid_member_type,sema_nb,none,
      "%0 is not a member type of %1", (Identifier, Type))
ERROR(ambiguous_member_type,sema_nb,none,
      "ambiguous type name %0 in %1", (Identifier, Type))
ERROR(no_module_type,sema_nb,none,
      "no type named %0 in module %1", (Identifier, Identifier))
ERROR(ambiguous_module_type,sema_nb,none,
      "ambiguous type name %0 in module %1", (Identifier, Identifier))
ERROR(use_nonmatching_operator,sema_nb,none,
      "%0 is not a %select{binary|prefix unary|postfix unary}1 operator",
      (Identifier, unsigned))
ERROR(use_unresolved_identifier,sema_nb,none,
      "use of unresolved identifier %0", (Identifier))
ERROR(use_undeclared_type,sema_nb,none,
      "use of undeclared type %0", (Identifier))
ERROR(use_module_as_type,sema_nb,none,
      "use of module %0 as a type", (Identifier))
ERROR(use_non_type_value,sema_nb,none,
      "%0 is not a type", (Identifier))
NOTE(use_non_type_value_prev,sema_nb,none,
     "%0 declared here", (Identifier))

ERROR(no_decl_in_module,sema_nb,none,
      "no such decl in module", ())
ERROR(imported_decl_is_wrong_kind,sema_nb,none,
      "%0 was imported as '%1', but is a "
      "%select{**MODULE**|type|struct|class|enum|protocol|variable|function}2",
      (Identifier, StringRef, /*ImportKind*/ unsigned))
ERROR(ambiguous_decl_in_module,sema_nb,none,
      "ambiguous name %0 in module %1", (Identifier, Identifier))

// Operator decls
ERROR(ambiguous_operator_decls,sema_nb,none,
      "ambiguous operator declarations found for operator", ())
NOTE(found_this_operator_decl,sema_nb,none,
     "found this matching operator declaration", ())
ERROR(operator_redeclared,sema_nb,none,
      "operator redeclared", ())
NOTE(previous_operator_decl,sema_nb,none,
     "previous operator declaration here", ())
ERROR(declared_operator_without_operator_decl,sema_nb,none,
      "operator implementation without matching operator declaration", ())
ERROR(declared_unary_op_without_attribute,sema_nb,none,
      "unary operator implementation must have a 'prefix' or 'postfix' attribute", ())
ERROR(unary_op_missing_prepos_attribute,sema_nb,none,
      "%select{prefix|postfix}0 unary operator missing "
      "'%select{prefix|postfix}0' attribute", (bool))
NOTE(unary_operator_declaration_here,sema_nb,none,
   "%select{prefix|postfix}0 operator found here", (bool))
ERROR(invalid_arg_count_for_operator,sema_nb,none,
      "operators must have one or two arguments", ())

//------------------------------------------------------------------------------
// Type Check Coercions
//------------------------------------------------------------------------------

ERROR(tuple_conversion_not_expressible,sema_tcc,none,
      "lame: cannot express tuple conversion %0 to %1", (Type, Type))
ERROR(load_of_explicit_lvalue,sema_tcc,none,
      "%0 variable is not being passed by reference", (Type))

//------------------------------------------------------------------------------
// Expression Type Checking Errors
//------------------------------------------------------------------------------
ERROR(invalid_relation,sema_tcc,none,
  "%1 is not %select{identical to|a trivial subtype of|a subtype of|"
  "convertible to|constructible with|identical to}0 %2", (unsigned, Type, Type))
ERROR(invalid_tuple_size,sema_tcc,none,
  "tuple types %0 and %1 have a different number of elements (%2 vs. %3)",
  (Type, Type, unsigned, unsigned))
ERROR(invalid_tuple_element_unused,sema_tcc,none,
  "tuple element of type %0 unused when converting tuple to %1",
  (Type, Type))
ERROR(does_not_have_member,sema_tcc,none,
  "%0 does not have a member named %1",
  (Type, Identifier))
ERROR(isa_is_always_true,sema_tcc,none,
      "'is' test is always true",
      (Type, Type))
ERROR(downcast_to_unrelated,sema_tcc,none,
      "downcast from %0 to unrelated type %1", (Type, Type))
ERROR(downcast_to_non_objc_existential,sema_tcc,none,
      "cannot downcast from %0 to non-@objc protocol type %1",
      (Type, Type))
ERROR(downcast_from_existential_to_unrelated,sema_tcc,none,
      "cannot cast from protocol type %0 to non-conforming type %1",
      (Type, Type))
ERROR(downcast_from_archetype_to_unrelated,sema_tcc,none,
      "cannot cast from type variable %0 to type %1 that does not match "
      "its constraints",
      (Type, Type))
ERROR(downcast_from_concrete_to_unrelated_archetype,sema_tcc,none,
      "cannot cast from concrete type %0 to type variable %1 for which it "
      "does not match constraints",
      (Type, Type))
ERROR(pattern_in_expr,sema_tcc,none,
      "%0 cannot appear in an expression", (PatternKind))
NOTE(note_call_to_operator,sema_tcc,none,
     "in call to operator %0", (Identifier))
NOTE(note_call_to_func,sema_tcc,none,
     "in call to function %0", (Identifier))
NOTE(note_call_to_initializer,sema_tcc,none,
     "in call to initializer", ())
NOTE(note_init_parameter,sema_tcc,none,
     "in initialization of parameter %0", (Identifier))


//------------------------------------------------------------------------------
// Type Check Declarations
//------------------------------------------------------------------------------

ERROR(operator_not_func,sema_tcd,none,
      "operators must be declared with 'func'", ())
ERROR(custom_operator_addressof,sema_tcd,none,
      "cannot declare a custom unary '&' operator", ())
ERROR(custom_operator_postfix_exclaim,sema_tcd,none,
      "cannot declare a custom postfix '!' operator", ())
ERROR(var_type_not_materializable,sema_tcd,none,
      "type %0 of variable is not materializable", (Type))
ERROR(enum_element_not_materializable,sema_tcd,none,
      "type of enum case is not materializable", ())

// Attributes
ERROR(invalid_infix_input,sema_tcd,none,
  "function with 'infix' specified must take a two element tuple as input",
     ())
ERROR(infix_not_an_operator,sema_tcd,none,
      "only operator functions may be declared with an infix attribute", ())
ERROR(postfix_not_an_operator,sema_tcd,none,
      "only operator functions can be declared 'postfix'", ())
ERROR(invalid_postfix_input,sema_tcd,none,
      "only unary operators can be declared 'postfix'", ())
ERROR(prefix_not_an_operator,sema_tcd,none,
      "only operator functions can be declared 'prefix'", ())
ERROR(invalid_prefix_input,sema_tcd,none,
      "only unary operators can be declared 'prefix'", ())
ERROR(assignment_without_inout,sema_tcd,none,
      "assignment operator must have an initial @inout argument", ())
ERROR(conversion_not_function,sema_tcd,none,
      "conversion should be applied to an instance method", ())
ERROR(conversion_not_instance_method,sema_tcd,none,
      "conversion function %0 is not an instance method",
      (Identifier))
ERROR(transparent_not_valid,sema_tcd,none,
      "'transparent' attribute cannot be applied to this declaration", ())
ERROR(transparent_on_invalid_extension,sema_tcd,none,
      "'transparent' attribute is only supported on struct and enum extensions", ())
ERROR(transparent_in_protocols_not_supported,sema_tcd,none,
      "'transparent' attribute is not supported on declarations within protocols",
      ())
ERROR(transparent_in_classes_not_supported,sema_tcd,none,
      "'transparent' attribute is not supported on declarations within classes",
      ())

ERROR(conversion_params,sema_tcd,none,
      "conversion function %0 has non-defaulted parameters", (Identifier))
ERROR(invalid_iboutlet,sema_tcd,none,
      "only properties can be declared 'IBOutlet'", ())
ERROR(invalid_ibaction_decl,sema_tcd,none,
      "only methods can be declared 'IBAction'", ())
ERROR(invalid_ibaction_result,sema_tcd,none,
      "methods declared 'IBAction' must return 'Void' (not %0)", (Type))
ERROR(class_protocol_not_protocol,sema_tcd,none,
      "'class_protocol' attribute can only be applied to protocols", ())
      
ERROR(invalid_decl_attribute,sema_tcd,none,
      "attribute cannot be applied to declaration", ())
ERROR(type_attribute_applied_to_decl,sema_tcd,none,
      "attribute can only be applied to types, not declarations", ())
ERROR(decl_attribute_applied_to_type,sema_tcd,none,
      "attribute can only be applied to declarations, not types", ())
ERROR(optional_attribute_non_protocol,sema_tcd,none,
      "'optional' attribute can only be applied to protocol members", ())
ERROR(optional_attribute_non_objc_protocol,sema_tcd,none,
      "'optional' attribute can only be applied to members of an @objc protocol", 
      ())

// Extensions
ERROR(non_nominal_extension,sema_tcd,none,
      "%select{non-nominal type|protocol}0 %1 cannot be extended", (bool, Type))

// Protocols
ERROR(type_does_not_conform,sema_tcd,none,
      "type %0 does not conform to protocol %1", (Type, Type))
ERROR(protocol_derivation_is_broken,sema_tcd,none,
      "protocol %1 is broken; cannot derive conformance for type %0", (Type, Type))
ERROR(type_does_not_inherit,sema_tcd,none,
      "type %0 does not inherit from %1", (Type, Type))
ERROR(type_does_not_explicitly_conform,sema_tcd,none,
      "type %0 does not explicitly conform to protocol %1 (but appears to conform)", 
   (Type, Type))
NOTE(note_add_conformance,sema_tcd,none,
     "specify explicit conformance to protocol %0", (Type))
ERROR(non_class_cannot_conform_to_class_protocol,sema_tcd,none,
      "non-class type %0 cannot conform to class protocol %1",
      (Type, Type))
NOTE(inherited_protocol_does_not_conform,sema_tcd,none,
     "type %0 does not conform to inherited protocol %1", (Type, Type))
NOTE(no_witnesses,sema_tcd,none,
     "protocol requires %select{function %1|property %1|subscript operator}0 "
     "with type %2", (int, Identifier, Type))
NOTE(ambiguous_witnesses,sema_tcd,none,
     "multiple matching "
     "%select{functions named %1|properties named %1|subscript operators}0 "
     "with type %2", (int, Identifier, Type))
NOTE(no_witnesses_type,sema_tcd,none,
     "protocol requires nested type %0", (Identifier))
NOTE(ambiguous_witnesses_type,sema_tcd,none,
     "multiple matching types named %0", (Identifier))
NOTE(protocol_witness_exact_match,sema_tcd,none,
     "candidate exactly matches%0", (StringRef))
NOTE(protocol_witness_renamed,sema_tcd,none,
     "candidate matches (with renaming)%0", (StringRef))
NOTE(protocol_witness_kind_conflict,sema_tcd,none,
     "candidate has is not a %select{function|variable|subscript operator}0",
     (unsigned))
NOTE(protocol_witness_type_conflict,sema_tcd,none,
     "candidate has non-matching type %0%1", (Type, StringRef))
NOTE(protocol_witness_static_conflict,sema_tcd,none,
     "candidate is %select{|not }0'static'"
     "%select{, but requirement is not| as required}0", (bool))
NOTE(protocol_witness_prefix_postfix_conflict,sema_tcd,none,
     "candidate is %select{|prefix, |postfix, }1not "
     "%select{prefix|postfix}0 as required", (bool, unsigned))
NOTE(protocol_witness_type,sema_tcd,none,
     "possibly intended match", ())
NOTE(protocol_witness_nonconform_type,sema_tcd,none,
     "possibly intended match %0 does not conform to %1", (Type, Type))

// Protocols and existentials
NOTE(protocol_existential_assoc_type,sema_tcd,none,
     "associated type %0 prevents protocol from conforming to itself",
     (Identifier))
NOTE(protocol_existential_refers_to_this,sema_tcd,none,
     "%0 requirement refers to 'Self' type", (Identifier))

ERROR(circular_protocol_def,sema_tcd,none,
      "circular protocol inheritance %0", (StringRef))
NOTE(protocol_here,sema_tcd,none,
     "protocol %0 declared here", (Identifier))
ERROR(protocol_composition_not_protocol,sema_tcd,none, 
      "non-protocol type %0 cannot be used within 'protocol<...>'", (Type))
ERROR(objc_protocol_inherits_non_objc_protocol,sema_tcd,none,
      "[objc] protocol %0 cannot refine non-[objc] protocol %1", (Type, Type))

ERROR(protocol_composition_dynamic_lookup,sema_tcd,none,
      "'DynamicLookup' cannot be part of a protocol composition", ())
ERROR(dynamic_lookup_conformance,sema_tcd,none,
      "cannot declare explicit conformance to the 'DynamicLookup' protocol", ())

ERROR(requires_conformance_nonprotocol,sema_tcd,none,
      "type %0 constrained to non-protocol type %1", (TypeLoc, TypeLoc))
ERROR(requires_not_suitable_archetype,sema_tcd,none,
      "%select{|first |second }0type %1 in %select{conformance|same-type}2 "
      "requirement does not refer to a generic parameter or associated type",
      (int, TypeLoc, int))
ERROR(requires_generic_param_equal,sema_tcd,none,
      "same-type requirement makes generic parameters %0 and %1 equivalent",
      (Identifier, Identifier))
ERROR(requires_superclass_conflict,sema_tcd,none,
      "generic parameter %0 cannot be a subclass of both %1 and %2",
      (Identifier, Type, Type))

ERROR(override_multiple_decls_base,sema_tcd,none,
      "declaration cannot override more than one superclass declaration", ())
ERROR(override_multiple_decls_derived,sema_tcd,none,
      "declaration cannot be overridden by more than one subclass "
      "declaration", ())
ERROR(override_decl_extension,sema_tcd,none,
      "declarations %select{in extensions|from extensions}0 cannot "
      "%select{override|be overridden}0 yet", (bool))
NOTE(overridden_here,sema_tcd,none,
     "overridden declaration is here", ())
ERROR(overload_base_decl,sema_tcd,none,
      "cannot overload a declaration from a superclass", ())

ERROR(decl_no_default_init,sema_tcd,none,
      "cannot default-initialize variable of type %0", (Type))
ERROR(decl_no_default_init_ivar,sema_tcd,none,
      "cannot default-initialize instance variable %0 of type %1", 
      (Identifier, Type))
ERROR(decl_no_default_init_ivar_hole,sema_tcd,none,
      "cannot use initial value when one of the variables is '_'", ())
NOTE(decl_init_here,sema_tcd,none,
     "initial value is here", ())

// Inheritance
ERROR(duplicate_inheritance,sema_tcd,none,
  "duplicate inheritance from %0", (Type))
ERROR(multiple_inheritance,sema_tcd,none,
  "multiple inheritance from classes %0 and %1", (Type, Type))
ERROR(non_class_inheritance,sema_tcd,none,
  "non-class type %0 cannot inherit from class %1", (Type, Type))
ERROR(extension_class_inheritance,sema_tcd,none,
  "extension of type %0 cannot inherit from class %1", (Type, Type))
ERROR(inheritance_from_non_protocol_or_class,sema_tcd,none,
  "inheritance from non-protocol, non-class type %0", (Type))
ERROR(inheritance_from_non_protocol,sema_tcd,none,
  "inheritance from non-protocol type %0", (Type))
ERROR(superclass_not_first,sema_tcd,none,
  "superclass %0 must appear first in the inheritance clause", (Type))
ERROR(circular_class_inheritance,sema_tcd,none,
      "circular class inheritance %0", (StringRef))
NOTE(class_here,sema_tcd,none,
     "class %0 declared here", (Identifier))

// Enum raw types
ERROR(multiple_enum_raw_types,sema_tcd,none,
  "multiple enum raw types %0 and %1", (Type, Type))
ERROR(circular_enum_inheritance,sema_tcd,none,
      "circular enum raw types %0", (StringRef))
ERROR(raw_type_not_first,sema_tcd,none,
  "raw type %0 must appear first in the enum inheritance clause", (Type))
ERROR(raw_type_not_literal_convertible,sema_tcd,none,
      "raw type %0 is not integer-, float-, char-, or string-literal-convertible",
      (Type))
NOTE(enum_here,sema_tcd,none,
     "enum %0 declared here", (Identifier))
ERROR(empty_enum_raw_type,sema_tcd,none,
      "an enum with no cases cannot declare a raw type", ())
ERROR(enum_raw_value_without_raw_type,sema_tcd,none,
      "enum case cannot have a raw value if the enum does not have a raw type", ())
ERROR(enum_with_raw_type_case_with_argument,sema_tcd,none,
      "enum with raw type cannot have cases with arguments", ())
NOTE(enum_raw_type_here,sema_tcd,none,
     "declared raw type %0 here", (Type))
ERROR(enum_non_integer_raw_value_auto_increment,sema_tcd,none,
      "enum case must declare a raw value when the preceding raw value is not an integer", ())
ERROR(enum_non_integer_convertible_raw_type_no_value,sema_tcd,none,
      "enum cases require explicit raw values when the raw type is not integer literal convertible", ())
ERROR(enum_raw_value_not_unique,sema_tcd,none,
      "raw value for enum case is not unique", ())
NOTE(enum_raw_value_used_here,sema_tcd,none,
     "raw value previously used here", ())
NOTE(enum_raw_value_incrementing_from_here,sema_tcd,none,
     "raw value auto-incremented from here",())
NOTE(enum_raw_value_incrementing_from_zero,sema_tcd,none,
     "raw value implicitly auto-incremented from zero",())
     
ERROR(broken_raw_representable_requirement,sema_tcd,none,
      "RawRepresentable protocol is broken: unexpected requirement", ())

// Duplicate declarations
ERROR(duplicate_enum_element,sema_tcd,none,
      "duplicate definition of enum element",())

//------------------------------------------------------------------------------
// Type Check Expressions
//------------------------------------------------------------------------------

NOTE(found_candidate,sema_tce,none,
     "found this candidate", ())
NOTE(found_candidate_type,sema_tce,none,
     "found candidate with type %0", (Type))
NOTE(first_declaration,sema_tce,none,
     "first declaration", ())
NOTE(second_declaration,sema_tce,none,
     "second declaration", ())

ERROR(no_IntegerLiteralType_found,sema_tce,none,
      "standard library error: IntegerLiteralType not defined", ())
ERROR(no_FloatLiteralType_found,sema_tce,none,
      "standard library error: FloatLiteralType not defined", ())
ERROR(no_CharacterLiteralType_found,sema_tce,none,
      "standard library error: CharacterLiteralType not defined", ())
ERROR(no_StringLiteralType_found,sema_tce,none,
      "standard library error: StringLiteralType not defined", ())
ERROR(no_MaxBuiltinIntegerType_found,sema_tce,none,
   "standard library error: MaxBuiltinIntegerType is not properly defined", ())
ERROR(no_MaxBuiltinFloatType_found,sema_tce,none,
   "standard library error: MaxBuiltinFloatType is not properly defined", ())

ERROR(no_member_of_module,sema_tce,none,
      "module %0 has no member named %1", (Identifier, Identifier))

ERROR(super_not_in_class_method,sema_tce,none,
      "'super' members cannot be referenced in a non-class type", ())
ERROR(super_with_no_base_class,sema_tce,none,
      "'super' members cannot be referenced in a root class", ())

// Operators
ERROR(unknown_binop,sema_tce,none,
       "operator is not a known binary operator", ())
ERROR(non_assoc_adjacent,sema_tce,none,
      "non-associative operator is adjacent to operator of same precedence", ())
ERROR(incompatible_assoc,sema_tce,none,
      "operator is adjacent to operator of same precedence"
      " but incompatible associativity", ())
ERROR(reference_non_inout,sema_tce,none,
      "reference to %0 not used to initialize a @inout parameter", (Type))
NOTE(subscript_decl_here,sema_tca,none,
     "subscript operator declared here", ())
ERROR(condition_broken_proto,sema_tce,none,
      "protocol 'LogicValue' is broken", ())
ERROR(broken_bool,sema_tce,none, "type 'Bool' is broken", ())
ERROR(binding_injected_optional,sema_tce,none,
      "operand of postfix '?' should have optional type; type is %0", (Type))

ERROR(forcing_injected_optional,sema_tce,none,
      "operand of postfix '!' should have optional type; type is %0", (Type))

ERROR(new_array_bound_zero,sema_tce,none,
      "array type cannot have zero length", ())
ERROR(broken_array_bound_proto,sema_tce,none,
      "protocol 'ArrayBound' is broken", ())
ERROR(broken_builtin_array_bound,sema_tce,none,
      "builtin 'ArrayBound' type is broken", ())

ERROR(interpolation_missing_proto,sema_tce,none,
      "string interpolation requires the protocol 'StringInterpolationConvertible' to be defined",
      ())
ERROR(interpolation_broken_proto,sema_tce,none,
      "protocol 'StringInterpolationConvertible' is broken",
      ())

ERROR(discard_expr_outside_of_assignment,sema_tce,none,
      "'_' can only appear in a pattern or on the left side of an assignment",
      ())

// Array literals
ERROR(array_protocol_broken,sema_tce,none,
      "ArrayLiteralConvertible protocol definition is broken", ())

// Dictionary literals
ERROR(dictionary_protocol_broken,sema_tce,none,
      "DictionaryLiteralConvertible protocol definition is broken", ())
      
// Generic specializations
ERROR(cannot_explicitly_specialize_generic_function,tce_sema,none,
      "cannot explicitly specialize a generic function", ())
ERROR(not_a_generic_definition,tce_sema,none,
      "cannot specialize a non-generic definition", ())
ERROR(not_a_generic_type,tce_sema,none,
      "cannot specialize non-generic type %0", (Type))
ERROR(type_parameter_count_mismatch,tce_sema,none,
      "generic type %0 specialized with %select{too many|too few}3 type "
      "parameters (got %2, but expected %1)",
      (Identifier, unsigned, unsigned, bool))
ERROR(generic_type_requires_arguments,tce_sema,none,
      "reference to generic type %0 requires arguments in <...>", (Type))
NOTE(generic_type_declared_here,tce_sema,none,
     "generic type %0 declared here", (Identifier))

// Ambiguities
ERROR(ambiguous_decl_ref,tce_sema,none,
      "ambiguous use of %0", (Identifier))
ERROR(ambiguous_operator_ref,tce_sema,none,
      "ambiguous use of operator %0", (Identifier))

ERROR(partial_application_of_value_type_method,tce_sema,none,
      "partial application of %select{struct|enum|generic|protocol}0 method is not allowed", (unsigned))

ERROR(self_assignment_var,tce_sema,none,
      "assigning a variable to itself", ())
ERROR(self_assignment_prop,tce_sema,none,
      "assigning a property to itself", ())

WARNING(unindented_code_after_return,tce_sema,none,
        "expression following 'return' is treated as an argument of "
        "the 'return'", ())
NOTE(indent_expression_to_silence,tce_sema,none,
     "indent the expression to silence this warning", ())

ERROR(value_of_module_type,tce_sema,none,
      "expected module member name after module name", ())

//------------------------------------------------------------------------------
// Type Check Statements
//------------------------------------------------------------------------------

ERROR(return_invalid_outside_func,sema_tcs,none,
      "return invalid outside of a func", ())
ERROR(return_expr_missing,sema_tcs,none,
      "non-void function should return a value", ())
ERROR(expression_unused_function,sema_tcs,none,
      "expression resolves to an unused function", ())
ERROR(expression_unused_lvalue,sema_tcs,none,
      "expression resolves to an unused l-value", ())
ERROR(assignment_lhs_not_lvalue,sema_tcs,none,
      "cannot assign to the result of this expression", ())
ERROR(assignment_lhs_not_settable,sema_tcs,none,
      "cannot assign to read-only variable or subscript", ())

// ForEach Stmt
ERROR(sequence_protocol_broken,sema_tcs,none,
      "Sequence protocol definition is broken", ())
ERROR(generator_protocol_broken,sema_tcs,none,
      "Generator protocol definition is broken", ())

ERROR(break_outside_loop,sema_tcs,none,
      "'break' is only allowed inside a loop", ())
ERROR(continue_outside_loop,sema_tcs,none,
      "'continue' is only allowed inside a loop", ())

// Switch Stmt
ERROR(no_match_operator,sema_tcs,none,
      "no binary '~=' operator available for 'switch' statement", ())
ERROR(fallthrough_outside_switch,sema_tcs,none,
      "'fallthrough' is only allowed inside a switch", ())
ERROR(fallthrough_from_last_case,sema_tcs,none,
      "'fallthrough' without a following 'case' or 'default' block", ())
ERROR(fallthrough_into_case_with_var_binding,sema_tcs,none,
      "'fallthrough' cannot transfer control to a case label that declares variables",
      ())
//------------------------------------------------------------------------------
// Type Check Patterns
//------------------------------------------------------------------------------

ERROR(cannot_infer_type_for_pattern,sema_tcp,none,
      "type annotation missing in pattern", ())
ERROR(pattern_type_mismatch_context,sema_tcp,none,
      "type annotation does not match contextual type %0", (Type))
ERROR(tuple_pattern_in_non_tuple_context,sema_tcp,none,
      "tuple pattern cannot match values of the non-tuple type %0", (Type))
ERROR(tuple_pattern_length_mismatch,sema_tcp,none,
      "tuple pattern has the wrong length for tuple type %0", (Type))
ERROR(enum_element_pattern_member_not_found,sema_tcp,none,
      "enum case '%0' not found in type %1", (StringRef, Type))
ERROR(enum_element_pattern_not_enum,sema_tcp,none,
      "enum case pattern cannot match values of the non-enum type %0", (Type))
ERROR(enum_element_pattern_not_member_of_enum,sema_tcp,none,
      "enum case '%0' is not a member of type %1", (StringRef, Type))
ERROR(nominal_type_pattern_not_nominal_type,sema_tcp,none,
      "non-nominal type %0 cannot be used with property pattern syntax", (Type))
ERROR(nominal_type_pattern_type_mismatch,sema_tcp,none,
      "type %0 of pattern does not match deduced type %1", (Type, Type))
ERROR(nominal_type_pattern_property_not_found,sema_tcp,none,
      "property '%0' not found in type %1", (StringRef, Type))
ERROR(nominal_type_pattern_property_ambiguous,sema_tcp,none,
      "property name '%0' in type %1 is ambiguous", (StringRef, Type))
ERROR(nominal_type_pattern_not_property,sema_tcp,none,
      "member '%0' of type %1 is not a property", (StringRef, Type))


//------------------------------------------------------------------------------
// Type Check Types
//------------------------------------------------------------------------------

ERROR(sugar_type_not_found,sema_tct,none,
      "broken standard library: cannot find %select{Array|Optional}0 type",
      (/*SugarImplTypeKind*/ unsigned))
ERROR(optional_intrinsics_not_found,sema_tct,none,
      "broken standard library: cannot find intrinsic operations on "
      "Optional<T>", ())
ERROR(bool_intrinsics_not_found,sema_tct,none,
      "broken standard library: cannot find intrinsic operations on Bool", ())

//------------------------------------------------------------------------------
// @objc
//------------------------------------------------------------------------------

ERROR(invalid_objc_decl,sema_tcd,none,
      "only classes, methods, properties, and subscript declarations "
      "can be declared 'objc'", ())
ERROR(objc_protocol_not_class_protocol,sema_tcd,none,
      "only [class_protocol] protocols can be declared 'objc'", ())
ERROR(objc_invalid_on_static_var,sema_tcd,none,
      "static properties can not be declared '@objc'", ())

ERROR(objc_invalid_on_var,sema_objc,none,
      "property can not be marked @objc because its type can not be "
      "represented in Objective-C", ())
NOTE(not_objc_empty_protocol_composition,sema_objc,none,
     "'protocol<>' is not considered '@objc'; use 'DynamicLookup' instead", ())
NOTE(not_objc_protocol,sema_objc,none,
     "protocol %0 is not '@objc'", (Type))
NOTE(not_objc_empty_tuple,sema_objc,none,
      "empty tuple type can not be represented in Objective-C", ())
NOTE(not_objc_tuple,sema_objc,none,
      "tuples can not be represented in Objective-C", ())
NOTE(not_objc_swift_struct,sema_objc,none,
      "Swift structs can not be represented in Objective-C", ())
NOTE(not_objc_swift_enum,sema_objc,none,
      "Swift enums can not be represented in Objective-C", ())
NOTE(not_objc_generic_type_param,sema_objc,none,
     "generic type parameters can not be represented in Objective-C", ())

ERROR(objc_invalid_on_func_curried,sema_objc,none,
      "method can not be marked @objc because curried functions can not be "
      "represented in Objective-C", ())
ERROR(objc_invalid_on_tuple_style,sema_objc,none,
      "method can not be marked @objc because it is not using selector-style "
      "declaration syntax", ())
ERROR(objc_invalid_on_func_param_type,sema_objc,none,
      "method can not be marked @objc because the type of the parameter %0 "
      "can not be represented in Objective-C", (unsigned))
ERROR(objc_invalid_on_func_single_param_type,sema_objc,none,
      "method can not be marked @objc because the type of the parameter "
      "can not be represented in Objective-C", ())
ERROR(objc_invalid_on_func_result_type,sema_objc,none,
      "method can not be marked @objc because its result type can not be "
      "represented in Objective-C", ())


//==============================================================================
// SIL Generation Diagnostics
//==============================================================================

ERROR(bridging_module_missing,sil_gen,none,
      "unable to find module '%0' for implicit conversion function '%0.%1'",
      (StringRef, StringRef))
ERROR(bridging_function_missing,sil_gen,none,
      "unable to find implicit conversion function '%0.%1'",
      (StringRef, StringRef))
ERROR(bridging_function_overloaded,sil_gen,none,
      "multiple definitions of implicit conversion function '%0.%1'",
      (StringRef, StringRef))
ERROR(bridging_function_not_function,sil_gen,none,
      "definition of implicit conversion function '%0.%1' is not a function",
      (StringRef, StringRef))
ERROR(bridging_function_not_correct_type,sil_gen,none,
      "definition of implicit conversion function '%0.%1' is not of the correct"
      " type",
      (StringRef, StringRef))
ERROR(invalid_sil_builtin,sil_gen,none,
      "INTERNAL ERROR: invalid use of builtin: %0",
      (StringRef))

//==============================================================================
// SIL Analysis Diagnostics
//==============================================================================

// Definite initialization diagnostics.
NOTE(variable_defined_here,sil_analysis,none,
      "variable defined here", ())
ERROR(variable_used_before_initialized,sil_analysis,none,
      "variable '%0' used before being initialized", (StringRef))
ERROR(variable_inout_before_initialized,sil_analysis,none,
      "variable '%0' passed by reference before being initialized", (StringRef))
ERROR(variable_escape_before_initialized,sil_analysis,none,
      "variable '%0' captured by a closure before being initialized",
      (StringRef))
ERROR(global_variable_function_use_uninit,sil_analysis,none,
      "variable '%0' used by function definition before being initialized",
      (StringRef))
ERROR(struct_not_fully_initialized,sil_analysis,none,
      "struct '%0' must be completely initialized before a member is stored to",
      (StringRef))

ERROR(repl_must_be_initialized,sil_analysis,none,
      "variables currently must have an initial value when entered at the "
      "top level of the REPL", ())


// Control flow diagnostics.
ERROR(missing_return,sil_analysis,none,
      "missing return in the function expected to return %0", (Type))
ERROR(return_from_noreturn,sil_analysis,none, 
      "return from a 'noreturn' function", ())
ERROR(non_exhaustive_switch,sil_analysis,none, 
      "switch must be exhaustive, consider adding a default clause", ())
WARNING(unreachable_code,sil_analysis,none, "will never be executed", ())
NOTE(unreachable_code_branch,sil_analysis,none,
     "condition always evaluates to %select{false|true}0", (bool))
NOTE(call_to_noreturn_note,sil_analysis,none,
     "a call to a noreturn function", ())
WARNING(unreachable_code_after_stmt,sil_analysis,none,
        "code after '%select{return|continue}0' will never be executed", 
        (unsigned))
WARNING(switch_on_a_constant,sil_analysis,none,
        "switch condition evaluates to a constant", ())
NOTE(unreachable_code_note,sil_analysis,none, "will never be executed", ())

// 'transparent' diagnostics
ERROR(circular_transparent,sil_analysis,none,
      "inlining 'transparent' functions forms circular loop", ())
NOTE(note_while_inlining,sil_analysis,none,
     "while inlining here", ())

// Arithmetic diagnostics.
ERROR(integer_conversion_overflow,sil_analysis,none,
      "integer overflows when converted from %0 to %1",
      (Type, Type))
ERROR(integer_conversion_overflow_builtin_types,sil_analysis,none,
      "integer overflows when converted from %select{unsigned|signed}0 "
      "%1 to %select{unsigned|signed}2 %3",
      (bool, Type, bool, Type))
WARNING(integer_conversion_overflow_warn,sil_analysis,none,
      "integer overflows when converted from %0 to %1",
      (Type, Type))
ERROR(integer_conversion_sign_error,sil_analysis,none,
      "negative integer cannot be converted to unsigned type %0",
      (Type))
ERROR(integer_literal_overflow,sil_analysis,none,
      "integer literal overflows when stored into %0",
      (Type))
ERROR(integer_literal_overflow_builtin_types,sil_analysis,none,
      "integer literal overflows when stored into %select{unsigned|signed}0 %1",
      (bool, Type))
WARNING(integer_literal_overflow_warn,sil_analysis,none,
      "integer literal overflows when stored into %0",
      (Type))
ERROR(arithmetic_operation_overflow,sil_analysis,none,
      "arithmetic operation '%0 %1 %2' (on type %3) results in an overflow",
      (StringRef, StringRef, StringRef, Type))
ERROR(arithmetic_operation_overflow_generic_type,sil_analysis,none,
      "arithmetic operation '%0 %1 %2' (on %select{unsigned|signed}3 "
      "%4-bit integer type) results in an overflow",
      (StringRef, StringRef, StringRef, bool, unsigned))
ERROR(division_overflow,sil_analysis,none,
      "division '%0 %1 %2' results in an overflow",
      (StringRef, StringRef, StringRef))
ERROR(division_by_zero,sil_analysis,none, "division by zero", ())

// FIXME: We won't need this as it will be replaced with user-generated strings.
// staticReport diagnostics.
ERROR(static_report_error, sil_analysis, none,
      "static report error", ())

//==============================================================================
// IR Generation Diagnostics
//==============================================================================

ERROR(no_llvm_target,irgen,none,
      "error loading LLVM target for triple '%0': %1", (StringRef, StringRef))
ERROR(error_opening_output,irgen,none,
      "error opening '%0' for output: %1", (StringRef, StringRef))
ERROR(error_codegen_init_fail,irgen,none,
      "cannot initialize code generation passes for target", ())

ERROR(irgen_unimplemented,irgen,none,
      "unimplemented IR generation feature %0", (StringRef))
ERROR(irgen_failure,irgen,none, "IR generation failure: %0", (StringRef))


//==============================================================================
// Frontend Diagnostics.
//==============================================================================

ERROR(cannot_open_serialized_file,frontend,none,
  "cannot open file '%0' for diagnostics emission (%1)", (StringRef, StringRef))
ERROR(error_open_input_file,frontend,none,
  "error opening input file '%0' (%1)", (StringRef, StringRef))
ERROR(error_clang_importer_not_linked_in,frontend,none,
  "clang importer not available", ())
ERROR(error_clang_importer_create_fail,frontend,none,
  "clang importer creation failed", ())
ERROR(error_missing_arg_value,frontend,none,
  "missing argument value for '%0', expected %1 argument(s)",
  (StringRef, unsigned))
ERROR(error_invalid_arg_value,frontend,none,
  "invalid value '%1' in '%0'", (StringRef, StringRef))
ERROR(error_immediate_mode_missing_stdlib,frontend,none,
  "could not load the swift standard library", ())
ERROR(error_immediate_mode_missing_library,frontend,none,
  "could not load %select{shared library|framework}0 '%1'",
  (unsigned, StringRef))

#if defined(DIAG)
#  undef DIAG
#endif
#undef NOTE
#undef WARNING
#undef ERROR
