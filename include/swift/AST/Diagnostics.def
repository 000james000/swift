//===- Diagnostics.def - Diagnostics Text -----------------------*- C++ -*-===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2015 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See http://swift.org/LICENSE.txt for license information
// See http://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//
//
//  This file defines all of the diagnostics that can be emitted by
//  Swift. Each diagnostic is described using one of three
//  kinds--error, warning, or note--along with a unique identifier, category, 
//  options, and text, and is followed by a signature describing the diagnostic
//  argument kinds, e.g., string, identifier, string
//
//===----------------------------------------------------------------------===//

#if !(defined(DIAG) || (defined(ERROR) && defined(WARNING) && defined(NOTE)))
#  error Must define either DIAG or the set {ERROR,WARNING,NOTE}
#endif

#ifndef ERROR
#  define ERROR(ID,Category,Options,Text,Signature)   \
  DIAG(ERROR,ID,Category,Options,Text,Signature)
#endif

#ifndef WARNING
#  define WARNING(ID,Category,Options,Text,Signature) \
  DIAG(WARNING,ID,Category,Options,Text,Signature)
#endif

#ifndef NOTE
#  define NOTE(ID,Category,Options,Text,Signature) \
  DIAG(NOTE,ID,Category,Options,Text,Signature)
#endif

//==============================================================================
// Lexing and Parsing diagnostics
//==============================================================================

ERROR(invalid_diagnostic,parsing,none,
      "INTERNAL ERROR: this diagnostic should not be produced", ())

ERROR(expected_lbrace,parsing,none,
     "to match this opening '{'", ())

NOTE(opening_brace,parsing,none,
     "to match this opening '{'", ())
NOTE(opening_bracket,parsing,none,
     "to match this opening '['", ())
NOTE(opening_paren,parsing,none,
     "to match this opening '('", ())
NOTE(previous_decldef,parsing,none,
     "previous %select{declaration|definition}0 of %1 is here", 
     (bool, Identifier))
NOTE(previous_declaration,parsing,none,
     "previous declaration of %0 is here", (Identifier))
NOTE(previous_definition,parsing,none,
     "previous definition of %0 is here", (Identifier))

//------------------------------------------------------------------------------
// Lexer diagnostics
//------------------------------------------------------------------------------

WARNING(lex_nul_character,lexing,none,
        "nul character embedded in middle of file", ())

ERROR(lex_unterminated_block_comment,lexing,none,
      "unterminated '/*' comment", ())
NOTE(lex_comment_start,lexing,none,
     "comment started here", ())

ERROR(lex_invalid_character,lexing,none,
       "invalid character in source file", ())
ERROR(lex_expected_sign_in_fp,lexing,none,
       "expected '+' or '-' in floating point literal exponent", ())
ERROR(lex_expected_digit_in_fp_exponent,lexing,none,
       "expected a digit after decimal point in floating point exponent", ())
ERROR(lex_expected_digit_in_int_literal,lexing,none,
       "expected a digit after integer literal prefix", ())

//------------------------------------------------------------------------------
// Declaration parsing diagnostics
//------------------------------------------------------------------------------

ERROR(bad_module_name,decl_parsing,none,
      "file name is not a valid identifier", ())

ERROR(expected_decl,decl_parsing,none,
      "expected declaration", ())
ERROR(top_level_decl_without_type,decl_parsing,none,
      "top-level declarations require a type specifier", ())
ERROR(expected_identifier_in_decl,decl_parsing,none,
      "expected identifier in %0 declaration", (StringRef))
ERROR(expected_type_or_init,decl_parsing,none,
      "expected a type or an initializer", ())
ERROR(non_simple_var,decl_parsing,none,
      "complex 'var' declaration not allowed here", ())
ERROR(precedence_overload,decl_parsing,none,
      "infix precedence of functions in an overload set must match", ())
ERROR(decl_redefinition,decl_parsing,none,
      "%select{declaration|definition}0 conflicts with previous value", 
      (bool))
ERROR(operator_in_decl,decl_parsing,none,
      "operator cannot be declared here, declare them at global scope", ())
ERROR(disallowed_var_decl,decl_parsing,none,
      "'var' declarations not allowed here, use data members instead", ())
ERROR(decl_inner_scope,decl_parsing,none,
      "declaration is only valid at file scope", ())

// Var Name
ERROR(expected_lparen_var_name,decl_parsing,none,
      "expected identifier or '(' in var name", ())
ERROR(expected_rparen_var_name,decl_parsing,none,
      "expected ')' at end of var name", ())
ERROR(invalid_index_in_var_name_path,decl_parsing,none,
      "%0 is an invalid index for %1", (Identifier, Type))
      
// Import
ERROR(decl_expected_module_name,decl_parsing,none,
      "expected module name in import declaration", ())

// Extension
ERROR(expected_rbrace_extension,type_parsing,none,
      "expected '}' at end of extension", ())

// TypeAlias
ERROR(expected_colon_in_typealias,decl_parsing,none,
      "expected ':' in typealias declaration", ())
ERROR(expected_type_in_typealias,decl_parsing,none,
      "expected type in var declaration", ())

// Func
ERROR(func_decl_without_paren,decl_parsing,none,
      "expected '(' in argument list of func declaration", ())
ERROR(static_func_decl_global_scope,decl_parsing,none,
      "'static' functions may only be declared on a type", ())

// OneOf

// Struct
ERROR(expected_lbrace_struct,decl_parsing,none,
      "expected '{' in struct", ())
ERROR(expected_rbrace_struct,decl_parsing,none,
      "expected '}' in struct", ())
ERROR(expected_struct_member,decl_parsing,none,
      "expected a function or variable declaration in protocol", ())
ERROR(struct_unnamed_member,decl_parsing,none,
      "unnamed members invalid in structs", ())

// Protocol

//------------------------------------------------------------------------------
// Type parsing diagnostics
//------------------------------------------------------------------------------

ERROR(expected_type,type_parsing,none,
      "expected type", ())
ERROR(expected_initializer_expr,expr_parsing,none,
      "expected initializer expression after '='", ())
ERROR(attribute_does_not_apply_to_type,type_parsing,none,
      "attribute does not apply to type", ())

// Named types
ERROR(expected_identifier_in_dotted_type,expr_parsing,none,
      "expected identifier in dotted type", ())
ERROR(expected_identifier_for_type,expr_parsing,none,
      "expected identifier for type name", ())
ERROR(named_definition_isnt_type,expr_parsing,none,
      "%0 does not name a type", (Identifier))

// Function types
ERROR(expected_type_function_result,type_parsing,none,
      "expected type for function result", ())

ERROR(expected_function_argument_must_be_paren,type_parsing,none,
      "function argument type must be parenthesized", ())

// OneOf Types
ERROR(expected_lbrace_oneof_type,type_parsing,none,
      "expected '{' in oneof", ())
ERROR(expected_rbrace_oneof_type,type_parsing,none,
      "expected '}' at end of oneof", ())
ERROR(duplicate_oneof_element,type_parsing,none,
      "duplicate definition of element '%0'", (StringRef))
ERROR(expected_type_oneof_element,type_parsing,none,
      "expected type while parsing oneof element", ())

// Array Types      
ERROR(expected_expr_array_type,expr_parsing,none,
      "expected expression for size of array type", ())
ERROR(non_constant_array,type_parsing,none,
      "array has non-constant size", ())
ERROR(zero_length_array,type_parsing,none,
      "array has length zero", ())
ERROR(expected_rbracket_array_type,type_parsing,none,
      "expected ']' in array type", ())
      
// Tuple Types
ERROR(expected_rparen_tuple_type_list,type_parsing,none,
      "expected ')' at end of tuple list", ())
ERROR(untyped_tuple_elt_in_function_signature,type_parsing,none,
      "tuple elements in function signatures must have an explicit type", ())

// Protocol Types
ERROR(expected_lbrace_protocol_type,type_parsing,none,
      "expected '{' in protocol type", ())
ERROR(expected_protocol_member,type_parsing,none,
      "expected a function or variable declaration in protocol", ())

//------------------------------------------------------------------------------
// Pattern parsing diagnostics
//------------------------------------------------------------------------------

ERROR(expected_pattern,pattern_parsing,none,
      "expected pattern", ())
ERROR(untyped_pattern_in_function_signature,pattern_parsing,none,
      "function parameter must have an explicit type", ())
ERROR(expected_rparen_tuple_pattern_list,pattern_parsing,non,
      "expected ')' at end of tuple pattern", ())

//------------------------------------------------------------------------------
// Statement parsing diagnostics
//------------------------------------------------------------------------------
ERROR(expected_stmt,stmt_parsing,none,
      "expected statement", ())
ERROR(illegal_top_level_stmt,stmt_parsing,none,
      "statments are not allowed at the top level", ())

// Assignment statement
ERROR(expected_expr_assignment,stmt_parsing,none,
      "expected expression in assignment", ())

// Brace Statement
ERROR(expected_rbrace_in_brace_stmt,stmt_parsing,none,
      "expected '}' at end of brace statement", ())

// Return Statement
ERROR(expected_expr_return,stmt_parsing,none,
      "expected expresssion in 'return' statement", ())

// If Statement
ERROR(expected_expr_if,stmt_parsing,none,
      "expected expresssion in 'if' condition", ())
ERROR(expected_lbrace_after_if,stmt_parsing,none,
      "expected '{' after 'if' condition", ())
ERROR(expected_lbrace_after_else,stmt_parsing,none,
      "expected '{' after 'else'", ())

// While Statement
ERROR(expected_expr_while,stmt_parsing,none,
      "expected expresssion in 'while' condition", ())
ERROR(expected_lbrace_after_while,stmt_parsing,none,
      "expected '{' after 'while' condition", ())

//------------------------------------------------------------------------------
// Expression parsing diagnostics
//------------------------------------------------------------------------------

ERROR(expected_expr,expr_parsing,none,
      "expected expression", ())

ERROR(expected_expr_after_operator,expr_parsing,none,
      "expected expression after operator", ())

ERROR(expected_field_name,expr_parsing,none,
      "expected field name following '.'", ())
ERROR(expected_dollar_numeric,expr_parsing,none,
      "expected numeric value following '$'", ())
ERROR(dollar_numeric_too_large,expr_parsing,none,
      "numeric value following '$' is too large", ())

ERROR(anon_closure_arg_not_in_closure,expr_parsing,none,
      "anonymous closure argument not contained in a closure", ())


ERROR(expected_identifier_after_dot_expr,expr_parsing,none,
      "expected identifier after '.' expression", ())
ERROR(expected_field_spec_name_tuple_expr,expr_parsing,none,
      "expected field specifier name in tuple expression", ())    

ERROR(expected_expr_closure,expr_parsing,none,
      "expected expression in closure", ())
ERROR(expected_rbrace_in_closure,expr_parsing,none,
      "expected '}' at end of closure", ())

// Subscript expressions
ERROR(expected_expr_subscript_value,expr_parsing,none,
      "expected expression for subscript value", ())
ERROR(expected_bracket_array_subscript,expr_parsing,none,
      "expected ']' in subscript expression", ())

// Tuples and parenthesized expressions
ERROR(expected_expr_parentheses,expr_parsing,none,
      "expected subexpression in parentheses", ())
ERROR(expected_equal_in_tuple_expr,expr_parsing,none,
      "expected '=' in tuple expression", ())
ERROR(expected_rparen_parenthesis_expr,expr_parsing,none,
      "expected ')' in parenthesis expression", ())

// Func expressions
ERROR(expected_lbrace_func_expr,decl_parsing,none,
      "expected '{' in func expression", ())


//------------------------------------------------------------------------------
// Literal parsing diagnostics
//------------------------------------------------------------------------------

NOTE(while_converting_literal,sema,none,
     "while converting literal to %0", (Type))
NOTE(while_processing_literal_conversion_function,sema,none,
     "while processing argument of conversion function to inferred type %0",
      (Type))

ERROR(type_not_compatible_literal,literal_parsing,none,
      "inferred type %0 is not compatible with literal", (Type))
ERROR(type_ambiguous_literal_conversion,literal_parsing,none,
      "%0 has multiple '%1' methods", (Type, StringRef))
ERROR(type_literal_conversion_not_static,literal_parsing,none,
      "'%1' method in %0 must be a static method",
      (Type, StringRef))
ERROR(literal_conversion_wrong_return_type,literal_parsing,none,
      "'%1' should return %0", (Type, StringRef))
ERROR(type_literal_conversion_defined_wrong,literal_parsing,none,
      "conversion method in %0 not defined in terms of standard library type",
       (Type))

WARNING(int_literal_too_large,literal_parsing,none,
        "integer constant too large (%0 bits) for %1",
        (unsigned, Type))
      
WARNING(float_literal_overflow,literal_parsing,none,
        "floating point constant overflowed to %0", (StringRef))
WARNING(float_literal_underflow,literal_parsing,none,
        "floating point constant underflowed to %0", (StringRef))


//------------------------------------------------------------------------------
// Attribute-parsing diagnostics
//------------------------------------------------------------------------------
ERROR(expected_attribute_name,attribute_parsing,none,
      "expected an attribute name", ())
ERROR(unknown_attribute,attribute_parsing,none,
      "unknown attribute '%0'", (StringRef))
ERROR(duplicate_attribute,attribute_parsing,none,
      "duplicate '%0' attribute", (StringRef))
ERROR(cannot_combine_attribute,attribute_parsing,none,
      "attribute '%0' cannot be combined with this attribute", (StringRef))
ERROR(expected_in_attribute_list,attribute_parsing,none,
      "expected ']' or ',' in attribute list", ())

// infix and unary      
ERROR(expected_precedence_value,attribute_parsing,none,
      "expected precedence number in infix attribute", ())
ERROR(invalid_precedence,attribute_parsing,none,
      "precedence '%0' is not an integer between 0 and 255", (StringRef))

ERROR(import_attributes,attribute_parsing,none,
      "invalid attributes specified for import", ())
ERROR(oneof_attributes,attribute_parsing,none,
      "oneof types are not allowed to have attributes", ())
ERROR(protocol_attributes,attribute_parsing,none,
      "protocol types are not allowed to have attributes", ())

// byref
ERROR(byref_attribute_expected_identifier,attribute_parsing,none,
      "expected identifier for byref attribute", ())
ERROR(byref_attribute_unknown_qualifier,attribute_parsing,none,
      "unknown qualifier for byref attribute", ())
ERROR(byref_attribute_expected_rparen,attribute_parsing,none,
      "expected ')' at end of byref qualifiers", ())

// auto_closure
ERROR(autoclosure_requires_function_type,attribute_parsing,none,
      "auto_closure attribute only applies to syntactic function types", ())
ERROR(autoclosure_function_input_nonunit,attribute_parsing,none,
      "auto_closure argument type %0 must be '()'", (Type))


//==============================================================================
// Semantic Analysis Diagnostics
//==============================================================================

NOTE(type_declared_here,sema,none,
     "type declared here", ())

NOTE(while_converting_var_init,sema,none,
     "while converting 'var' initializer to declared type %0", (Type))
NOTE(while_converting_default_tuple_value,sema,none,
     "while converting default tuple value to element type %0", (Type))
NOTE(while_converting_function_argument,sema,none,
     "while converting function argument to expected type %0", (Type))

ERROR(invalid_anonymous_argument,sema,none,
      "use of invalid anonymous argument, %0 is larger than"
      " # arguments to bound function (%1)", (unsigned, unsigned))

//------------------------------------------------------------------------------
// Name Binding
//------------------------------------------------------------------------------

ERROR(sema_opening_import,sema_nb,none,
      "opening import file '%0.swift': %1", (StringRef, StringRef))
ERROR(invalid_declaration_imported,sema_nb,none,
      "invalid declaration referenced in import", ())

ERROR(unknown_name_in_type,sema_nb,none,
      "use of unknown scope %0 in type reference", (Identifier))
ERROR(unknown_dotted_type_base,sema_nb,none,
      "type references cannot access elements of %0", (Identifier))
ERROR(dotted_reference_not_type,sema_nb,none,
      "dotted reference to %0 does not resolve to a type", (Identifier))


ERROR(no_module_or_type,sema_nb,none,
      "no such module or type", ())
ERROR(abiguous_type_base,sema_nb,none,
      "%0 is ambiguous for type look up in this context", (Identifier))
ERROR(invalid_member_type,sema_nb,none,
      "%0 is not a member type of %1", (Identifier, Identifier))
ERROR(use_unresolved_identifier,sema_nb,none,
      "use of unresolved identifier %0", (Identifier))
ERROR(use_undeclared_type,sema_nb,none,
      "use of undeclared type %0", (Identifier))

//------------------------------------------------------------------------------
// Type Check Coercions
//------------------------------------------------------------------------------

ERROR(cannot_convert_dependent_reference,sema_tcc,none,
      "dependent reference to member %0 cannot convert to %1",
      (Identifier,Type))
ERROR(invalid_member_in_type,sema_tcc,none,
      "type %0 has no member named %1", (Type, Identifier))
ERROR(call_element_not_function_type,sema_tcc,none,
      "cannot provide an initializer for member %1 of type %0", (Type, Identifier))
ERROR(call_element_function_type,sema_tcc,none,
      "must provide an initializer for member %1 of type %0", (Type, Identifier))
ERROR(not_initialized_tuple_element,sema_tcc,none,
      "no value to initialize tuple element #%0 in expression of type %1",
      (unsigned, Type))
ERROR(not_initialized_named_tuple_element,sema_tcc,none,
     "no value to initialize tuple element %0 (#%1) in expression of type %2",
      (Identifier, unsigned, Type))
ERROR(tuple_element_not_used,sema_tcc,none,
      "element #%0 of tuple value not used when converting to type %1",
      (unsigned, Type))
ERROR(named_tuple_element_not_used,sema_tcc,none,
      "element %0 (#%1) of tuple value not used when converting to type %2",
      (Identifier, unsigned, Type))
ERROR(tuple_element_type_mismatch,sema_tcc,none,
      "element #%0 of tuple value has type %1, but expected type %2",
      (unsigned, Type, Type))
ERROR(invalid_conversion,sema_tcc,none,
      "invalid conversion from type %0 to %1", (Type, Type))
ERROR(invalid_conversion_of_lvalue,sema_tcc,none,
      "passing %0 variable by reference as %1 variable",
      (Type, Type))
ERROR(invalid_conversion_to_lvalue,sema_tcc,none,
      "passing %0 value by reference as %1 variable",
      (Type, Type))
ERROR(implicit_use_of_lvalue,sema_tcc,none,
      "passing %0 variable by reference without an '&' operator", (Type))
ERROR(load_of_explicit_lvalue,sema_tcc,none,
      "%0 variable is not being passed by reference", (Type))
ERROR(explicit_lvalue,sema_tcc,none,
      "'&' is only needed when passing values by reference", ())

//------------------------------------------------------------------------------
// Type Check Declarations
//------------------------------------------------------------------------------

ERROR(invalid_index_in_element_ref,sema_tcd,none,
      "%0 is an invalid index for %1", (Identifier, Type))
ERROR(operator_not_func,sema_tcd,none,
      "operators must be declared with 'func'", ())
ERROR(custom_operator_addressof,sema_tcd,none,
      "cannot declare a custom unary '&' operator", ())
ERROR(var_type_not_materializable,sema_tcd,none,
      "type %0 of variable is not materializable", (Type))
ERROR(oneof_element_not_materializable,sema_tcd,none,
      "type of oneof element is not materializable", ())

// Attributes
ERROR(invalid_arg_count_for_operator,sema_tcd,none,
      "operators must have one or two arguments", ())
ERROR(invalid_infix_left_input,sema_tcd,none,
  "function with 'infix_left' specified must take a two element tuple as input",
     ())
ERROR(infix_left_not_an_operator,sema_tcd,none,
      "only operators may be declared 'infix_left'", ())
ERROR(infix_left_invalid_on_decls,sema_tcd,none,
      "declaration cannot be declared 'infix_left'", ())
ERROR(binops_infix_left,sema_tcd,none,
      "binary operators must be declared 'infix_left'", ())

ERROR(invalid_decl_attribute,sema_tcd,none,
      "attribute '%0' cannot be applied to declaration", (StringRef))

//------------------------------------------------------------------------------
// Type Check Expressions
//------------------------------------------------------------------------------

NOTE(found_candidate,sema_tce,none,
     "found this candidate", ())
NOTE(first_declaration,sema_tce,none,
     "first declaration", ())
NOTE(second_declaration,sema_tce,none,
     "second declaration", ())

ERROR(no_IntegerLiteralType_found,sema_tce,none,
      "standard library error: IntegerLiteralType not defined", ())
ERROR(no_FloatLiteralType_found,sema_tce,none,
      "standard library error: FloatLiteralType not defined", ())

ERROR(ambiguous_expression_unresolved,sema_tce,none,
      "ambiguous expression was not resolved to a concrete type", ())

ERROR(invalid_module_member,sema_tce,none,
      "%0 is not a member of %1 module", (Identifier, Identifier))

ERROR(unary_op_without_attribute,sema_tce,none,
      "use of unary operator without 'unary' attribute specified", ())
ERROR(binary_op_without_attribute,sema_tce,none,
      "use of binary operator without 'infix' attribute specified", ())
ERROR(called_expr_isnt_function,sema_tce,none,
      "called expression isn't a function", ())
ERROR(overloading_ambiguity,sema_tce,none,
      "overloading ambiguity found", ())
ERROR(no_candidates,sema_tce,none,
      "no candidates found for %select{binary operator|unary operator|call}0",
      (unsigned))
ERROR(no_candidates_ref,sema_tce,none,
      "no candidates found for reference to overloaded %0", (Identifier))
ERROR(use_undeclared_identifier,sema_tce,none,
      "use of undeclared identifier", ())
ERROR(field_number_too_large,sema_tce,none,
      "field number is too large for tuple", ())
ERROR(no_valid_dot_expression,sema_tce,none,
      "base type %0 has no valid '.' expression for this field", (Type))
    
ERROR(closure_not_function_type,sema_tce,none,
      "closure inferred to have non-function type %0", (Type))
NOTE(while_converting_closure_body_to_inferred_return_type,sema,none,
     "while converting closure body to inferred return type %0", (Type))

// Operators
ERROR(binop_not_infix,sema_tce,none,
      "binary operator has no infix attribute", ())
ERROR(binop_mismatched_infix,sema_tce,none,
      "binary operator has overloads with incompatible infixity", ())

ERROR(binop_not_overloaded,sema_tce,none,
      "operator is not overloaded as a binary operator", ())
ERROR(unknown_binop,sema_tce,none,
       "operator is not a known binary operator", ())
ERROR(non_assoc_adjacent,sema_tce,none,
      "non-associative operator is adjacent to operator of same precedence", ())
ERROR(incompatible_assoc,sema_tce,none,
      "operator is adjacent to operator of same precedence"
      " but incompatible associativity", ())
ERROR(address_of_rvalue,sema_tce,none,
      "cannot apply '&' to non-lvalue of type %0", (Type))

ERROR(condition_convert_limit_reached,sema_tce,none,
      "getLogicValue() for type %0 used in a conditional does not return "
      "a bool", (Type))

//------------------------------------------------------------------------------
// Type Check Statements
//------------------------------------------------------------------------------

ERROR(return_invalid_outside_func,sema_tcs,none,
      "return invalid outside of a func", ())
ERROR(expression_unused_function,sema_tcs,none,
      "expression resolves to an unused function", ())
ERROR(expression_unused_lvalue,sema_tcs,none,
      "expression resolves to an unused l-value", ())
ERROR(assignment_lhs_not_lvalue,sema_tcs,none,
      "cannot assign to the result of this expression", ())

//------------------------------------------------------------------------------
// Type Check Patterns
//------------------------------------------------------------------------------

ERROR(cannot_infer_type_for_pattern,sema_tcp,none,
      "cannot infer a type for this pattern", ())
ERROR(pattern_type_mismatch_context,sema_tcp,none,
      "type annotation does not match contextual type %0", (Type))
ERROR(tuple_pattern_in_non_tuple_context,sema_tcp,none,
      "tuple pattern cannot match values of the non-tuple type %0", (Type))
ERROR(tuple_pattern_length_mismatch,sema_tcp,none,
      "tuple pattern has the wrong length for tuple type %0", (Type))
ERROR(coerced_tuple_pattern_has_init,sema_tcp,none,
      "tuple element in pattern cannot have a default initializer", ())
ERROR(named_pattern_not_materializable,sema_tcp,none,
      "type %0 of named pattern is not materializable", (Type))

//==============================================================================
// IR Generation Diagnostics
//==============================================================================

ERROR(no_llvm_target,irgen,none,
      "error loading LLVM target for triple '%0': %1", (StringRef, StringRef))
ERROR(error_opening_output,irgen,none,
      "error opening '%0' for output: %1", (StringRef, StringRef))
ERROR(error_codegen_init_fail,irgen,none,
      "cannot initialize code generation passes for target", ())

ERROR(irgen_unimplemented,irgen,none,
      "unimplemented IR generation feature %0", (StringRef))

#if defined(DIAG)
#  undef DIAG
#endif
#undef NOTE
#undef WARNING
#undef ERROR
