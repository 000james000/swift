//===--- SILNodes.def - Swift SIL Metaprogramming ---------------*- C++ -*-===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2015 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See http://swift.org/LICENSE.txt for license information
// See http://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//
//
// This file defines macros used for macro-metaprogramming with SIL nodes.
//
//===----------------------------------------------------------------------===//

/// VALUE(Id, Parent)
///   The expression enumerator value is an ValueKind.  The node's class name is
///   Id, and the name of its base class (in the SILValue hierarchy) is Parent.
#ifndef VALUE
#define VALUE(Id, Parent)
#endif

/// INST(Id, Parent)
///   The expression enumerator value is an ValueKind.  The node's class name is
///   Id, and the name of its base class (in the SILInstruction hierarchy) is
///   Parent.
#ifndef INST
#define INST(Id, Parent) VALUE(Id, Parent)
#endif

/// An abstract instruction is an abstract base class in the hierarchy;
/// it is never a most-derived type, and it does not have an enumerator in
/// ValueKind.
///
/// Most metaprograms do not care about abstract expressions, so the default
/// is to ignore them.
#ifndef ABSTRACT_VALUE
#define ABSTRACT_VALUE(Id, Parent)
#endif

/// A convenience for determining the range of values.  These will always
/// appear immediately after the last member.
#ifndef VALUE_RANGE
#define VALUE_RANGE(Id, First, Last)
#endif

VALUE(SILArgument, ValueBase)

// Please keep the order of instructions consistent with the order of their
// descriptions in the SIL reference in docs/SIL.rst.

ABSTRACT_VALUE(SILInstruction, ValueBase)
  // Allocation and Deallocation
  ABSTRACT_VALUE(AllocInst, SILInstruction)
    INST(AllocStackInst, AllocInst)
    INST(AllocRefInst, AllocInst)
    VALUE_RANGE(AllocInst, AllocStackInst, AllocRefInst)
  INST(AllocBoxInst, SILInstruction)
  INST(AllocArrayInst, SILInstruction)
  INST(DeallocStackInst, SILInstruction)
  INST(DeallocRefInst, SILInstruction)

  // Accessing memory
  INST(LoadInst, SILInstruction)
  INST(StoreInst, SILInstruction)
  INST(InitializeVarInst, SILInstruction)
  INST(CopyAddrInst, SILInstruction)
  INST(DestroyAddrInst, SILInstruction)

  // Reference Counting
  ABSTRACT_VALUE(RefCountingInst, SILInstruction)
    INST(RetainInst, RefCountingInst)
    INST(RetainAutoreleasedInst, RefCountingInst)
    INST(ReleaseInst, RefCountingInst)
    INST(WeakRetainInst, RefCountingInst)
    INST(WeakReleaseInst, RefCountingInst)
    VALUE_RANGE(RefCountingInst, RetainInst, WeakReleaseInst)

  // Literals
  INST(FunctionRefInst, SILInstruction)
  INST(BuiltinFunctionRefInst, SILInstruction)
  INST(GlobalAddrInst, SILInstruction)
  INST(IntegerLiteralInst, SILInstruction)
  INST(FloatLiteralInst, SILInstruction)
  INST(StringLiteralInst, SILInstruction)
  INST(BuiltinZeroInst, SILInstruction)
  INST(ModuleInst, SILInstruction)

  // Dynamic Dispatch
  ABSTRACT_VALUE(DynamicMethodInst, SILInstruction)
    INST(ClassMethodInst, DynamicMethodInst)
    INST(SuperMethodInst, DynamicMethodInst)
    INST(ArchetypeMethodInst, DynamicMethodInst)
    INST(ProtocolMethodInst, DynamicMethodInst)
    VALUE_RANGE(DynamicMethodInst, ClassMethodInst, ProtocolMethodInst)

  // Function Application
  ABSTRACT_VALUE(FunctionInst, SILInstruction)
    INST(ApplyInst, FunctionInst)
    INST(PartialApplyInst, FunctionInst)
    VALUE_RANGE(FunctionInst, ApplyInst, PartialApplyInst)
  INST(SpecializeInst, SILInstruction)

  // Metatypes
  INST(MetatypeInst, SILInstruction)
  INST(ClassMetatypeInst, SILInstruction)
  INST(ArchetypeMetatypeInst, SILInstruction)
  INST(ProtocolMetatypeInst, SILInstruction)
  INST(AssociatedMetatypeInst, SILInstruction)

  // Aggregate Types
  INST(TupleInst, SILInstruction)
  INST(TupleExtractInst, SILInstruction)
  INST(TupleElementAddrInst, SILInstruction)
  INST(StructInst, SILInstruction)
  INST(StructExtractInst, SILInstruction)
  INST(StructElementAddrInst, SILInstruction)
  INST(RefElementAddrInst, SILInstruction)

  // Protocol and Protocol Composition Types
  INST(InitExistentialInst, SILInstruction)
  INST(UpcastExistentialInst, SILInstruction)
  INST(DeinitExistentialInst, SILInstruction)
  INST(ProjectExistentialInst, SILInstruction)
  INST(InitExistentialRefInst, SILInstruction)
  INST(UpcastExistentialRefInst, SILInstruction)
  INST(ProjectExistentialRefInst, SILInstruction)

  ABSTRACT_VALUE(ConversionInst, SILInstruction)
  
    // Unchecked Conversions
    INST(CoerceInst, ConversionInst)
    INST(UpcastInst, ConversionInst)
    INST(ArchetypeRefToSuperInst, ConversionInst)
    INST(AddressToPointerInst, ConversionInst)
    INST(PointerToAddressInst, ConversionInst)
    INST(RefToObjectPointerInst, ConversionInst)
    INST(ObjectPointerToRefInst, ConversionInst)
    INST(RefToRawPointerInst, ConversionInst)
    INST(RawPointerToRefInst, ConversionInst)
    INST(ConvertFunctionInst, ConversionInst)
    INST(ConvertCCInst, ConversionInst)
    INST(BridgeToBlockInst, ConversionInst)
    INST(ThinToThickFunctionInst, ConversionInst)

    // Checked Conversions
    ABSTRACT_VALUE(CheckedConversionInst, ConversionInst)
      INST(DowncastInst, CheckedConversionInst)
      INST(SuperToArchetypeRefInst, CheckedConversionInst)
      INST(DowncastArchetypeRefInst, CheckedConversionInst)
      INST(DowncastArchetypeAddrInst, CheckedConversionInst)
      INST(ProjectDowncastExistentialAddrInst, CheckedConversionInst)
      INST(DowncastExistentialRefInst, CheckedConversionInst)
      VALUE_RANGE(CheckedConversionInst, SuperToArchetypeRefInst, DowncastExistentialRefInst)
    VALUE_RANGE(ConversionInst, ConvertFunctionInst, DowncastExistentialRefInst)
  INST(IsNonnullInst, SILInstruction)

  // Array Indexing
  ABSTRACT_VALUE(IndexingInst, SILInstruction)
    INST(IndexAddrInst, IndexingInst)
    INST(IndexRawPointerInst, IndexingInst)
    VALUE_RANGE(IndexingInst, IndexAddrInst, IndexRawPointerInst)

  // Terminators
  ABSTRACT_VALUE(TermInst, SILInstruction)
    INST(UnreachableInst, TermInst)
    INST(ReturnInst, TermInst)
    INST(AutoreleaseReturnInst, TermInst)
    INST(BranchInst, TermInst)
    INST(CondBranchInst, TermInst)
    INST(SwitchOneofInst, TermInst)
    VALUE_RANGE(TermInst, UnreachableInst, SwitchOneofInst)

  VALUE_RANGE(SILInstruction, AllocStackInst, CondBranchInst)

#undef VALUE_RANGE
#undef ABSTRACT_VALUE
#undef INST
#undef VALUE
