//===--- Semantics.def - Semantics Attribute Definitions -------------*- C++ -*-===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2017 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://swift.org/LICENSE.txt for license information
// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//
//
// SEMA_ATTR(NAME, C_STR)
//
//===----------------------------------------------------------------------===//

SEMA_ATTR(STRING_EQUALS, "string.equals")
SEMA_ATTR(STRING_MAKE_UTF8, "string.makeUTF8")
SEMA_ATTR(STRING_ESCAPE_PERCENT_GET, "string.escapePercent.get")
SEMA_ATTR(STRING_CONCAT, "string.concat")
SEMA_ATTR(STRING_APPEND, "string.append")
SEMA_ATTR(STRING_INIT_EMPTY, "string.init_empty")
SEMA_ATTR(STRING_PLUS_EQUALS, "string.plusequals")
SEMA_ATTR(FIND_STRING_SWITCH_CASE, "findStringSwitchCase")
SEMA_ATTR(FIND_STRING_SWITCH_CASE_WITH_CACHE, "findStringSwitchCaseWithCache")

SEMA_ATTR(SWIFT_CONCURRENT_ASYNC, "swift.concurrent.async")
SEMA_ATTR(SWIFT_CONCURRENT_SAFE, "swift.concurrent.safe")
SEMA_ATTR(SWIFT_CONCURRENT, "swift.concurrent")

SEMA_ATTR(ARRAY_APPEND_CONTENTS_OF, "array.append_contentsOf")
SEMA_ATTR(ARRAY_APPEND_ELEMENT, "array.append_element")
SEMA_ATTR(ARRAY_CHECK_INDEX, "array.check_index")
SEMA_ATTR(ARRAY_CHECK_SUBSCRIPT, "array.check_subscript")
SEMA_ATTR(ARRAY_GET_CAPACITY, "array.get_capacity")
SEMA_ATTR(ARRAY_GET_COUNT, "array.get_count")
SEMA_ATTR(ARRAY_GET_ELEMENT, "array.get_element")
SEMA_ATTR(ARRAY_GET_ELEMENT_ADDRESS, "array.get_element_address")
SEMA_ATTR(ARRAY_INIT, "array.init")
SEMA_ATTR(ARRAY_INIT_EMPTY, "array.init.empty")
SEMA_ATTR(ARRAY_MAKE_MUTABLE, "array.make_mutable")
SEMA_ATTR(ARRAY_MUTATE_UNKNOWN, "array.mutate_unknown")
SEMA_ATTR(ARRAY_PROPS_IS_NATIVE_TYPE_CHECKED, "array.props.isNativeTypeChecked")
SEMA_ATTR(ARRAY_RESERVE_CAPACITY_FOR_APPEND, "array.reserve_capacity_for_append")
SEMA_ATTR(ARRAY_UNINITIALIZED, "array.uninitialized")
SEMA_ATTR(ARRAY_WITH_UNSAFE_MUTABLE_BUFFER_POINTER, "array.withUnsafeMutableBufferPointer")
SEMA_ATTR(ARRAY_COUNT, "array.count")
SEMA_ATTR(ARRAY_DEALLOC_UNINITIALIZED, "array.dealloc_uninitialized")
SEMA_ATTR(ARRAY_UNINITIALIZED_INTRINSIC, "array.uninitialized_intrinsic")

SEMA_ATTR(OPTIMIZE_SIL_SPECIALIZE_GENERIC_NEVER, "optimize.sil.specialize.generic.never")
SEMA_ATTR(OPTIMIZE_SIL_SPECIALIZE_GENERIC_PARTIAL_NEVER,
          "optimize.sil.specialize.generic.partial.never")
SEMA_ATTR(OPTIMIZE_SIL_SPECIALIZE_GENERIC_SIZE_NEVER, "optimize.sil.specialize.generic.size.never")

SEMA_ATTR(OSLOG_INTERPOLATION_INIT, "oslog.interpolation.init")
SEMA_ATTR(OSLOG_MESSAGE_INIT_INTERPOLATION, "oslog.message.init_interpolation")
SEMA_ATTR(OSLOG_MESSAGE_INIT_STRING_LITERAL, "oslog.message.init_stringliteral")

SEMA_ATTR(TYPE_CHECKER_OPEN_EXISTENTIAL, "typechecker._openExistential(_:do:)")
SEMA_ATTR(TYPE_CHECKER_TYPE, "typechecker.type(of:)")
SEMA_ATTR(TYPE_CHECKER_WITHOUT_ACTUALLY_ESCAPING, "typechecker.withoutActuallyEscaping(_:do:)")

SEMA_ATTR(AVAILABILITY_OSVERSION, "availability.osversion")

SEMA_ATTR(CONSTANT_EVALUABLE, "constant_evaluable")
SEMA_ATTR(EXIT, "exit")
SEMA_ATTR(FASTPATH, "fastpath")
SEMA_ATTR(SLOWPATH, "slowpath")
SEMA_ATTR(PROGRAMTERMINATION_POINT, "programtermination_point")
SEMA_ATTR(CONVERT_TO_OBJECTIVE_C, "convertToObjectiveC")

// SEMA_ATTR(, "456")
// SEMA_ATTR(, "123")
// SEMA_ATTR(, "223")
// SEMA_ATTR(, "bar")
// SEMA_ATTR(, "class")
// SEMA_ATTR(, "crazy")
// SEMA_ATTR(, "enum")
// SEMA_ATTR(, "struct")
// SEMA_ATTR(, "struct1")
// SEMA_ATTR(, "struct2")
// SEMA_ATTR(, "test_driver")

#undef SEMA_ATTR

