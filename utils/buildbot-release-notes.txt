2014-03-05
----------

* All values now have a 'self' property, exactly equivalent to the value
  itself:

    let x = 0
    let x2 = x.self

  Types also have a 'self' property that is the type object for that
  type:

    let theClass = NSObject.self
    let theObj = theClass()

  References to type names are now disallowed outside of a constructor call
  or member reference; to get a type object as a value, "T.self" is required.
  This prevents the mistake of intending to construct an instance of a
  class but forgetting the parens and ending up with the class object instead:

    let x = MyObject // oops, I meant MyObject()...
    return x.description() // ...and I accidentally called +description
                           //    instead of -description

* Properties in Objective-C protocols are now correctly imported as properties.
  (Previously the getter and setter were imported as methods.)

2014-02-26
----------

* The 'override' attribute is now required when overriding a method,
  property, or subscript from a superclass. For example:

    class A {
      func foo() { }
    }

    class B : A {
      @override func foo() { } // 'override' is required here
    }

* We're renaming 'val' back to 'let'.  The compiler accepts both for this week,
  next week it will just accept 'let'.  Please migrate your code this week, sorry
  for the back and forth on this.

* Swift now supports "#if", "#else" and "#endif" blocks, along with target 
  configuration expressions, to allow for conditional compilation within
  declaration and statement contexts.

  Target configurations represent certain static information about the
  compile-time build environment.  They are implicit, hard-wired into the
  compiler, and can only be referenced within the conditional expression of an
  "#if" block.

  Target configurations are tested against their values via a pseudo-function
  invocation expression, taking a single argument expressed as an identitifer.
  The argument represents certain static build-time information.

  There are currently two supported target configurations:
    "os", which can have the values OSX or iOS
    "arch", which can have the values i386, x86_64, arm and arm64

  Within the context of an "#if" block's conditional expression, a target
  configuration expression can evaluate to either 'true' or 'false'.

  For example:

    #if arch(x86_64)
      println("Building for x86_64") 
    #else
      println("Not building for x86_64")
    #endif

    class C {
    #if os(OSX)
      func foo() {
        // OSX stuff goes here
      }
    #else
      func foo() {
        // non-OSX stuff goes here
      }
    #endif
    } 

  The conditional expression of an "#if" block can be composed of one or more of
  the following expression types:
    - A unary expression, using '!'
    - A binary expression, using '&&' or '||'
    - A parenthesized expression
    - A target configuration expression

  For example:

    #if os(iOS) && !arch(I386)
    ...
    #endif

  Note that #if/#else/#endif blocks do not constitute a preprocessor, and must
  form valid and complete expressions or statements. Hence, the following
  produces a parser error:

    class C {

    #if os(iOS)
      func foo() {}
    }
    #else
      func bar() {}
      func baz() {}
    }
    #endif

  Also note that "active" code will be parsed, typechecked and emitted, while
  "inactive" code will only be parsed.  This is why code in an inactive #if or 
  #else block will produce parser errors for malformed code.  This allows the
  compiler to detect basic errors in inactive regions.

  This is the first step to getting functionality parity with the important
  subset of the C preprocessor.  Further refinements are planned for later.

* Swift now has both fully-closed ranges, which include their endpoint, and
  half-open ranges, which don't.

    (swift) for x in 0...5 { print(x) } ; print('\n') // half-open range
    01234
    (swift) for x in 0..5 { print(x) } ; print('\n')  // fully-closed range
    012345

* Property accessors have a new brace-based syntax, instead of using the former
  "label like" syntax.  The new syntax is:

  var computedProperty: Int {
    get {
      return _storage
    }
    set {
      _storage = value
    }
  }

  var implicitGet: Int {    // This form still works.
    return 42
  }

  var storedPropertyWithObservingAccessors: Int = 0 {
    willSet { ... }
    didSet { ... }
  }

* Properties and subscripts now work in protocols, allowing you to do things
  like:

    protocol Subscriptable {
      subscript(idx1: Int, idx2: Int) -> Int { get set }
      var prop: Int { get }
    }

    func foo(s: Subscriptable) {
      return s.prop + s[42, 19]
    }

  These can be used for generic algorithms now as well.

* The syntax for referring to the type of a type, 'T.metatype', has been
  changed to 'T.Type'. The syntax for getting the type of a value, 'typeof(x)',
  has been changed to 'x.type'.

* 'DynamicSelf' is now called 'Self'; the semantics are unchanged.

* 'destructor' has been replaced with 'deinit', to emphasize that it
  is related to 'init'. We will refer to these as
  'deinitializers'. We've also dropped the parentheses, i.e.:

    class MyClass {
      deinit {
        // release any resources we might have acquired, etc.
      }
    }

* Class methods defined within extensions of Objective-C classes can
  now refer to 'self', including using 'instancetype' methods. As a
  result, NSMutableString, NSMutableArray, and NSMutableDictionary
  objects can now be created with their respective literals, i.e.,

    var dict: NSMutableDictionary = ["a" : 1, "b" : 2]


2014-02-19
----------

* The "Stream" protocol has been renamed back to "Generator," which is
  precedented in other languages and causes less confusion with I/O
  streaming.

* The "type" keyword was split into two: "static" and "class".  One can define
  static functions and static properties in structs and enums like this:

    struct S {
      static func foo() {}
      static var bar: Int = 0
    }
    enum E {
      static func foo() {}
    }

  "class" keyword allows one to define class properties and class methods in
  classes and protocols:

    class C {
      class func foo() {}
      class var bar: Int = 0
    }
    protocol P {
      class func foo() {}
      class var bar: Int = 0
    }

  When using "class" and "static" in the extension, the choice of keyword
  depends on the type being extended:

    extension S {
      static func baz() {}
    }
    extension C {
      class func baz() {}
    }

* The 'let' keyword is no longer recognized.  Please move to 'val'.

* The standard library has been renamed to 'Swift' (instead of 'swift') to be
  more consistent with other modules on our platforms.

* 'NSInteger' and other types that are layout-compatible with Swift standard
  library types are now imported directly as those standard library types.

* Optional types now support a convenience method named "cache" to cache the
  result of a closure. For example:

  class Foo {
    var _lazyProperty: Int?
    var property: Int {
      return _lazyProperty.cache { computeLazyProperty() }
    }
  }

2014-02-12
----------

* We are experimenting with a new message send syntax. For example:

    SKAction.colorizeWithColor(SKColor.whiteColor()) colorBlendFactor(1.0) duration(0.0)

  When the message send is too long to fit on a single line, subsequent lines 
  must be indented from the start of the statement or declaration. For
  example, this is a single message send:

    SKAction.colorizeWithColor(SKColor.whiteColor()) 
             colorBlendFactor(1.0) 
             duration(0.0)

  while this is a message send to colorizeWithColor: followed by calls
  to 'colorBlendFactor' and 'duration' (on self or to a global function):

    SKAction.colorizeWithColor(SKColor.whiteColor()) 
    colorBlendFactor(1.0) // call to 'colorBlendFactor'
    duration(0.0) // call to 'duration'

* We are renaming the 'let' keyword to 'val'.  The 'let' keyword didn't work
  out primarily because it is not a noun, so "defining a let" never sounded 
  right.  We chose 'val' over 'const' and other options because 'var' and 'val
  have similar semantics (making syntactic similarity useful), because 'const' 
  has varied and sordid connotations in C that we don't want to bring over, and 
  because we don't want to punish the "preferred" case with a longer keyword.

  For migration purposes, the compiler now accepts 'let' and 'val' as synonyms,
  'let' will be removed next week.

* Selector arguments in function arguments with only a type are now implicitly
  named after the selector chunk that contains them.  For example, instead of:
  
    func addIntsWithFirst(first : Int) second(second : Int) -> Int {
      return first+second
    }
  
  you can now write:
  
    func addIntsWithFirst(first : Int) second(Int) -> Int {
      return first+second
    }
    
  if you want to explicitly want to ignore an argument, it is recommended that
  you continue to use the "_" to discard it, as in:
  
    func addIntsWithFirst(first : Int) second(_ : Int) -> Int {...}

* The @inout attribute in argument lists has been promoted to a 
  context-sensitive keyword.  Where before you might have written:

    func swap<T>(a : @inout T, b : @inout T) {
      (a,b) = (b,a)
    }

  You are now required to write:
    func swap<T>(inout a : T, inout b : T) {
      (a,b) = (b,a)
    }

  We made this change because "inout" is a fundamental part of the type
  system, which attributes are a poor match for.  The inout keyword is
  also orthogonal to the var and let keywords (which may be specified in
  the same place), so it fits naturally there.

* The "@mutating" attribute (which can be used on functions in structs,
  enums, and protocols) has been promoted to a context-sensitive keyword.
  Mutating struct methods are now written as:
    struct SomeStruct {
      mutating func f() {}
    }

* Half-open ranges (those that don't include their endpoint) are now
  spelled with three '.'s instead of two, for consistency with Ruby.

    (swift) for x in 0...5 { print(x) } ; print('\n') // new syntax
    01234
  
  Next week, we'll introduce a fully-closed range which does include 
  its endpoint.  This will provide:

    (swift) for x in 0..5 { print(x) } ; print('\n')  // coming soon
    012345
  
  These changes are being released separately so that users have a
  chance to update their code before its semantics changes.

* Objective-C properties with custom getters/setters are now imported
  into Swift as properties. For example, the Objective-C property

    @property (getter=isEnabled) BOOL enabled;

  was previously imported as getter (isEnabled) and setter
  (setEnabled) methods. Now, it is imported as a property (enabled).

* didSet/willSet properties may now have an initial value specified:

     class MyAwesomeView : UIView {
      var enabled : Bool = false {       // Initial value.
      didSet: self.needsDisplay = true
      }
      ...
    }

  they can also be used as non-member properties now, e.g. as a global
  variable or a local variable in a function.

* Objective-C instancetype methods are now imported as methods that
  return Swift's "DynamicSelf" type. While DynamicSelf is not
  generally useful for defining methods in Swift, importing to it
  eliminates the need for casting with the numerous instancetype APIs,
  e.g.,

    let tileNode: SKSpriteNode = SKSpriteNode.spriteNodeWithTexture(tileAtlas.textureNamed("tile\(tileNumber).png"))!

  becomes

    let tileNode = SKSpriteNode.spriteNodeWithTexture(tileAtlas.textureNamed("tile\(tileNumber).png"))

  DynamicSelf will become more interesting in the coming weeks.

2014-02-05
----------

* 'if' and 'while' statements can now conditionally bind variables. If the
  condition of an 'if' or 'while' statement is a 'let' declaration, then the
  right-hand expression is evaluated as an Optional value, and control flow
  proceeds by considering the binding to be true if the Optional contains a
  value, or false if it is empty, and the variables are available in the true
  branch. This allows for elegant testing of dynamic types, methods, nullable
  pointers, and other Optional things:

    class B : NSObject {}
    class D : B {
      func foo() { println("we have a D") }
    }
    var b: B = D()
    if let d = b as D {
      d.foo()
    }
    var id: AnyObject = D()
    if let foo = id.foo {
      foo()
    }

* When referring to a member of an 'AnyObject' (or 'AnyClass') object
  and using it directly (such as calling it, subscripting, or
  accessing a property on it), one no longer has to write the '?' or
  '!'. The run-time check will be performed implicitly. For example:

    func doSomethingOnViews(views: NSArray) {
      for view in views {
          view.updateLayer() // no '!' needed
      }
    }

  Note that one can still test whether the member is available at
  runtime using '?', testing the optional result, or conditionally
  binding a variable to the resulting member.

* The "swift" command line tool can now create executables and libraries
  directly, just like Clang. Use "swift main.swift" to create an executable and
  "swift -emit-library -o foo.dylib foo.swift" to create a library.

* Object files emitted by Swift are not debuggable on their own, even if you
  compiled them with the "-g" option. This was already true if you had multiple
  files in your project. To produce a debuggable Swift binary from the command
  line, you must compile and link in a single step with "swift", or pass object
  files AND swiftmodule files back into "swift" after compilation.
  (Or use Xcode.)

* 'import' will no longer import other source files, only built modules.

* The current directory is no longer implicitly an import path. Use "-I ." if
  you have modules in your current directory.


2014-01-29
----------

* Properties in structs and classes may now have "willSet:" and "didSet:"
  observing accessors defined on them:

  For example, where before you may have written something like this in a class:
  
    class MyAwesomeView : UIView {
      var _enabled : Bool  // storage
      var enabled : Bool { // computed property
      get:
        return _enabled
      set: 
        _enabled = value
        self.needDisplay = true
      }
      ...
    }

  you can now simply write:

    class MyAwesomeView : UIView {
      var enabled : Bool {  // Has storage & observing methods
      didSet: self.needDisplay = true
      }
      ...
    }

  Similarly, if you want notification before the value is stored, you can use
  willSet, which gets the incoming value before it is stored:
  
    var x : Int {
    willSet(value):  // value is the default and may be elided, as with set:
      println("changing from \(x) to \(value)")
    didSet:
      println("we've got a value of \(x) now.\n")
    }
    
  The willSet/didSet observers are triggered on any store to the property,
  except stores from init(), destructors, or from within the observers
  themselves.
    
  Overall, a property now may either be "stored" (the default), "computed" 
  (have a get: and optionally a set: specifier), or a observed 
  (willSet/didSet) property.  It is not possible to have a custom getter 
  or setter on a observed property, since they have storage.

  Two known-missing bits are:
   <rdar://problem/15920332> didSet/willSet variables need to allow initializers
   <rdar://problem/15922884> support non-member didset/willset properties
   
  Because of the first one, for now, you need to explicitly store an initial
  value to the property in your init() method.

* Objective-C properties with custom getter or setter names are (temporarily)
  not imported into Swift; the getter and setter will be imported individually
  as methods instead. Previously, they would appear as properties within the
  Objective-C class, but attempting to use the accessor with the customized
  name would result in a crash.

  The long-term fix is tracked as <rdar://problem/15877160>.

* Computed 'type' properties (that is, properties of types, rather
  than of values of the type) are now permitted on classes, on generic
  structs and enums, and in extensions.  Stored 'type' properties in
  these contexts remain unimplemented.

  The implementation of stored 'type' properties is tracked as
  <rdar://problem/15915785> (for classes) and <rdar://problem/15915867>
  (for generic types).

* The following command-line flags have been deprecated in favor of new
  spellings. The old spellings will be removed in the following week's build:

  -emit-llvm              ->  -emit-ir
  -triple                 ->  -target
  -serialize-diagnostics  ->  -serialize-diagnostics-path

* Imported NS_OPTIONS types now have a default initializer which produces a
  value with no options set. They can also be initialized to the empty set with
  'nil'. These are equivalent:

    var x = NSMatchingOptions()
    var y: NSMatchingOptions = nil


Release notes for older releases are available at

