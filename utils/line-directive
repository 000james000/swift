#!/usr/bin/env python
#convert line numbers in error messages according to "line directive" comments
import sys
import re
import bisect

line_pattern = re.compile(
 r'^// ###line ([0-9]+) "([^"]+)"\s*')

def _make_line_map(stream):
    """
    >>> from StringIO import StringIO
    >>> _make_line_map(StringIO('''// ###line 3 "foo.bar"
    ... line 2
    ... line 3
    ... line 4
    ... // ###line 20 "baz.txt"
    ... line 6
    ... line 7
    ... '''))
    [(0, '?', 0), (1, 'foo.bar', 3), (5, 'baz.txt', 20)]

"""
    result = [(0, '?', 0)]
    for i, l in enumerate(stream.readlines()):
        m = line_pattern.match(l)
        if m:
            result.append((i+1, m.group(2), int(m.group(1))))
    return result

error_pattern = re.compile(
    '^(' + re.escape(sys.argv[1]) + '):([0-9]+):([0-9]+):(.*)')


_line_maps = {}

def fline_map(filename):
    map = _line_maps.get(filename)
    if map is None:
        map = _make_line_map(open(filename))
        _line_maps[filename] = map
    return map

def map_line(filename, line_num):
    assert(line_num > 0)
    map = fline_map(filename)
    index = bisect.bisect_left(map, (line_num,'',0))
    base = map[index - 1]
    return base[1], base[2] + (line_num - base[0]-1)

def run():
    if len(sys.argv) < 1:
        import doctest
        doctest.testmod()
    else:
        while True:
            line = sys.stdin.readline()
            if line == '': break
            m = error_pattern.match(line.rstrip('\n'))
            if m:
                file, line_num = map_line(m.group(1), int(m.group(2)))
                line = '%s:%s:%s:%s\n' % (file, line_num, int(m.group(3))+2, m.group(4))
            sys.stdout.write(line)
    
        
if __name__ == '__main__':
    run()
