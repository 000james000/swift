//===--- FloatingPointParsing.swift -----------------------------------===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2019 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://swift.org/LICENSE.txt for license information
// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//

// This test verifies the performance of parsing a floating point value
// from a String.

import TestsUtils

public let FloatingPointParsing = [
  BenchmarkInfo(
    name: "ParseFloat.Float.small",
    runFunction: run_ParseFloatSmall,
    tags: [.validation, .api, .runtime, .String]),

  BenchmarkInfo(
    name: "ParseFloat.Double.small",
    runFunction: run_ParseDoubleSmall,
    tags: [.validation, .api, .runtime, .String]),

  BenchmarkInfo(
    name: "ParseFloat.Float80.small",
    runFunction: run_ParseFloat80Small,
    tags: [.validation, .api, .runtime, .String]),

  BenchmarkInfo(
    name: "ParseFloat.Float.uniform",
    runFunction: run_ParseFloatUniform,
    tags: [.validation, .api, .runtime, .String]),

  BenchmarkInfo(
    name: "ParseFloat.Double.uniform",
    runFunction: run_ParseDoubleUniform,
    tags: [.validation, .api, .runtime, .String]),

  BenchmarkInfo(
    name: "ParseFloat.Float80.uniform",
    runFunction: run_ParseFloat80Uniform,
    tags: [.validation, .api, .runtime, .String]),
]

// Mirroring the FloatingPointPrinting test, use a "small" test
// and a "uniform" test to exercise both standard and scientific
// notation.

let smallWorkload = [
  "0.009900990099009901", "0.019801980198019802", "0.0297029702970297", "0.039603960396039604", "0.04950495049504951",
  "0.0594059405940594", "0.06930693069306931", "0.07920792079207921", "0.0891089108910891", "0.09900990099009901", 
  "0.10891089108910891", "0.1188118811881188", "0.12871287128712872", "0.13861386138613863", "0.1485148514851485",
  "0.15841584158415842", "0.16831683168316833", "0.1782178217821782", "0.18811881188118812", "0.19801980198019803",
  "0.2079207920792079", "0.21782178217821782", "0.22772277227722773", "0.2376237623762376", "0.24752475247524752", 
  "0.25742574257425743", "0.26732673267326734", "0.27722772277227725", "0.2871287128712871", "0.297029702970297", 
  "0.3069306930693069", "0.31683168316831684", "0.32673267326732675", "0.33663366336633666", "0.3465346534653465", 
  "0.3564356435643564", "0.36633663366336633", "0.37623762376237624", "0.38613861386138615", "0.39603960396039606", 
  "0.40594059405940597", "0.4158415841584158", "0.42574257425742573", "0.43564356435643564", "0.44554455445544555", 
  "0.45544554455445546", "0.46534653465346537", "0.4752475247524752", "0.48514851485148514", "0.49504950495049505",
  "0.504950495049505", "0.5148514851485149", "0.5247524752475248", "0.5346534653465347", "0.5445544554455446", 
  "0.5544554455445545", "0.5643564356435643", "0.5742574257425742", "0.5841584158415841", "0.594059405940594", 
  "0.6039603960396039", "0.6138613861386139", "0.6237623762376238", "0.6336633663366337", "0.6435643564356436", 
  "0.6534653465346535", "0.6633663366336634", "0.6732673267326733", "0.6831683168316832", "0.693069306930693", 
  "0.7029702970297029", "0.7128712871287128", "0.7227722772277227", "0.7326732673267327", "0.7425742574257426", 
  "0.7524752475247525", "0.7623762376237624", "0.7722772277227723", "0.7821782178217822", "0.7920792079207921", 
  "0.801980198019802", "0.8118811881188119", "0.8217821782178217", "0.8316831683168316", "0.8415841584158416",
  "0.8514851485148515", "0.8613861386138614", "0.8712871287128713", "0.8811881188118812", "0.8910891089108911", 
  "0.900990099009901", "0.9108910891089109", "0.9207920792079208", "0.9306930693069307", "0.9405940594059405", 
  "0.9504950495049505", "0.9603960396039604", "0.9702970297029703", "0.9801980198019802", "0.9900990099009901"
  ]

let uniformWorkload = [
  "0.0", "2.3975646884872965e-296", "5.164702537149895e-284", "1.1120690549967682e-271", "2.3934345283193818e-259", 
  "5.1488004017107686e-247", "1.1070724447745072e-234", "2.3791490050117677e-222", "5.110134130201389e-210", "1.0969748939128968e-197", 
  "2.3534373682645347e-185", "5.045881915716338e-173", "1.0811498557495414e-160", "2.3149085788054597e-148", "4.9529556965870615e-136", 
  "1.05891185171661e-123", "2.262041165004329e-111", "4.827978740776327e-99", "1.0295115178936053e-86", "2.1931722769033432e-74", 
  "4.6672614583958535e-62", "9.921302603862224e-50", "2.1064858766735377e-37", "4.466775307786346e-25", "9.458744898438446e-13",
  "1.9999999999999991", "4310085580881.918", "9.284550294640347e+24", "1.9991589056605124e+37", "4.302660820302176e+49", 
  "9.255963134931779e+61", "1.9901765337663709e+74", "4.2769798331241623e+86", "9.186453044088644e+98", "1.9720242359035308e+111", 
  "4.230758200257588e+123", "9.070947279209167e+135", "1.9435756734383326e+148", "4.161495259952453e+160", "8.903894453031755e+172", 
  "1.9035985662552913e+185", "4.066455873104235e+197", "8.679224237554806e+209", "1.8507457879790152e+222", "3.9426507457594914e+234", 
  "8.3903038823657e+246", "1.7835457579854725e+259", "3.786815199180443e+271", "8.029891305780016e+283", "1.7003920768336733e+296", 
  "nan", "-2.3975646884872943e-296", "-5.1647025371498904e-284", "-1.1120690549967671e-271", "-2.3934345283193795e-259", 
  "-5.1488004017107635e-247", "-1.107072444774506e-234", "-2.3791490050117653e-222", "-5.1101341302013833e-210", "-1.0969748939128956e-197", 
  "-2.353437368264532e-185", "-5.045881915716332e-173", "-1.0811498557495401e-160", "-2.314908578805457e-148", "-4.952955696587055e-136", 
  "-1.0589118517166087e-123", "-2.262041165004326e-111", "-4.827978740776321e-99", "-1.0295115178936038e-86", "-2.19317227690334e-74", 
  "-4.667261458395847e-62", "-9.921302603862209e-50", "-2.1064858766735344e-37", "-4.466775307786339e-25", "-9.45874489843843e-13", 
  "-1.9999999999999973", "-4310085580881.914", "-9.284550294640339e+24", "-1.9991589056605105e+37", "-4.3026608203021716e+49", 
  "-9.255963134931769e+61", "-1.9901765337663689e+74", "-4.276979833124158e+86", "-9.186453044088634e+98", "-1.9720242359035287e+111", 
  "-4.230758200257583e+123", "-9.070947279209156e+135", "-1.9435756734383303e+148", "-4.161495259952448e+160", "-8.903894453031744e+172", 
  "-1.903598566255289e+185", "-4.0664558731042297e+197", "-8.679224237554795e+209", "-1.8507457879790126e+222", "-3.942650745759486e+234", 
  "-8.390303882365688e+246", "-1.7835457579854698e+259", "-3.786815199180437e+271", "-8.029891305780003e+283", "-1.7003920768336704e+296"
  ]


@inline(never)
public func run_ParseFloatSmall(_ N: Int) {
  for _ in 0..<N {
    for element in smallWorkload {
      let f = Float(element)
      blackHole(f)
    }
  }
}

@inline(never)
public func run_ParseDoubleSmall(_ N: Int) {
  for _ in 0..<N {
    for element in smallWorkload {
      let f = Double(element)
      blackHole(f)
    }
  }
}

@inline(never)
public func run_ParseFloat80Small(_ N: Int) {
#if os(macOS) || os(iOS) || os(watchOS) || os(tvOS) || os(Linux)
// On Darwin, long double is Float80 on x86, and Double otherwise.
// On Linux, Float80 is at aleast available on x86.
#if arch(x86_64) || arch(i386)
  for _ in 0..<N {
    for element in smallWorkload {
      let f = Float80(element)
      blackHole(f)
    }
  }
#endif // x86
#endif // Darwin/Linux
}

@inline(never)
public func run_ParseFloatUniform(_ N: Int) {
  for _ in 0..<N {
    for element in uniformWorkload {
      let f = Float(element)
      blackHole(f)
    }
  }
}

@inline(never)
public func run_ParseDoubleUniform(_ N: Int) {
  for _ in 0..<N {
    for element in uniformWorkload {
      let f = Double(element)
      blackHole(f)
    }
  }
}

@inline(never)
public func run_ParseFloat80Uniform(_ N: Int) {
#if os(macOS) || os(iOS) || os(watchOS) || os(tvOS) || os(Linux)
// On Darwin, long double is Float80 on x86, and Double otherwise.
// On Linux, Float80 is at aleast available on x86.
#if arch(x86_64) || arch(i386)
  for _ in 0..<N {
    for element in uniformWorkload {
      let f = Float80(element)
      blackHole(f)
    }
  }
#endif // x86
#endif // Darwin/Linux
}
